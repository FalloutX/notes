{
    "docs": [
        {
            "location": "/",
            "text": "Notes Index.\n\n\nTo the Reader\n: These are unapologetically my notes. These were made for personal use, but opened for someone who may see a value in the matter presented. Keep in mind that there can be some spelling mistakes as well as some errors in the notes. If you find any mistakes, please raise an \nissue\n.\n\n\nWhy?\n: This is currently the best way I know how to manage my notes. The \nSearch\n in top bar is very handy.\n\n\nIndex   \n\n\nNotes\n\n\n\n\n\n\n\n\nTopic\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nElixir Getting Started\n\n\nSee\n\n\n\n\n\n\nData Visualization & D3\n\n\nSee\n\n\n\n\n\n\nProgressive Web App Notes\n\n\nSee\n\n\n\n\n\n\nRedux Notes\n\n\nSee\n\n\n\n\n\n\nRuby Notes\n\n\nSee\n\n\n\n\n\n\nData Analysis Notes\n\n\nSee\n\n\n\n\n\n\n\n\nResources\n\n\n\n\n\n\n\n\nTopic\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nGeneral Dev Resources\n\n\nSee\n\n\n\n\n\n\nLearning Ruby\n\n\nSee\n\n\n\n\n\n\n\n\n\n\nThis page was last updated on 7th Feb 2017.",
            "title": "Home"
        },
        {
            "location": "/#notes-index",
            "text": "To the Reader : These are unapologetically my notes. These were made for personal use, but opened for someone who may see a value in the matter presented. Keep in mind that there can be some spelling mistakes as well as some errors in the notes. If you find any mistakes, please raise an  issue .  Why? : This is currently the best way I know how to manage my notes. The  Search  in top bar is very handy.",
            "title": "Notes Index."
        },
        {
            "location": "/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/#notes",
            "text": "Topic  Link      Elixir Getting Started  See    Data Visualization & D3  See    Progressive Web App Notes  See    Redux Notes  See    Ruby Notes  See    Data Analysis Notes  See",
            "title": "Notes"
        },
        {
            "location": "/#resources",
            "text": "Topic  Link      General Dev Resources  See    Learning Ruby  See      This page was last updated on 7th Feb 2017.",
            "title": "Resources"
        },
        {
            "location": "/notes/elixir_getting_started/",
            "text": "Getting Started with Elixir\n\n\n\n\nUpdated 25th Janaury 2017.\n\n\n\n\nElixir Data Types.\n\n\n\n\n\n\nNumbers\n - (no upper range)\n\n\n\n\nInteger\n\n\nFloat\n\n\n\n\n\n\n\n\nAtoms\n (called symbols in Ruby) - \n:firstname\n is an atom. \n:ok\n and \n:error\n are very common atoms in elixir. | \nAtoms\n\n\n\n\nElixir doesn't have a Boolean type. Instead it uses \n:true\n and \n:false\n atoms.\n\n\nAtoms are more memory efficient than strings.\n\n\n:nil\n, \n:false\n, \n:true\n can be used without colons at the start, like \nnil\n, \nfalse\n, \ntrue\n.\n\n\n\n\n\n\n\n\nStrings\n are UTF-8 out of the box. | \nStrings\n\n\n\n\n\n\n<>\n is the concatenation operator.\n\n\n\n\n\n\n\"hello\" <> \" world!\"\n becomes \n\"hello world!\"\n\n\n\n\n\n\nString Interpolation is done with \n\"#{}\"\n\n\n\n\n\n\n\"Hello, #{'andy'}\"\n becomes \n\"Hello, andy\"\n\n\n\n\n\n\nKeep in mind single-quoted and double-quoted representations are not equivalent in Elixir. Single quotes are char lists, double quotes are strings.\n\n\n\n\n\n\n\n\n\n\nTuples\n\n\n\n\nOrdered collections of 2-5 items. for more items, use List/Map.\n\n\nCreate a tuple like \nbook = {\"programming with elixir\", 51002, 90.19}\n\n\nTo get 2nd element from the book tuple, \nelem(book, 1)\n\n\nTo change element at 3rd position of the book tuple, \nput_elem(book, 2, \"Newton Taylor\")\n\n\nput_elem\n doesn't mutate the book tuple. Data is immutable in elixir.\n\n\n{title, price, author} = book\n, matches the book tuple to the left hand side variables title, price and author. If you don't need any of the element from book, you can match it with \n_\n(underscore).\n\n\nTuples store elements contiguously in memory. This means accessing a tuple element by index or getting the tuple size is a fast operation.\n\n\n\n\n\n\n\n\nList\n\n\n\n\nBetter data structure for big collection of data items.\n\n\nIn Elixir, Lists are singly linked. Each element has a pointer to the next element, but no pointer to the prev element. Prepending the easier than appending.\n\n\nhd(my_list)\n gives the first element (head of the list), and \ntl(my_list)\n gives the list minus first element(tail of the list).\n\n\nPrepending to the list: \n[89 | my_list]\n, prepends 89 to the my_list.\n\n\nPatten matching left-side and right-side works in lists.\n\n\nTwo lists can be concatenated or subtracted using the \n++/2\n and \n--/2\n operators.\n\n\n\n\n\n\n\n\nImmutablity\n\n\n\n\nIn elixir data is immutable, once a list/tuple is created it cannot be modified.\n\n\nImmutability helps with concurrency in elixir.\n\n\nEfficient Memory Use. It knows the memory assigned cannot be modified, so elixir doesn't have to copy stuff.\n\n\n\n\n\n\n\n\nMaps\n\n\n\n\nCollection of key-value pairs, keys don't have to be atoms. Only one instance of a key is allowed.\n\n\nsyntax - \n%{ 1 => {\"Nate\", \"nate@gmail.com\"}, 2 => {\"charles\", \"charles@gmail.com\"} }\n\n\nEven tuples can be used as keys for maps.\n\n\nIf they key is an Atom, then you can use dot syntax to access that property, like \ncostumers.nate\n, else for other you need to use \n[]\n syntax, like \ncostumers['charles']\n.\n\n\n\n\n\n\n\n\nModules & Functions\n\n\n\n\n\n\nModules\n\n\n\n\nElixir used do-end blocks instead of curly braces or indents.\n\n\n\n\ndefmodule ExampleModule do\n  # Module Code.\nend\n\n\n\n\n\n\n\n\nModule Directives\n\n\n\n\nimport\n to import other modules into the current module.\n\n\nimport IO, only: [puts: 1]\n will only import \nputs\n function from the IO Module.\n\n\nimport Kernel, except: [inspect: 1]\n will import everything from \nKernel\n module except the \ninspect\n function.\n\n\nalias ModulePlayground.Misc.Util.Math, as: MyMath\n will add \nMyMath\n alias for rather long name of \nModulePlayground.Misc.Util.Math\n. If \nas:\n option in not provided, it would use the last name of the aliased Module as the alias. For \nModulePlayground.Misc.Util.Math\n, the alias without \nas:\n would be \nMath\n.\n\n\nrequire\n is used to bring in Macros from other modules into your module.\n\n\n\n\n\n\n\n\nBasic Operators\n\n\n\n\nArithmetic Operators\n: \n*\n, \n+\n, \n/\n, \n-\n, \ndiv/2\n(for integer division) & \nrem/2\n(remainder)\n\n\nList Concatenation (\n++\n) and List Subtraction \n--\n.\n\n\nString Concatenation \n<>\n\n\nBoolean Operators\n(strict): \nand\n, \nor\n and \nnot\n. they expect boolean as a first argument.\n\n\nBoolean Operators\n(non-strict): \n&&\n, \n||\n and \n!\n. don't expect boolean as a first argument. only \nfalse\n & \nnil\n are falsy in Elixir\n\n\nComparision\n: \n==\n, \n!=\n, \n===\n, \n<=\n, \n>=\n, \n>\n and \n<\n.\n\n\n===\n vs \n==\n: \n===\n is more strict when comparing floats and integers. \n1 === 1.0\n is \nfalse\n, while \n1 == 1.0\n is true.\n\n\nIn Elixir, different data types can be compared. \n1 < :atom\n is true.\n\n\nData Types Sorting Order: \nnumber < atom < reference < function < port < pid < tuple < map < list < bitstring\n\n\n\n\n\n\n\n\nFunctions\n\n\ndefmodule Sample do # The module that encloses the function\n\n    def SampleFunction do\n        #Function code.\n    end\n\nend\n\n\n\n\n\n\n\n\nlast evaluated statement is the default return value of the function, like Ruby.\n\n\n\n\n\n\nFunction Arity\n - {function name}/{number of parameters}\n\n\n\n\n\n\nShorthand for writing smaller functions.\n\n\n\n\n\n\ndef first([]), do:nil\ndef first([head | _]), do: head\n\n\n\n\n\u200b\n\n\n\n\n\n\nGaurd Clauses\n\n\n\n\n\n\nTo safely return sane results when inputs are bit worse than expected, and keep such inputs from entering the saner/more logical function.\n\n\n\n\n\n\nGuard Clause way to do the above functionality.\n\n\n\n\n\n\ndef first(list) when length(list) == 0, do: nil #This would execute when list is empty.\n\ndef first([head | _]), do: head\n\n\n\n\n\n\n\n\nDefault Parameters\n\n\n\n\nSpecify default parameter with \n\\\\\n(double backslash) symbol. In the below example, \nval\n has a default value of 0.\n\n\n\n\ndef prepend(list, val \\\\ 0) do\n    [val | list]\nend\n\n\n\n\n\n\n\n\nPrivate Functions\n\n\n\n\nTo define a private function, use the defp macro instead of def macro used to define public functions.\n\n\nPrivate Function would be accessible to other functions inside the module it was defined, but not outside.\n\n\n\n\ndefp trace(string) do\n    IO.puts \"The Value passed to trace is #{string}\"\nend\n\n\n\n\n\n\n\n\nFunctions as first class citizens\n\n\n\n\npassing a function as an argument\n: Need to prefix \n&\n for capturing and suffix the function with its Arity.\n\n\nreturn functions as values from other functions\n\n\nassign functions to a variable\n\n\n\n\n# passing a function as an argument\nEnum.map(list, &Sample.Utils.sqaure/1)\n\n# assign to a variable\nsqaure = &Sample.Utils.sqaure/2\n\n\n\n\n\n\n\n\nAnonymous Functions\n\n\n\n\nto define a anonymous function with \nfn\n syntax\n\n\nNote\n: a dot (\n.\n) between the variable and parentheses is required to invoke an anonymous function.\n\n\nTherefore, Elixir makes a clear distinction between anonymous functions and named functions.\n\n\nAnonymous functions are closures and as such they can access variables that are in scope when the function is defined\n\n\n\n\nEnum.map(list, fn(x) -> x*x end)\n\n\n\n\n\n\nusing \n&\n capturing syntax\n\n\n\n\nEnum.map(list, &(&1 * &1))\n#&1 captures the first argument\n\nEnum.reduce(list, 0, &(&1 + &2))\n# &n captures the nth argument.\n\n\n\n\n\n\n\n\nCalling the passed function\n\n\n\n\ncall the pass function \nf\n with \na\n argument as \nf.(a)\n\n\n\n\n\n\n\n\nPattern Matching\n\n\n\n\nIn Elixir, the \n=\n operator is actually called the match operator. When the sides of \n=\n do not match, a MatchError is raised.\n\n\nMatch operator is also useful for destructuring complex data types.\n\n\n\n\niex> {a, b, c} = {:hello, \"world\", 42}\n{:hello, \"world\", 42}\niex> a\n:hello\niex> b\n\"world\"\n\n\n\n\n\n\nA list also supports matching on its own head and its tail.\n\n\n\n\niex> [head | tail] = [1, 2, 3]\n[1, 2, 3]\niex> head\n1\niex> tail\n[2, 3]\niex> [h | t] = []  # head-tail matching won't work for an empty list\n** (MatchError) no match of right hand side value: []\n\n\n- \nPin operator\n \n^\n can be use to pattern match against an existing variable\u2019s value rather than rebinding the variable.\n\n\niex> x = 1\n1\niex> ^x = 2 # Trying to match 1 = 2, will throw Match Error\n** (MatchError) no match of right hand side value: 2\n\n\n- \nNote\n: You cannot make function calls on the left side of a match.\n\n\n\n\n\n\nControl Flow in Elixir\n\n\n\n\n\n\nBranching logic: if-else, cond, case.\n\n\n\n\n\n\nIterating logic: recursion, no loops.\n\n\n\n\n\n\nIf-Else\n\n\n## first functon with If Else\n\ndef firstIF(list) do\n    if length(list) == 0 do\n        nil\n    else\n        hd(list)\n    end\nend\n\n\n\n\n\n\n\n\nUnless\n - for the negative condtion instead of If.\n\n\ndef firstUnless(list) do\n    unless length(list) == 0 do\n        hd(list)\n  end\nend\n\n\n\n\n\n\nquote EXP\n prints out the Abstract syntax tree for evaluating the EXP.\n\n\n\n\n\n\n\n\nCond\n macro\n\n\n```elixir\n#Getting Day Abbreviation using the cond macro.\ndef day_abbreviation(day) do\n    cond do\n        day == :Monday -> \"M\"\n        day == :Tuesday -> \"Tu\"\n        day == :Wednesday -> \"W\"\n        day == :Thursday -> \"Th\"\n        day == :Friday -> \"F\"\n        day == :Saturday -> \"Sa\"\n        day == :Sunday -> \"Su\"\n        true -> \"Invalid Day\"\n    end\nend\n```\n\n\n\n\n\n\n\nCase\n\n\n\n\nCase statements are really useful combined with Pattern Matching capabilities of Elixir.\n\n\nYou can also combine Gaurd Clauses with case statements for narrowing down cases.\n\n\n\n\ndef describe_date(date) do\n    case date do\n        {1, _, _} -> \"Brand New Month!\"\n        {25, 12, _} -> \"Merry Christmas\"\n        {25, month, _} -> \"Only #{12-month} months until Christmas!\"\n        {31, 10, _} -> \"Happy Halloween\"\n        {_, _ , _} -> \"Just an average day!\"\n    end\nend\n\n\n\n\n\n\n\n\nRecursion in Elixir\n\n\n\n\nTo understand what recursion is, you must first understand recursion.\n\n\n\n\n\n\nWriting a map function with Recursion.\n\n\n\n\ndef map([], _), do: []\ndef map([head | tail], f) do\n    [f.(head) | map(tail, f)]\nend\n\n\n\n\n\n\n\n\nTail Recursion\n\n\n\n\nonly happens when the last operation a function performs is recursion.\n\n\n\n\n\n\n\n\n# tail_map written with tail recursion instead of Recursion.\n# also need reverse method to reverse the result.\n\ndef reverse(list), do: reverse(list, [])\ndef reverse([], reversed), do: reversed\ndef reverse([hd | tl], reversed), do: reverse(tl, [hd | reversed])\n\n\ndef tail_map([hd | tl], f), do: tail_map(tl, f, [f.(hd)])\ndef tail_map([], _, result), do: reverse(result)\ndef tail_map([hd | tl], f, result), do: tail_map(tl, f, [f.(hd) | result]\n\n\n\n\nElixir Ecosystem.\n\n\n\n\n\n\nBasics\n: Mix - Build Tool & Hex - Package Manager.\n\n\n\n\n\n\nMix\n - Task Runner, Build Tool for Elixir.\n\n\n\n\nMix | Elixir School\n\n\nIntroduction to Mix\n\n\nmix help\n to list all the mix commands.\n\n\nmix local.hex\n to install hex - package manager.\n\n\n\n\n\n\n\n\nmix new\n\n\n\n\nfor scaffolding a new elixir application.\n\n\nmix new app_name --sup\n creates a new elixir application named \napp_name\n w/ supervisor. \napp_name\n needs to be in snake_case.\n\n\n\n\n\n\n\n\nSupervisors & Umbrellas\n\n\n\n\nSupervisor\n process is only responsible for supervising other processes in the application and restart them if they crash.\n\n\nUmbrella\n project is the one which has other elixir projects underneath it. A Grouping of similar elixir apps bundled into a single project.\n\n\n\n\n\n\n\n\nHex\n - \nWebsite\n\n\n\n\nThe package manager for Elixir Ecosystem.\n\n\nmix.exs\n files's \ndeps\n function contains the dependencies list.\n\n\nmix deps.get\n to fetch and install the dependencies.\n\n\n\n\n\n\n\n\nCreating an Application.\n\n\n\n\n\n\nProject Structure\n\n\n\n\nmix.exs\n - \nproject\n function contains config of the project like elixir version, project version, dependencies etc. \napplication\n function contains the other applications that need to be started for our application to get started.\n\n\nlib\n folder contains our application code as well as our application module.\n\n\nconfig\n folder holds files that are used for config properties.\n\n\ndeps\n folder is where dependencies get installed.\n\n\ntest\n is the conventional folder for your tests.\n\n\n\n\n\n\n\n\nA Short Description of the Application\n\n\n\n\nThis Application will read lines from a file, choose a random line and send that line as a tweet.\n\n\n\n\n\n\n\n\nFileReader Module\n\n\n\n# This Reads a file, and returns a random line from the file.\ndefmodule MyFirstApp.FileReader do\n    def get_strings_to_tweet(filepath) do\n        File.read!(filepath)\n        |> String.split(\"\\n\")\n        |> Enum.map(&String.trim/1)\n        |> Enum.filter(&String.length(&1) <= 140)\n        |> Enum.random()\n    end\nend\n\n\n\n\n\n\n\n\nTweet Module\n\n\n\n\n\n\ndefmodule MyFirstApp.Tweet do\n    def send(str) do\n        # Configure the Extwitter Module for accessing twitter.\n        ExTwitter.configure(:process, [\n            consumer_key: System.get_env(\"ELIXIR_APPS_TWITTER_CONSUMER_KEY\"),\n            consumer_secret: System.get_env(\"ELIXIR_APPS_TWITTER_CONSUMER_SECRET\"),\n            access_token: System.get_env(\"ELIXIR_APPS_TWITTER_ACCESS_TOKEN\"),\n            access_token_secret: System.get_env(\"ELIXIR_APPS_TWITTER_ACCESS_SECRET\")\n            ])\n        # Send tweet.\n        ExTwitter.update(str)\n    end\n\n    def send_random(file) do\n        # this would send a random line from a file as a tweet.\n        MyFirstApp.FileReader.get_strings_to_tweet(file) |> send\n    end\nend\n\n\n\n\n\n\n\n\nBehaviours\n\n\n\n\nDefines a set of functions to be implemented.\n\n\nEnsure that a module implements ALL functions in that set.\n\n\nMore like Interfaces in traditional OO languages.\n\n\n\n\n\n\n\n\nCreating a Tweet Server\n\n\n\n\nUsing GenServer, which is a behaviour in Elixir.\n\n\n\n\n\n\n\n\n\ndefmodule MyFirstApp.TweetServer do\n  use GenServer # GenServers are behaviours in Elixir\n\n  def start_link() do\n    # hardcoding the name of the server\n    # start_link will call init.\n    GenServer.start_link(__MODULE__, :ok, name: :tweet_server)\n  end\n\n  def init(:ok) do\n    {:ok, %{}}\n  end\n\n  def handle_cast({:tweet, tweet}, _) do\n    # Async\n    # handle_call is sync.\n    MyFirstApp.Tweet.send(tweet)\n    {:noreply, %{}}\n  end\n\n  def tweet(tweet) do\n    # This will call handle_cast above\n    GenServer.cast(:tweet_server, {:tweet, tweet})\n  end\n\nend\n\n\n\n\n\n\n\n\n\nAdding Tweet Server in Supervision Tree\n\n\n\n\n\n\nAdd TweetServer in the supervision children list in \nstart\n function of the application.ex\n\n\n\n\n\n\nFile\n: lib/my_first_app/application.ex\n\n\n\n\n\n\n\n\n\n\ndef start(_type, _args) do\n  import Supervisor.Spec, warn: false\n\n\n  children = [\n    worker(MyFirstApp.TweetServer, []) # Adding TweetServer in the supervision tree.\n  ]\n\n  opts = [strategy: :one_for_one, name: MyFirstApp.Supervisor]\n  Supervisor.start_link(children, opts)\nend\n\n\n\n\n\n\n\n\nTweetServer processes\n\n\n\n\nProcess.whereis(:tweet_server)\n to get the process ID of the tweet_server. This is not a OS process ID, but elixir process ID.\n\n\nProcess.whereis(:tweet_server) |> Process.exit(:kill)\n to kill the tweet server.\n\n\nBut since tweet server is in the Supervision tree, it'll be started again after we killed it.\n\n\n\n\n\n\n\n\nSchedule Sending Tweets\n\n\n\n\n\n\ndefmodule MyFirstApp.Scheduler do\n  def schedule_file(schedule, file) do\n    Quantum.add_job(schedule, fn -> MyFirstApp.FileReader.get_strings_to_tweet(file)\n    |> MyFirstApp.TweetServer.tweet end)\n  end\n\nend\n\n\n\n\n\n\n\n\nAdding Scheduler to the start of the applicaiton\n\n\n\n\nmodifying the \nstart\n function in the \napplication.exs\n file.\n\n\n\n\n\n\n\n\n\ndef start(_type, _args) do\n  import Supervisor.Spec, warn: false\n\n  # Define workers and child supervisors to be supervised\n  children = [\n    # Starts a worker by calling: MyFirstApp.Worker.start_link(arg1, arg2, arg3)\n    worker(MyFirstApp.TweetServer, [])\n  ]\n\n  # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html\n  # for other strategies and supported options\n  opts = [strategy: :one_for_one, name: MyFirstApp.Supervisor]\n  process = Supervisor.start_link(children, opts)\n  MyFirstApp.Scheduler.schedule_file(\"*/5 * * * *\",\n  Path.join(\"#{:code.priv_dir(:my_first_app)}\", \"Sample.txt\"))\n\n  process\nend\n\n\n\n\nTesting Elixir\n\n\n\n\nmix test\n to run the tests\n\n\nmix test FILEPATH\n to run the tests located at the \nFILEPATH\n.\n\n\nmix test --only TAGNAME\n to run the test tagged \nTAGNAME\n.\n\n\n\n\n# Tagging a test\n@tag watching: true\ntest \"this test will fail\" do\n  assert 2 + 3 == 5\nend\n\n\n\n\n\n\n\n\nExUnit\n\n\n\n\nuse ExUnit.Case\n needs to be in every Test Module.\n\n\nTry to mimick directory structure of the app in the tests folder.\n\n\n\n\n\n\n\n\nTesting File Reader Module\n\n\n\n\n\n\nUpdated File Reader Module\n\n# lib/my_first_app/file_reader.ex\n\ndefmodule MyFirstApp.FileReader do\n  # Divided the module into two parts, one that reads the file and other that picks the string, to improve testability.\n  def get_strings_to_tweet(filepath) do\n    File.read!(filepath)\n    |> pick_string\n  end\n\n  def pick_string(str) do\n    str\n    |> String.split(\"\\n\")\n    |> Enum.map(&String.trim/1)\n    |> Enum.filter(&String.length(&1) <= 140)\n    |> Enum.random()\n  end\nend\n\n\n\n\n\n\n\nTests for File Reader Module\n\n# test/my_first_app/file_reader_test.exs\n\ndefmodule FileReaderTest do\n  use ExUnit.Case\n\n  import MyFirstApp.FileReader\n  test \"Passing a file should return a string\" do\n    str = get_strings_to_tweet Path.join \"#{:code.priv_dir(:my_first_app)}\", \"Sample.txt\"\n\n    assert str != nil\n  end\n\n  test \"Will not return a line longer than 140 chars\" do\n    str = get_strings_to_tweet Path.join \"#{:code.priv_dir(:my_first_app)}\", \"too_long.txt\"\n    IO.puts str\n    assert str == \"short line\"\n  end\n\n  test \"An Empty string should return an empty string\" do\n    str = pick_string \"\"\n\n    assert str == \"\"\n  end\nend\n\n\n\n\n\n\n\n\n\n\n\nMocking out File Reader\n\n\n\n\nBy Default, \nExUnit\n doesn't have mocking ability baked in.\n\n\nMocking allows us to intercept calls to a specific module and redirect them to a function we wrote for testing.\n\n\nYou can use \nMock Library\n to perform mocking.\n\n\nwith_mock\n is the main mocking function in Mock Library.\n\n\nYou can use \nMix Test Watch Library\n to automatically run tests when the some file changes occur. Command for that is \nmix test.watch\n\n\nExample mocking the File Module\n\ntest \"The string returned should be trimmed\" do\n  with_mock File, [read!: fn(_) -> \" ABC \" end] do\n    str = get_strings_to_tweet \"doesnt_exist.txt\"\n\n    assert str == \"ABC\"\n  end\nend\n\n\n\n\n\n\n\n\n\nDocTest\n\n\n\n\nA way of putting basic module tests in the docstrings of the module.\n\n\ndocstrings start with \n@doc \"\"\"\n and end with \n\"\"\"\n\n\nYou can write doctest by writing the call to the function after \niex>\n and expected value in the next line.\n\n\nTo run doctest write \ndoctest MODULE\n in the test file.\n\n\n\n\n\n\n\n\n# lib/my_first_app/file_reader.ex\n\ndefmodule MyFirstApp.FileReader do\n\n  @doc \"\"\"\n  This Function will take the path to a file and return a string that can be\n  tweeted out\n\n  The Following is a DocTest\n\n  iex> MyFirstApp.FileReader.get_strings_to_tweet \"priv/doc.txt\"\n  \"ABC\"\n  \"\"\"\n\n\n  def get_strings_to_tweet(filepath) do\n    #...\n  end\n  #...\nend\n\n\n\n\nNext Steps\n\n\n\n\n\n\nReference\n\n\n\n\nElixir Syntax Crash Course\n\n\nElixir Guides\n\n\nElixir Official Docs\n\n\nElixir Quick Reference\n\n\n\n\n\n\n\n\nLearning More of Elixir\n\n\n\n\nElixir Style Guide\n\n\nElixir School\n\n\nExercism.io Elixir Problems\n\n\n\n\n\n\n\n\nTools\n\n\n\n\nCredo - Static Code Analysis tool\n - like linters in other languages.\n\n\n\n\n\n\n\n\nResources\n\n\n\n\nElixir Status\n - posts/blogs and other content related to elixir.\n\n\n#myelixirstatus on twitter.\n\n\nElixir Fountain Podcast\n\n\nElixir Conf 2016\n\n\n\n\n\n\n\n\nExplanations\n\n\n\n\nWhy are there two kinds of functions in Elixir?",
            "title": "Elixir Getting Started"
        },
        {
            "location": "/notes/elixir_getting_started/#getting-started-with-elixir",
            "text": "Updated 25th Janaury 2017.",
            "title": "Getting Started with Elixir"
        },
        {
            "location": "/notes/elixir_getting_started/#elixir-data-types",
            "text": "Numbers  - (no upper range)   Integer  Float     Atoms  (called symbols in Ruby) -  :firstname  is an atom.  :ok  and  :error  are very common atoms in elixir. |  Atoms   Elixir doesn't have a Boolean type. Instead it uses  :true  and  :false  atoms.  Atoms are more memory efficient than strings.  :nil ,  :false ,  :true  can be used without colons at the start, like  nil ,  false ,  true .     Strings  are UTF-8 out of the box. |  Strings    <>  is the concatenation operator.    \"hello\" <> \" world!\"  becomes  \"hello world!\"    String Interpolation is done with  \"#{}\"    \"Hello, #{'andy'}\"  becomes  \"Hello, andy\"    Keep in mind single-quoted and double-quoted representations are not equivalent in Elixir. Single quotes are char lists, double quotes are strings.      Tuples   Ordered collections of 2-5 items. for more items, use List/Map.  Create a tuple like  book = {\"programming with elixir\", 51002, 90.19}  To get 2nd element from the book tuple,  elem(book, 1)  To change element at 3rd position of the book tuple,  put_elem(book, 2, \"Newton Taylor\")  put_elem  doesn't mutate the book tuple. Data is immutable in elixir.  {title, price, author} = book , matches the book tuple to the left hand side variables title, price and author. If you don't need any of the element from book, you can match it with  _ (underscore).  Tuples store elements contiguously in memory. This means accessing a tuple element by index or getting the tuple size is a fast operation.     List   Better data structure for big collection of data items.  In Elixir, Lists are singly linked. Each element has a pointer to the next element, but no pointer to the prev element. Prepending the easier than appending.  hd(my_list)  gives the first element (head of the list), and  tl(my_list)  gives the list minus first element(tail of the list).  Prepending to the list:  [89 | my_list] , prepends 89 to the my_list.  Patten matching left-side and right-side works in lists.  Two lists can be concatenated or subtracted using the  ++/2  and  --/2  operators.     Immutablity   In elixir data is immutable, once a list/tuple is created it cannot be modified.  Immutability helps with concurrency in elixir.  Efficient Memory Use. It knows the memory assigned cannot be modified, so elixir doesn't have to copy stuff.     Maps   Collection of key-value pairs, keys don't have to be atoms. Only one instance of a key is allowed.  syntax -  %{ 1 => {\"Nate\", \"nate@gmail.com\"}, 2 => {\"charles\", \"charles@gmail.com\"} }  Even tuples can be used as keys for maps.  If they key is an Atom, then you can use dot syntax to access that property, like  costumers.nate , else for other you need to use  []  syntax, like  costumers['charles'] .",
            "title": "Elixir Data Types."
        },
        {
            "location": "/notes/elixir_getting_started/#modules-functions",
            "text": "Modules   Elixir used do-end blocks instead of curly braces or indents.   defmodule ExampleModule do\n  # Module Code.\nend    Module Directives   import  to import other modules into the current module.  import IO, only: [puts: 1]  will only import  puts  function from the IO Module.  import Kernel, except: [inspect: 1]  will import everything from  Kernel  module except the  inspect  function.  alias ModulePlayground.Misc.Util.Math, as: MyMath  will add  MyMath  alias for rather long name of  ModulePlayground.Misc.Util.Math . If  as:  option in not provided, it would use the last name of the aliased Module as the alias. For  ModulePlayground.Misc.Util.Math , the alias without  as:  would be  Math .  require  is used to bring in Macros from other modules into your module.     Basic Operators   Arithmetic Operators :  * ,  + ,  / ,  - ,  div/2 (for integer division) &  rem/2 (remainder)  List Concatenation ( ++ ) and List Subtraction  -- .  String Concatenation  <>  Boolean Operators (strict):  and ,  or  and  not . they expect boolean as a first argument.  Boolean Operators (non-strict):  && ,  ||  and  ! . don't expect boolean as a first argument. only  false  &  nil  are falsy in Elixir  Comparision :  == ,  != ,  === ,  <= ,  >= ,  >  and  < .  ===  vs  == :  ===  is more strict when comparing floats and integers.  1 === 1.0  is  false , while  1 == 1.0  is true.  In Elixir, different data types can be compared.  1 < :atom  is true.  Data Types Sorting Order:  number < atom < reference < function < port < pid < tuple < map < list < bitstring     Functions  defmodule Sample do # The module that encloses the function\n\n    def SampleFunction do\n        #Function code.\n    end\n\nend    last evaluated statement is the default return value of the function, like Ruby.    Function Arity  - {function name}/{number of parameters}    Shorthand for writing smaller functions.    def first([]), do:nil\ndef first([head | _]), do: head  \u200b    Gaurd Clauses    To safely return sane results when inputs are bit worse than expected, and keep such inputs from entering the saner/more logical function.    Guard Clause way to do the above functionality.    def first(list) when length(list) == 0, do: nil #This would execute when list is empty.\n\ndef first([head | _]), do: head    Default Parameters   Specify default parameter with  \\\\ (double backslash) symbol. In the below example,  val  has a default value of 0.   def prepend(list, val \\\\ 0) do\n    [val | list]\nend    Private Functions   To define a private function, use the defp macro instead of def macro used to define public functions.  Private Function would be accessible to other functions inside the module it was defined, but not outside.   defp trace(string) do\n    IO.puts \"The Value passed to trace is #{string}\"\nend    Functions as first class citizens   passing a function as an argument : Need to prefix  &  for capturing and suffix the function with its Arity.  return functions as values from other functions  assign functions to a variable   # passing a function as an argument\nEnum.map(list, &Sample.Utils.sqaure/1)\n\n# assign to a variable\nsqaure = &Sample.Utils.sqaure/2    Anonymous Functions   to define a anonymous function with  fn  syntax  Note : a dot ( . ) between the variable and parentheses is required to invoke an anonymous function.  Therefore, Elixir makes a clear distinction between anonymous functions and named functions.  Anonymous functions are closures and as such they can access variables that are in scope when the function is defined   Enum.map(list, fn(x) -> x*x end)   using  &  capturing syntax   Enum.map(list, &(&1 * &1))\n#&1 captures the first argument\n\nEnum.reduce(list, 0, &(&1 + &2))\n# &n captures the nth argument.    Calling the passed function   call the pass function  f  with  a  argument as  f.(a)     Pattern Matching   In Elixir, the  =  operator is actually called the match operator. When the sides of  =  do not match, a MatchError is raised.  Match operator is also useful for destructuring complex data types.   iex> {a, b, c} = {:hello, \"world\", 42}\n{:hello, \"world\", 42}\niex> a\n:hello\niex> b\n\"world\"   A list also supports matching on its own head and its tail.   iex> [head | tail] = [1, 2, 3]\n[1, 2, 3]\niex> head\n1\niex> tail\n[2, 3]\niex> [h | t] = []  # head-tail matching won't work for an empty list\n** (MatchError) no match of right hand side value: [] \n-  Pin operator   ^  can be use to pattern match against an existing variable\u2019s value rather than rebinding the variable.  iex> x = 1\n1\niex> ^x = 2 # Trying to match 1 = 2, will throw Match Error\n** (MatchError) no match of right hand side value: 2 \n-  Note : You cannot make function calls on the left side of a match.",
            "title": "Modules &amp; Functions"
        },
        {
            "location": "/notes/elixir_getting_started/#control-flow-in-elixir",
            "text": "Branching logic: if-else, cond, case.    Iterating logic: recursion, no loops.    If-Else  ## first functon with If Else\n\ndef firstIF(list) do\n    if length(list) == 0 do\n        nil\n    else\n        hd(list)\n    end\nend    Unless  - for the negative condtion instead of If.  def firstUnless(list) do\n    unless length(list) == 0 do\n        hd(list)\n  end\nend   quote EXP  prints out the Abstract syntax tree for evaluating the EXP.     Cond  macro  ```elixir\n#Getting Day Abbreviation using the cond macro.\ndef day_abbreviation(day) do\n    cond do\n        day == :Monday -> \"M\"\n        day == :Tuesday -> \"Tu\"\n        day == :Wednesday -> \"W\"\n        day == :Thursday -> \"Th\"\n        day == :Friday -> \"F\"\n        day == :Saturday -> \"Sa\"\n        day == :Sunday -> \"Su\"\n        true -> \"Invalid Day\"\n    end\nend\n```    Case   Case statements are really useful combined with Pattern Matching capabilities of Elixir.  You can also combine Gaurd Clauses with case statements for narrowing down cases.   def describe_date(date) do\n    case date do\n        {1, _, _} -> \"Brand New Month!\"\n        {25, 12, _} -> \"Merry Christmas\"\n        {25, month, _} -> \"Only #{12-month} months until Christmas!\"\n        {31, 10, _} -> \"Happy Halloween\"\n        {_, _ , _} -> \"Just an average day!\"\n    end\nend",
            "title": "Control Flow in Elixir"
        },
        {
            "location": "/notes/elixir_getting_started/#recursion-in-elixir",
            "text": "To understand what recursion is, you must first understand recursion.    Writing a map function with Recursion.   def map([], _), do: []\ndef map([head | tail], f) do\n    [f.(head) | map(tail, f)]\nend    Tail Recursion   only happens when the last operation a function performs is recursion.     # tail_map written with tail recursion instead of Recursion.\n# also need reverse method to reverse the result.\n\ndef reverse(list), do: reverse(list, [])\ndef reverse([], reversed), do: reversed\ndef reverse([hd | tl], reversed), do: reverse(tl, [hd | reversed])\n\n\ndef tail_map([hd | tl], f), do: tail_map(tl, f, [f.(hd)])\ndef tail_map([], _, result), do: reverse(result)\ndef tail_map([hd | tl], f, result), do: tail_map(tl, f, [f.(hd) | result]",
            "title": "Recursion in Elixir"
        },
        {
            "location": "/notes/elixir_getting_started/#elixir-ecosystem",
            "text": "Basics : Mix - Build Tool & Hex - Package Manager.    Mix  - Task Runner, Build Tool for Elixir.   Mix | Elixir School  Introduction to Mix  mix help  to list all the mix commands.  mix local.hex  to install hex - package manager.     mix new   for scaffolding a new elixir application.  mix new app_name --sup  creates a new elixir application named  app_name  w/ supervisor.  app_name  needs to be in snake_case.     Supervisors & Umbrellas   Supervisor  process is only responsible for supervising other processes in the application and restart them if they crash.  Umbrella  project is the one which has other elixir projects underneath it. A Grouping of similar elixir apps bundled into a single project.     Hex  -  Website   The package manager for Elixir Ecosystem.  mix.exs  files's  deps  function contains the dependencies list.  mix deps.get  to fetch and install the dependencies.",
            "title": "Elixir Ecosystem."
        },
        {
            "location": "/notes/elixir_getting_started/#creating-an-application",
            "text": "Project Structure   mix.exs  -  project  function contains config of the project like elixir version, project version, dependencies etc.  application  function contains the other applications that need to be started for our application to get started.  lib  folder contains our application code as well as our application module.  config  folder holds files that are used for config properties.  deps  folder is where dependencies get installed.  test  is the conventional folder for your tests.     A Short Description of the Application   This Application will read lines from a file, choose a random line and send that line as a tweet.     FileReader Module  \n# This Reads a file, and returns a random line from the file.\ndefmodule MyFirstApp.FileReader do\n    def get_strings_to_tweet(filepath) do\n        File.read!(filepath)\n        |> String.split(\"\\n\")\n        |> Enum.map(&String.trim/1)\n        |> Enum.filter(&String.length(&1) <= 140)\n        |> Enum.random()\n    end\nend    Tweet Module    defmodule MyFirstApp.Tweet do\n    def send(str) do\n        # Configure the Extwitter Module for accessing twitter.\n        ExTwitter.configure(:process, [\n            consumer_key: System.get_env(\"ELIXIR_APPS_TWITTER_CONSUMER_KEY\"),\n            consumer_secret: System.get_env(\"ELIXIR_APPS_TWITTER_CONSUMER_SECRET\"),\n            access_token: System.get_env(\"ELIXIR_APPS_TWITTER_ACCESS_TOKEN\"),\n            access_token_secret: System.get_env(\"ELIXIR_APPS_TWITTER_ACCESS_SECRET\")\n            ])\n        # Send tweet.\n        ExTwitter.update(str)\n    end\n\n    def send_random(file) do\n        # this would send a random line from a file as a tweet.\n        MyFirstApp.FileReader.get_strings_to_tweet(file) |> send\n    end\nend    Behaviours   Defines a set of functions to be implemented.  Ensure that a module implements ALL functions in that set.  More like Interfaces in traditional OO languages.     Creating a Tweet Server   Using GenServer, which is a behaviour in Elixir.     \ndefmodule MyFirstApp.TweetServer do\n  use GenServer # GenServers are behaviours in Elixir\n\n  def start_link() do\n    # hardcoding the name of the server\n    # start_link will call init.\n    GenServer.start_link(__MODULE__, :ok, name: :tweet_server)\n  end\n\n  def init(:ok) do\n    {:ok, %{}}\n  end\n\n  def handle_cast({:tweet, tweet}, _) do\n    # Async\n    # handle_call is sync.\n    MyFirstApp.Tweet.send(tweet)\n    {:noreply, %{}}\n  end\n\n  def tweet(tweet) do\n    # This will call handle_cast above\n    GenServer.cast(:tweet_server, {:tweet, tweet})\n  end\n\nend    Adding Tweet Server in Supervision Tree    Add TweetServer in the supervision children list in  start  function of the application.ex    File : lib/my_first_app/application.ex      def start(_type, _args) do\n  import Supervisor.Spec, warn: false\n\n\n  children = [\n    worker(MyFirstApp.TweetServer, []) # Adding TweetServer in the supervision tree.\n  ]\n\n  opts = [strategy: :one_for_one, name: MyFirstApp.Supervisor]\n  Supervisor.start_link(children, opts)\nend    TweetServer processes   Process.whereis(:tweet_server)  to get the process ID of the tweet_server. This is not a OS process ID, but elixir process ID.  Process.whereis(:tweet_server) |> Process.exit(:kill)  to kill the tweet server.  But since tweet server is in the Supervision tree, it'll be started again after we killed it.     Schedule Sending Tweets    defmodule MyFirstApp.Scheduler do\n  def schedule_file(schedule, file) do\n    Quantum.add_job(schedule, fn -> MyFirstApp.FileReader.get_strings_to_tweet(file)\n    |> MyFirstApp.TweetServer.tweet end)\n  end\n\nend    Adding Scheduler to the start of the applicaiton   modifying the  start  function in the  application.exs  file.     \ndef start(_type, _args) do\n  import Supervisor.Spec, warn: false\n\n  # Define workers and child supervisors to be supervised\n  children = [\n    # Starts a worker by calling: MyFirstApp.Worker.start_link(arg1, arg2, arg3)\n    worker(MyFirstApp.TweetServer, [])\n  ]\n\n  # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html\n  # for other strategies and supported options\n  opts = [strategy: :one_for_one, name: MyFirstApp.Supervisor]\n  process = Supervisor.start_link(children, opts)\n  MyFirstApp.Scheduler.schedule_file(\"*/5 * * * *\",\n  Path.join(\"#{:code.priv_dir(:my_first_app)}\", \"Sample.txt\"))\n\n  process\nend",
            "title": "Creating an Application."
        },
        {
            "location": "/notes/elixir_getting_started/#testing-elixir",
            "text": "mix test  to run the tests  mix test FILEPATH  to run the tests located at the  FILEPATH .  mix test --only TAGNAME  to run the test tagged  TAGNAME .   # Tagging a test\n@tag watching: true\ntest \"this test will fail\" do\n  assert 2 + 3 == 5\nend    ExUnit   use ExUnit.Case  needs to be in every Test Module.  Try to mimick directory structure of the app in the tests folder.     Testing File Reader Module    Updated File Reader Module # lib/my_first_app/file_reader.ex\n\ndefmodule MyFirstApp.FileReader do\n  # Divided the module into two parts, one that reads the file and other that picks the string, to improve testability.\n  def get_strings_to_tweet(filepath) do\n    File.read!(filepath)\n    |> pick_string\n  end\n\n  def pick_string(str) do\n    str\n    |> String.split(\"\\n\")\n    |> Enum.map(&String.trim/1)\n    |> Enum.filter(&String.length(&1) <= 140)\n    |> Enum.random()\n  end\nend    Tests for File Reader Module # test/my_first_app/file_reader_test.exs\n\ndefmodule FileReaderTest do\n  use ExUnit.Case\n\n  import MyFirstApp.FileReader\n  test \"Passing a file should return a string\" do\n    str = get_strings_to_tweet Path.join \"#{:code.priv_dir(:my_first_app)}\", \"Sample.txt\"\n\n    assert str != nil\n  end\n\n  test \"Will not return a line longer than 140 chars\" do\n    str = get_strings_to_tweet Path.join \"#{:code.priv_dir(:my_first_app)}\", \"too_long.txt\"\n    IO.puts str\n    assert str == \"short line\"\n  end\n\n  test \"An Empty string should return an empty string\" do\n    str = pick_string \"\"\n\n    assert str == \"\"\n  end\nend      Mocking out File Reader   By Default,  ExUnit  doesn't have mocking ability baked in.  Mocking allows us to intercept calls to a specific module and redirect them to a function we wrote for testing.  You can use  Mock Library  to perform mocking.  with_mock  is the main mocking function in Mock Library.  You can use  Mix Test Watch Library  to automatically run tests when the some file changes occur. Command for that is  mix test.watch  Example mocking the File Module test \"The string returned should be trimmed\" do\n  with_mock File, [read!: fn(_) -> \" ABC \" end] do\n    str = get_strings_to_tweet \"doesnt_exist.txt\"\n\n    assert str == \"ABC\"\n  end\nend     DocTest   A way of putting basic module tests in the docstrings of the module.  docstrings start with  @doc \"\"\"  and end with  \"\"\"  You can write doctest by writing the call to the function after  iex>  and expected value in the next line.  To run doctest write  doctest MODULE  in the test file.     # lib/my_first_app/file_reader.ex\n\ndefmodule MyFirstApp.FileReader do\n\n  @doc \"\"\"\n  This Function will take the path to a file and return a string that can be\n  tweeted out\n\n  The Following is a DocTest\n\n  iex> MyFirstApp.FileReader.get_strings_to_tweet \"priv/doc.txt\"\n  \"ABC\"\n  \"\"\"\n\n\n  def get_strings_to_tweet(filepath) do\n    #...\n  end\n  #...\nend",
            "title": "Testing Elixir"
        },
        {
            "location": "/notes/elixir_getting_started/#next-steps",
            "text": "Reference   Elixir Syntax Crash Course  Elixir Guides  Elixir Official Docs  Elixir Quick Reference     Learning More of Elixir   Elixir Style Guide  Elixir School  Exercism.io Elixir Problems     Tools   Credo - Static Code Analysis tool  - like linters in other languages.     Resources   Elixir Status  - posts/blogs and other content related to elixir.  #myelixirstatus on twitter.  Elixir Fountain Podcast  Elixir Conf 2016     Explanations   Why are there two kinds of functions in Elixir?",
            "title": "Next Steps"
        },
        {
            "location": "/notes/pwa_notes/",
            "text": "Progressive Web App Components\n\n\n\n\nLast Updated 19th Jan 2017.\n\n\n\n\nClient-Side Storage\n\n\n\n\nCookies\n\n\n\n\n\n\n\n\nCompatibility\n\n\nEverywhere!\n\n\n\n\n\n\n\n\n\n\nSize\n\n\nMax 4KB\n\n\n\n\n\n\nData Type\n\n\nstring\n\n\n\n\n\n\nPros\n\n\nSimple, Configurable, Compatible\n\n\n\n\n\n\nCons\n\n\nLess Secure, Limiting, Attaches to every request, easily deletable.\n\n\n\n\n\n\n\n\nHTML Web Storage (localStorage & sessionStorage)\n\n\n\n\n\n\n\n\nCompatibility\n\n\nEverywhere!\n\n\n\n\n\n\n\n\n\n\nSize\n\n\n2.5 - 5 MB\n\n\n\n\n\n\nData Type\n\n\nstring\n\n\n\n\n\n\nPros\n\n\nSimple, Not Transimitted, Compatible\n\n\n\n\n\n\nCons\n\n\nUnstructured data, slow access.\n\n\n\n\n\n\n\n\nWeb SQL\n\n\n\n\n\n\n\n\nCompatibility\n\n\nChrome, Safari, Opera, Strong Mobile Support\n\n\n\n\n\n\n\n\n\n\nSize\n\n\n2.5 - 5 MB\n\n\n\n\n\n\nData Type\n\n\nstring\n\n\n\n\n\n\nPros\n\n\nAsynchronous, great search speed.\n\n\n\n\n\n\nCons\n\n\nDeprecated, Steep learning curve, Schema pre-defined.\n\n\n\n\n\n\n\n\nIndexed DB\n\n\n\n\n\n\n\n\nCompatibility\n\n\nModern Browsers, lacks Mobile Support\n\n\n\n\n\n\n\n\n\n\nSize\n\n\n10 - 20% of the available space(based on Browser!)\n\n\n\n\n\n\nData Type\n\n\nJSObject\n\n\n\n\n\n\nPros\n\n\nAsynchronous, Large Dataset\n\n\n\n\n\n\nCons\n\n\nSteep learning curve, Complicated while implementing.\n\n\n\n\n\n\n\n\nService Workers\n\n\nBasics\n\n\n\n\nService Worker scripts run independently from our app code.\n\n\nSeparate Thread.\n\n\nIntercept Network Requests.\n\n\nFunctional Events (fetch, push, sync)\n\n\nAvailable in Chrome, Firefox & Opera(not all updates).\n\n\nNeeds to be served with HTTPS.\n\n\nNo Access to the DOM, Runs on its own Global script context.\n\n\nNot tied to any page.\n\n\nEvent-Driven.",
            "title": "Progressive Web Apps"
        },
        {
            "location": "/notes/pwa_notes/#progressive-web-app-components",
            "text": "Last Updated 19th Jan 2017.",
            "title": "Progressive Web App Components"
        },
        {
            "location": "/notes/pwa_notes/#client-side-storage",
            "text": "",
            "title": "Client-Side Storage"
        },
        {
            "location": "/notes/pwa_notes/#cookies",
            "text": "Compatibility  Everywhere!      Size  Max 4KB    Data Type  string    Pros  Simple, Configurable, Compatible    Cons  Less Secure, Limiting, Attaches to every request, easily deletable.",
            "title": "Cookies"
        },
        {
            "location": "/notes/pwa_notes/#html-web-storage-localstorage-sessionstorage",
            "text": "Compatibility  Everywhere!      Size  2.5 - 5 MB    Data Type  string    Pros  Simple, Not Transimitted, Compatible    Cons  Unstructured data, slow access.",
            "title": "HTML Web Storage (localStorage &amp; sessionStorage)"
        },
        {
            "location": "/notes/pwa_notes/#web-sql",
            "text": "Compatibility  Chrome, Safari, Opera, Strong Mobile Support      Size  2.5 - 5 MB    Data Type  string    Pros  Asynchronous, great search speed.    Cons  Deprecated, Steep learning curve, Schema pre-defined.",
            "title": "Web SQL"
        },
        {
            "location": "/notes/pwa_notes/#indexed-db",
            "text": "Compatibility  Modern Browsers, lacks Mobile Support      Size  10 - 20% of the available space(based on Browser!)    Data Type  JSObject    Pros  Asynchronous, Large Dataset    Cons  Steep learning curve, Complicated while implementing.",
            "title": "Indexed DB"
        },
        {
            "location": "/notes/pwa_notes/#service-workers",
            "text": "",
            "title": "Service Workers"
        },
        {
            "location": "/notes/pwa_notes/#basics",
            "text": "Service Worker scripts run independently from our app code.  Separate Thread.  Intercept Network Requests.  Functional Events (fetch, push, sync)  Available in Chrome, Firefox & Opera(not all updates).  Needs to be served with HTTPS.  No Access to the DOM, Runs on its own Global script context.  Not tied to any page.  Event-Driven.",
            "title": "Basics"
        },
        {
            "location": "/notes/datavis_notes/",
            "text": "Introduction to Data Visualization & D3 Notes\n\n\n\n\nBased on the Udacity course of similar name. Last Updated on 16th Jan 2017.\n\n\n\n\nIntro\n\n\n\n\n\n\nRetinal Variables\n - Ordered and Nominal Values.\n\n\n\n\nOrdered Data: Size, Orientation, Color Saturation\n\n\nNominal Data: Color Hue, Shape, Texture\n\n\n\n\n\n\n\n\nVisual Encodings\n - Angle, Color Hue, Color Saturation, Length, Orientation, Position x, Position y, Shape, Size, Texture.\n\n\n\n\nRanking (from most accurate to least accurate) [1985 Graphical Perception Paper by Cleveland and McGill ]\n\n- Position, (Most Accurate)\n- Length,\n- Angle, Shape\n- Area,\n- Volume,\n- Color, Density(Saturation) (Least Accurate)\n\n\n\n\n\n\n\n\n\nThe Facebook Offering : How it Compares | NYTimes\n\n\n\n\n\n\nExploratory Data Analysis\n\n\n\n\nA process where you try to discover insights into some data, find erroneous values, structure of data.\n\n\nIts supposed to be an interaction between the Information desinger and the data.\n\n\n\n\n\n\n\n\nSketching\n\n\n\n\nTrying to determine visual encodings, layout etc.\n\n\nIts supposed to be an Iterative process where the Information designer trying to discover how to best communicate the insights gained through Exploratory Data Analysis.\n\n\n\n\n\n\n\n\nVisualization Levels\n\n\n\n\nWebGL, Canvas, SVG - very low level (like Assembly language of visualization)\n\n\nefficient, performant\n\n\nhighly flexible\n\n\nlow level\n\n\nhard to develop with, high development overhead.\n\n\n\n\n\n\n\n\nD3.js - works with HTML/SVG and can be used with CSS, (like C/C++ level of visualization, mid level).\n\n\n\n\nNVD3, Dimple.js, Richshaw - Libraries based on top of D3\n\n\nHigher level of spectrum. (like python level of visualization)\n\n\nEither Charting Libraries like NVD3, Dimple.js\n\n\nOr for a specific kind of data, like Richshaw for time-series data.\n\n\n\n\n\n\nRaw, Chartio - almost no flexibility, only a predefined set of charts.\n\n\nhigher level than NVD3 or Dimple.js, (Excel level of visualization.)\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\n in Data Science\n\n\n\n\nSimple Solutions to solve problems.\n\n\nChoosing the right chart for the given dataset.\n\n\nVisual Encoding + Data Types + Relationships => Chart Type!!!\n\n\nData Type - Continous/Categorical?\n\n\nData Dimensions - 1D/2D/3D?\n\n\nPropotions - Pie Charts.\n\n\nComparisions - Stacked Column Charts/Stacked Bar Graphs.\n\n\n\n\n\n\n\n\nChart Types\n\n\n\n\nBar Chart\n - highlights individual values, supports comparisons, and can show rankings or deviations. Its particularly good at showing comparisions in categorial data, but not very good at showing comparision in time-series data, for which line charts are better suited.\n\n\nBoxplot\n - shows distributions and quantiles, especially useful when comparing distributions\n\n\nPie Chart\n - shows part-to-whole relationship and best suited for one category; poor for making comparisons\n\n\nStacked Bar Chart\n - shows part-to-whole relationship and best suited for showing composition within categories and totals\n\n\nBubble Chart\n - shows how three or more sets of values vary; shows correlation\n\n\n\n\nLine chart\n - shows overall changes and patterns, usually over equally spaced intervals of time\n\n\n\n\nLine Graphs and Irregular Intervals: An Incompatible Partnership by Stephen Few\n\n\nMap\n - values are encoded on physical locations and patterns may be drawn by comparing locations\n\n\nScatterplot\n - shows how two pair sets of values (for example height and shoe size) vary; shows correlation. Also, Scatterplots aren't usually used for ordered datasets such a time series\n\n\nTables\n - Shows data where there is no encodings can be drawn/thought. Sometimes, a very raw form of data.\n\n\nChoropleth\n - Geographic representation + Color Encodings.\n\n\nCartogram\n - Geographic representation + Size of the region.\n\n\nDot Map\n - Geographic representaion + Any Shape Encodings.\n\n\n\n\nOther Amazing Graph types:\n\n\n\n\n\n\nBullet Graph\n\n\n\n\nSpark Lines\n\n\nCycle Plots\n\n\nConnected Scatter Plots\n\n\nViolin Plots\n\n\nTornado Graphs\n\n\nHistogram\n\n\nHow to Read Histograms\n\n\n\n\n\n\n\n\nDesign Principles\n\n\n\n\n\n\nPre-attentive Attributes\n\n\n\n\nColor (Hue or Saturation)\n\n\nForm (Shape)\n\n\nMovement\n\n\nSpatial Position.\n\n\nAlso, the use of Negative Space.\n\n\nTapping the Power of Visual Perception by Stephen Few\n\n\nBook: Information Visualization, Perception for Design by Colin Ware\n\n\nHigh-Speed Visual Estimation Using Preattentive Processing\n\n\n\n\n\n\n\n\nNegative Space or Encoding Nothingness\n\n\n\n\nSnow's Cholera Map\n - DONE\n\n\nDesigning with White Space: Why 1+1=3\n\n\nHow Google Uses White Space\n\n\nGay rights in the US, state by state\n\n\n\n\n\n\n\n\nColor Encodings\n\n\n\n\n\n\n\u201cIndeed, so difficult and subtle that avoiding catastrophe becomes the first principle in bringing color to information: Above all, do no harm.\u201d - Tufte\n\n\n\n\n\n\nCareful with Color - \"First, get it right in black and white.\"\n\n\n\n\nTry not to be redudant with Color Encodings.\n\n\nConsider using less intense colors, medium hues and Pastels.\n\n\nSometimes, only sometimes, use \ncolor\n to highlight\n\n\n\n\nPractical Rules for Using Color in Charts by Stephen Few\n - DONE\n\n\n\n\n: If you want different objects of the same color in a table or graph to look the same, make sure that the background \u2014 the color that surrounds them \u2014 is consistent.\n\n\n: If you want objects in a table or graph to be easily seen, use a background color that contrasts sufficiently with the object.\n\n\n: Use color only when needed to serve a particular communication goal.\n\n\n: Use different colors only when they correspond to differences of meaning in the data.\n\n\n: Use soft, natural colors to display most information and bright and/or dark colors to highlight information that requires greater attention.\n\n\n: When using color to encode a sequential range of quantitative values, stick with a single hue (or a small set of closely related hues) and vary intensity from pale colors for low values to increasingly darker and brighter\n colors for high values\n\n\n: Non-data components of tables and graphs should be displayed just visibly enough to perform their role, but no more so, for excessive salience could cause them to distract attention from the data.\n\n\n: To guarantee that most people who are colorblind can distinguish groups of data that are color coded, avoid using a combination of red and green in the same display.\n\n\n: Avoid using visual effects in graphs.\n\n\n\n\n\n\n\n\nSequential Palette\n - A single set of ordered colors, which progresses in perceptually equal intervals.\n\n\n\n\n\n\nDiverging Palette\n - This set consists of two sets of sequential colors\u2014one that increases in intensity from the middle of the palette going upwards and one that increases from the middle going downwards. Also known as \ndual-ordered palette.\n\n\n\n\n\n\nRainbow Color Map (Still) Considered Harmful\n\n\n\n\n\n\nWhy rainbow colors aren\u2019t the best option for data visualization\n\n\n\n\n\n\nChoosing colour palettes. Part I: Introduction | R Bloggers\n\n\n\n\n\n\nChoosing colour palettes. Part II: Educated Choices| R Bloggers\n\n\n\n\n\n\nImproving the WSJ Historical U.S. Unemployment Rates heat map | VizWiz\n\n\n\n\n\n\nColor Blindness Simulator\n\n\n\n\n\n\n\n\n\n\nGestalt Principles of Perception\n\n\n\n\nWe organize what we see in particular ways to make sense of visual information. There are six principles that influence the ways human see and understand visuals.\n\n\nProximity - Objects that are placed close to each other will often be percieved as one group.\n\n\nSimilarity - Objects that look alike, with similar components or attributes, are more likely to be organised together.\n\n\nFigure and Ground - Viewers will perceive an object (figure) and a surface(ground), even if shapes are grouped together.\n\n\nContinuity - Objects will be grouped as a whole if they are co-linear, or follow a direction.\n\n\nClosure - In perception, there is a tendency to complete unfinished objects. We tend to ignore gaps and complete contour lines.\n\n\nSimplicity - Figures are seen as their simple elements instead of complicated shapes.\n\n\n\n\n\n\nThe Gestalt Laws of Perception Slides\n - DONE\n\n\nGestalt Principles for Data Visualization\n\n\nThe Gestalt Principles\n\n\nGestalt Design Notes\n\n\n\n\n\n\n\n\nChart Junk\n\n\n\n\nDefinition: Anything that is on the chart but visually not necessary to the purpose/aim of the chart.\n\n\nExamples: heavy or dark grid lines, unneccessary text, ornamented chart axes, pictures within graphs, shading or 3D perspective.\n\n\nGrid Lines in Graphs are Rarely Useful\n\n\nData to Ink Ratio: (Ink used to describe data)/(Ink used to describe everything else)\n\n\nHigh Data to Ink Ratio\n is better.\n\n\nLie Factor : (Size of the effect shown in the Graphic)/(Size of the effect shown in the data.)\n\n\nLie Factor\n of a graphic should be between 0.95 to 1.05.\n\n\nSize of the effect shown in the Graphic = (|2nd val - 1st val| x 100)/1st val\n\n\n\n\n\n\n\n\nGrammar of Graphics\n\n\n\n\nSeprating the Information & Aesthetic Parts of a Data Viz Graphic.\n\n\nBook: The Grammar of Graphics by Leland Wilkinson.\n\n\nLine Charts are good for showing Trends in the data(ie like Google Trends), while tables are good for showing exact dip and heights in the graphic. Also finding a exact data point is  easier on a table.\n\n\n3 Key Principles:\n\n\nSeparation of Concerns\n - Independently transform data and present data.\n\n\nDefinition of Common Plot/Chart Elements\n - Common composable elements in every graph, e.g. Coordinate System, Scales, Text Annotations, Shapes, Data types.\n\n\nComposition of those Common Elements\n - for         - Categorical + Continuous x Cartesian = Bar Chart\n\n\nCategorical + Continuous x Polar = Pie Chart\n\n\nContinuous + Continuous x Cartesian = Scatter Chart\n\n\n\n\n\n\n\n\n\n\nA Layered Grammar of Graphics\n\n\nIntroducing the Grammar of Graphics Plotting Concept\n\n\nGrammar of Graphics for R & ggplot2\n\n\n\n\n\n\n\n\nImproving Visualizations Case Studies\n\n\n\n\nStephen Few Improves many poorly designed visualizations.\n\n\nWinner of perceptualedge Dashboard Design Competition 2012\n\n\nDon't end up in Mistaken Data\n\n\n\n\n\n\n\n\nCommon D3 Methods\n\n\n\n\nd3.selection.append\n - inserts HTML or SVG elements into a web page\n\n\nd3.selection.attr\n - changes a characteristic of an element such as position or fill\n\n\nd3.json\n - loads a data file and returns an array of Javascript objects\n\n\nd3.layout\u00a0\n - applies common transformations on predefined chart objects\n\n\nd3.nest\n - groups data based on particular keys and returns an array of JSON\n\n\nd3.scale\n - converts data to a pixel or color value that can be displayed\n\n\n\n\n\n\n\n\n4 Quadrants of Visualization\n\n\n\n\nData Visualization: Clarity or Aesthetics? 3-part Series.\n\n\n\n\n\n\n\n\nInvestigating Dimple.js\n\n\n\n\n\n\nWebsite - \ndimplejs.org\n\n\n\n\n\n\nWhy Dimple.js?\n\n\n\n\nBuild atop of D3.\n\n\nGentle learning curve\n\n\nexposes native D3 objects.\n\n\n\n\n\n\n\n\nSketching process of a Visualization:\n\n\n\n\nFollowing an Iterative process of designing a visualization.\n\n\nOften not a \"right answer\"\n\n\nDon't know a priori how data will interact with the aesthetics.\n\n\n\n\n\n\n\n\nconsole.table() - For inspecting data in a tabular format inside the chrome JavaScript console.\n\n\n\n\nAdvanced JavaScript Debugging with console.table()\n\n\nBe careful with console.data when using on a very big chunk of data.\n\n\n\n\n\n\n\n\n// Drawing a Simple Bar Chart in Dimple.js\n// Updated to D3V4 version with Dimple V2.3\nconst margin = 75;\nconst width = 1400;\nconst height = 600;\n\n// Select an SVG element.\nvar svg = dimple.newSvg(\"#barchart\", width, height);\n\n// Instantiate a dimple chart.\nconst myChart = new dimple.chart(svg, data);\n\n// Setting boundaries of the chart using margins.\nmyChart.setBounds(margin, margin, width - 2 * margin, height- 2 * margin);\n\n// Add X-Axis as a Time Axis.\nconst x = myChart.addTimeAxis(\"x\", \"year\");\n\n// Sort X-Axis by Date\nx.addOrderRule(\"Date\");\n\n// Set Y-Axis as Measurment Axis.\nmyChart.addMeasureAxis(\"y\", \"attendance\");\n\n// Add Series Data.\nmyChart.addSeries(null, dimple.plot.bar);\n\n// Draw the chart on the SVG.\nmyChart.draw();\n\n\n\n\nNarrative Structures\n\n\n\n\nFiveThirtyEight's Nate Silver discusses traditional journalism in his Essay \nWhat the Fox knows\n, where he devides news articles into 4 quadrants based on two axes(Qualitative to Qauntative Analysis, Rigourous+Empirical to Anecdotal+Ad-hoc Analysis). For eg, Op-ed comes in Anecdotal+Ad-hoc, Qaulitative Quadrant.\n\n\n\n\n\n\n\n\n\n\nCorrelation vs Causation\n\n\n\n\nCorrelation - A and B data series are similar.\n\n\nCausation - B data series depends on A data series and vice-versa.\n\n\nEven if a correlation is genuine and meaningful, it does not imply a causal relationship.\n\n\nMore Spurious Correlations\n\n\n\n\n\n\n\n\nTraditional Journalism vs Data Journalism\n\n\n\n\n\n\n\n\nTraditional Journalism\n\n\nData Journalism\n\n\n\n\n\n\n\n\n\n\nData around Narrative\n\n\nNarrative around Data\n\n\n\n\n\n\nData merely exists to Support the Narrative.\n\n\nNarrative's purpose is to add context to the data.\n\n\n\n\n\n\nDelivery: Mostly delivered in a static form/ or even in print/physical form sometimes.\n\n\nDelivery: Delivered as an interactive visualization on the open web.\n\n\n\n\n\n\n\n\n\n\n\n\nMisleading Visualizations\n\n\n\n\n\"Not Starting y-axis on a bar graph with 0.\"\n\n\n\"High Lie Factor\"\n\n\nFox News continues charting excellence (not really)\n\n\nFixing Bad Visualization Examples\n\n\nSave the Pie for Dessert\n\n\nMisleading With Statistics\n - How journalists make arguments with distorted data.\n\n\nDisinformation Visualization: How to lie with datavis\n\n\n\n\n\n\n\n\nTypes of Bias in Data Visualizations\n\n\n\n\nAuthor Bias\n\n\nAs the designer/presenter of data visualizations, your design choices should establish trust between the reader and the graphic. Your design choices should facilitate communication. Otherwise as Cole mentioned, you risk the overall credibility of your message among readers.\n\n\n\n\n\n\nData Bias\n\n\nData bias arises from the process of collecting data. Systematic measurement errors or faulty devices can bias raw data values, and selection bias can lead to subgroups that are not representative of the population of interest for a given question.\n\n\n\n\n\n\nReader Bias\n\n\nReader bias encompasses any preconceived notions or assumptions that a reader brings to interpreting a visualization.\n\n\n\n\n\n\n\n\n\n\n\n\nTypes of Narrative Structures\n\n\n\n\n\n\nNarrative Visualization: Telling Stories with Data\n\n\n\n\n\n\n\n\nAuthor-driven Narratives\n\n\nViewer-driven Narratives\n\n\n\n\n\n\n\n\n\n\nTypically have well-defined start and end-points\n\n\nWell-defined start point but gives Viewers freedom to progress in multiple ways. Different viewers may end up in different end-points.\n\n\n\n\n\n\nless exploratory elements\n\n\nhigher interactions and exploratory elements.\n\n\n\n\n\n\nstrong ordering, heavy messaging, need for clarity & speed.\n\n\nVery loose ordering, more freedom to viewers to explore data, ask questions.\n\n\n\n\n\n\nExample 1\n\n\nRoad to Whitehouse\n\n\n\n\n\n\nThe Facebook Offering\n\n\nSan Francisco Crime Spotting\n\n\n\n\n\n\n\n\n\n\n\n\nMartini Glass Narrative:\n\n\n\n\nFirst part is more like an author-driven narrative while after the mid point it ends like viewer-driven narrative.\n\n\nBest of both, author-driven as well as viewer-driven narratives.\n\n\nGun Death in United States 2013\n\n\nDrone Strikes\n\n\nTODO: Analyse Narrative Structures: \nhttps://classroom.udacity.com/courses/ud507/lessons/3069149263/concepts/30711389660923\n\n\n\n\n\n\n\n\n\n\n\n\nAnnotating Charts\n\n\n\n\nUse clear units, informative labels.\n\n\n\n\n\n\n\n\nD3 Joins\n\n\n\n\nThinking with D3 Joins\n\n\nJoins, (in db theory), union of two or more tables.\n\n\nThe three circles\n\n\n.enter()\n - rows of data.tsv, that are not bound to any SVG/HTML elements.\n\n\n.update()\n - rows of data.tsv, that are bound to SVG/HTML elements.\n\n\n.exit()\n - SVG/HTML elements, that are not bound to any rows of data.tsv.\n\n\nSetting Scales Domains and Ranges in d3.js\n\n\nD3.js Axes\n\n\n\n\nInteractivity in Data Visualizations\n\n\n\n\n\n\nThe Jobless Rate for People Like You\n\n\n\n\n\n\nAdd Interactivity & Animations to a static graph to move a author-driven narrative towards a martini glass narrative.\n\n\n\n\n\n\nCreating a Map\n - \nLet's make a map\n\n\n\n\nAcquire data: Shape files(for drawing regional boundaries etc), TopoJSON, GeoJSON\n\n\nShapefiles are encoded in binary, while GeoJSON is a valid JSON which is human readable and easily interpreted by JS/Browsers. GeoJSON is more verbose and bigger than a binary Shape file.\n\n\nTopoJSON can encode Topology(adjacency and links between places), while both Shapefiles & GeoJSON can encode Topography.\n\n\nProjection: Some object in 3-dimensions projected in a 2-dimension. Some loss in information is unavoidable in projections.\n\n\nMercator Projection: Stretch/Distort area near poles, Preserve  equatorial represation. (d3.geo.mercator() converts long,lat values into pixel values.)\n\n\nConvert to GeoJSON, Convert from GeoJSON\n\n\nHow to convert Shapefiles to GeoJSON maps for use on GitHub (and why you should)\n\n\nGeoJSON Editor\n\n\nMapSchool.io\n\n\nMapschool by Tom Wright\n\n\n\n\n\n\n\n\nThematic Maps\n - Maps with some data that represent some topic or theme. ex, dot maps, chloropleths, and cartograms. World cup map with attendance levels is part of Graduated Symbols maps.\n\n\n\n\n\n\nd3.nest()\n - used for grouping/aggregating data etc.\n\n\n\n\nd3.nest().key - grouping.\n\n\nd3.nest().rollup - aggregation. (Input to rollup is a group of data elements not a single element.)\n\n\nD3 Nest Tutorial and examples\n\n\n\n\n\n\n\n\nD3 Animations & Transitions\n\n\n\n\nD3.js: animations and transitions\n\n\nLearning D3 Part 3: Animation & Interaction\n\n\nD3 and UI animations\n\n\nD3.js Mouse Events\n\n\nAdding tooltips to a d3.js graph\n\n\nTry D3 Now\n\n\n\n\n\n\n\n\nMaps\n\n\n\n\nA simple d3.js map explained\n\n\nSmall multiple maps using d3\n\n\nHow to Make Choropleth Maps in D3\n\n\naverage-daily-surface-air-temperature-anomalies\n\n\nThe 1000 Most Populous Canadian Cities\n\n\n\n\n\n\n\n\nOther Links\n:\n\n\n\n\n\n\nFalse Visualizations: When Journalists Get Data Viz Wrong\n\n\n\n\n\n\nThis Bubble Chart is Killing Me\n\n\n\n\n\n\nUnderstand JavaScript\u2019s \u201cthis\u201d With Clarity, and Master It\n\n\n\n\n\n\nSome of 'this'\n\n\n\n\n\n\nbasemap Python Package\n\n\n\n\n\n\nR 'maps' package\n\n\n\n\n\n\n\u200b\n\n\n\n\n\n\nLearning Resources\n\n\n\n\nBook: Interactive Data Visualization for the Web by Scott Murray\n\n\nBook: Pocket Guide to Writing SVG\n\n\nD3 API Reference(v3 version)\n\n\nD3 Tutorials Page\n\n\nDimple.js\n\n\nTributary - experimental environment for rapidly prototyping visualization code\n\n\nAn SVG Primer for Today's Browsers\n\n\nDashing d3 Tutorial\n\n\nBlog: Flowing Data\n\n\nBlog: The Functional Art by Alberto Cairo\n\n\nSite: Visualizing Data \n\n\nBlog: Mike Bostocks\n\n\nBlog: Story Telling with Data\n\n\nBlog: Cartastrophe DataViz Blog\n\n\nBook: Online Stats Book\n\n\nBook: Data Journalism Handbook\n\n\nVisual Encoding\n\n\nGraphical perception \u2013 learn the fundamentals first\n\n\nPaper: A Tour though Visualization Zoo\n\n\nChart Chooser in Color\n\n\nCole Nussbaumer on the Chart Chooser\n\n\nInteractive Chart Chooser\n\n\nDesigning Effective Tables and Graphs by Stephen Few\n\n\nSelecting the Right Graph for Your Message by Stephen Few\n\n\nThree charts are all I need\n\n\nWhen to use Grouped vs. Stacked Column Charts\n\n\nHow to Visualize and Compare Distributions\n\n\nArray.prototype.sort()",
            "title": "Data Visualization"
        },
        {
            "location": "/notes/datavis_notes/#introduction-to-data-visualization-d3-notes",
            "text": "Based on the Udacity course of similar name. Last Updated on 16th Jan 2017.",
            "title": "Introduction to Data Visualization &amp; D3 Notes"
        },
        {
            "location": "/notes/datavis_notes/#intro",
            "text": "Retinal Variables  - Ordered and Nominal Values.   Ordered Data: Size, Orientation, Color Saturation  Nominal Data: Color Hue, Shape, Texture     Visual Encodings  - Angle, Color Hue, Color Saturation, Length, Orientation, Position x, Position y, Shape, Size, Texture.   Ranking (from most accurate to least accurate) [1985 Graphical Perception Paper by Cleveland and McGill ] - Position, (Most Accurate)\n- Length,\n- Angle, Shape\n- Area,\n- Volume,\n- Color, Density(Saturation) (Least Accurate)     The Facebook Offering : How it Compares | NYTimes    Exploratory Data Analysis   A process where you try to discover insights into some data, find erroneous values, structure of data.  Its supposed to be an interaction between the Information desinger and the data.     Sketching   Trying to determine visual encodings, layout etc.  Its supposed to be an Iterative process where the Information designer trying to discover how to best communicate the insights gained through Exploratory Data Analysis.",
            "title": "Intro"
        },
        {
            "location": "/notes/datavis_notes/#visualization-levels",
            "text": "WebGL, Canvas, SVG - very low level (like Assembly language of visualization)  efficient, performant  highly flexible  low level  hard to develop with, high development overhead.     D3.js - works with HTML/SVG and can be used with CSS, (like C/C++ level of visualization, mid level).   NVD3, Dimple.js, Richshaw - Libraries based on top of D3  Higher level of spectrum. (like python level of visualization)  Either Charting Libraries like NVD3, Dimple.js  Or for a specific kind of data, like Richshaw for time-series data.    Raw, Chartio - almost no flexibility, only a predefined set of charts.  higher level than NVD3 or Dimple.js, (Excel level of visualization.)       Visualization  in Data Science   Simple Solutions to solve problems.  Choosing the right chart for the given dataset.  Visual Encoding + Data Types + Relationships => Chart Type!!!  Data Type - Continous/Categorical?  Data Dimensions - 1D/2D/3D?  Propotions - Pie Charts.  Comparisions - Stacked Column Charts/Stacked Bar Graphs.",
            "title": "Visualization Levels"
        },
        {
            "location": "/notes/datavis_notes/#chart-types",
            "text": "Bar Chart  - highlights individual values, supports comparisons, and can show rankings or deviations. Its particularly good at showing comparisions in categorial data, but not very good at showing comparision in time-series data, for which line charts are better suited.  Boxplot  - shows distributions and quantiles, especially useful when comparing distributions  Pie Chart  - shows part-to-whole relationship and best suited for one category; poor for making comparisons  Stacked Bar Chart  - shows part-to-whole relationship and best suited for showing composition within categories and totals  Bubble Chart  - shows how three or more sets of values vary; shows correlation   Line chart  - shows overall changes and patterns, usually over equally spaced intervals of time   Line Graphs and Irregular Intervals: An Incompatible Partnership by Stephen Few  Map  - values are encoded on physical locations and patterns may be drawn by comparing locations  Scatterplot  - shows how two pair sets of values (for example height and shoe size) vary; shows correlation. Also, Scatterplots aren't usually used for ordered datasets such a time series  Tables  - Shows data where there is no encodings can be drawn/thought. Sometimes, a very raw form of data.  Choropleth  - Geographic representation + Color Encodings.  Cartogram  - Geographic representation + Size of the region.  Dot Map  - Geographic representaion + Any Shape Encodings.   Other Amazing Graph types:    Bullet Graph   Spark Lines  Cycle Plots  Connected Scatter Plots  Violin Plots  Tornado Graphs  Histogram  How to Read Histograms",
            "title": "Chart Types"
        },
        {
            "location": "/notes/datavis_notes/#design-principles",
            "text": "Pre-attentive Attributes   Color (Hue or Saturation)  Form (Shape)  Movement  Spatial Position.  Also, the use of Negative Space.  Tapping the Power of Visual Perception by Stephen Few  Book: Information Visualization, Perception for Design by Colin Ware  High-Speed Visual Estimation Using Preattentive Processing     Negative Space or Encoding Nothingness   Snow's Cholera Map  - DONE  Designing with White Space: Why 1+1=3  How Google Uses White Space  Gay rights in the US, state by state     Color Encodings    \u201cIndeed, so difficult and subtle that avoiding catastrophe becomes the first principle in bringing color to information: Above all, do no harm.\u201d - Tufte    Careful with Color - \"First, get it right in black and white.\"   Try not to be redudant with Color Encodings.  Consider using less intense colors, medium hues and Pastels.  Sometimes, only sometimes, use  color  to highlight   Practical Rules for Using Color in Charts by Stephen Few  - DONE   : If you want different objects of the same color in a table or graph to look the same, make sure that the background \u2014 the color that surrounds them \u2014 is consistent.  : If you want objects in a table or graph to be easily seen, use a background color that contrasts sufficiently with the object.  : Use color only when needed to serve a particular communication goal.  : Use different colors only when they correspond to differences of meaning in the data.  : Use soft, natural colors to display most information and bright and/or dark colors to highlight information that requires greater attention.  : When using color to encode a sequential range of quantitative values, stick with a single hue (or a small set of closely related hues) and vary intensity from pale colors for low values to increasingly darker and brighter\n colors for high values  : Non-data components of tables and graphs should be displayed just visibly enough to perform their role, but no more so, for excessive salience could cause them to distract attention from the data.  : To guarantee that most people who are colorblind can distinguish groups of data that are color coded, avoid using a combination of red and green in the same display.  : Avoid using visual effects in graphs.     Sequential Palette  - A single set of ordered colors, which progresses in perceptually equal intervals.    Diverging Palette  - This set consists of two sets of sequential colors\u2014one that increases in intensity from the middle of the palette going upwards and one that increases from the middle going downwards. Also known as  dual-ordered palette.    Rainbow Color Map (Still) Considered Harmful    Why rainbow colors aren\u2019t the best option for data visualization    Choosing colour palettes. Part I: Introduction | R Bloggers    Choosing colour palettes. Part II: Educated Choices| R Bloggers    Improving the WSJ Historical U.S. Unemployment Rates heat map | VizWiz    Color Blindness Simulator      Gestalt Principles of Perception   We organize what we see in particular ways to make sense of visual information. There are six principles that influence the ways human see and understand visuals.  Proximity - Objects that are placed close to each other will often be percieved as one group.  Similarity - Objects that look alike, with similar components or attributes, are more likely to be organised together.  Figure and Ground - Viewers will perceive an object (figure) and a surface(ground), even if shapes are grouped together.  Continuity - Objects will be grouped as a whole if they are co-linear, or follow a direction.  Closure - In perception, there is a tendency to complete unfinished objects. We tend to ignore gaps and complete contour lines.  Simplicity - Figures are seen as their simple elements instead of complicated shapes.    The Gestalt Laws of Perception Slides  - DONE  Gestalt Principles for Data Visualization  The Gestalt Principles  Gestalt Design Notes     Chart Junk   Definition: Anything that is on the chart but visually not necessary to the purpose/aim of the chart.  Examples: heavy or dark grid lines, unneccessary text, ornamented chart axes, pictures within graphs, shading or 3D perspective.  Grid Lines in Graphs are Rarely Useful  Data to Ink Ratio: (Ink used to describe data)/(Ink used to describe everything else)  High Data to Ink Ratio  is better.  Lie Factor : (Size of the effect shown in the Graphic)/(Size of the effect shown in the data.)  Lie Factor  of a graphic should be between 0.95 to 1.05.  Size of the effect shown in the Graphic = (|2nd val - 1st val| x 100)/1st val     Grammar of Graphics   Seprating the Information & Aesthetic Parts of a Data Viz Graphic.  Book: The Grammar of Graphics by Leland Wilkinson.  Line Charts are good for showing Trends in the data(ie like Google Trends), while tables are good for showing exact dip and heights in the graphic. Also finding a exact data point is  easier on a table.  3 Key Principles:  Separation of Concerns  - Independently transform data and present data.  Definition of Common Plot/Chart Elements  - Common composable elements in every graph, e.g. Coordinate System, Scales, Text Annotations, Shapes, Data types.  Composition of those Common Elements  - for         - Categorical + Continuous x Cartesian = Bar Chart  Categorical + Continuous x Polar = Pie Chart  Continuous + Continuous x Cartesian = Scatter Chart      A Layered Grammar of Graphics  Introducing the Grammar of Graphics Plotting Concept  Grammar of Graphics for R & ggplot2     Improving Visualizations Case Studies   Stephen Few Improves many poorly designed visualizations.  Winner of perceptualedge Dashboard Design Competition 2012  Don't end up in Mistaken Data     Common D3 Methods   d3.selection.append  - inserts HTML or SVG elements into a web page  d3.selection.attr  - changes a characteristic of an element such as position or fill  d3.json  - loads a data file and returns an array of Javascript objects  d3.layout\u00a0  - applies common transformations on predefined chart objects  d3.nest  - groups data based on particular keys and returns an array of JSON  d3.scale  - converts data to a pixel or color value that can be displayed     4 Quadrants of Visualization   Data Visualization: Clarity or Aesthetics? 3-part Series.",
            "title": "Design Principles"
        },
        {
            "location": "/notes/datavis_notes/#investigating-dimplejs",
            "text": "Website -  dimplejs.org    Why Dimple.js?   Build atop of D3.  Gentle learning curve  exposes native D3 objects.     Sketching process of a Visualization:   Following an Iterative process of designing a visualization.  Often not a \"right answer\"  Don't know a priori how data will interact with the aesthetics.     console.table() - For inspecting data in a tabular format inside the chrome JavaScript console.   Advanced JavaScript Debugging with console.table()  Be careful with console.data when using on a very big chunk of data.     // Drawing a Simple Bar Chart in Dimple.js\n// Updated to D3V4 version with Dimple V2.3\nconst margin = 75;\nconst width = 1400;\nconst height = 600;\n\n// Select an SVG element.\nvar svg = dimple.newSvg(\"#barchart\", width, height);\n\n// Instantiate a dimple chart.\nconst myChart = new dimple.chart(svg, data);\n\n// Setting boundaries of the chart using margins.\nmyChart.setBounds(margin, margin, width - 2 * margin, height- 2 * margin);\n\n// Add X-Axis as a Time Axis.\nconst x = myChart.addTimeAxis(\"x\", \"year\");\n\n// Sort X-Axis by Date\nx.addOrderRule(\"Date\");\n\n// Set Y-Axis as Measurment Axis.\nmyChart.addMeasureAxis(\"y\", \"attendance\");\n\n// Add Series Data.\nmyChart.addSeries(null, dimple.plot.bar);\n\n// Draw the chart on the SVG.\nmyChart.draw();",
            "title": "Investigating Dimple.js"
        },
        {
            "location": "/notes/datavis_notes/#narrative-structures",
            "text": "FiveThirtyEight's Nate Silver discusses traditional journalism in his Essay  What the Fox knows , where he devides news articles into 4 quadrants based on two axes(Qualitative to Qauntative Analysis, Rigourous+Empirical to Anecdotal+Ad-hoc Analysis). For eg, Op-ed comes in Anecdotal+Ad-hoc, Qaulitative Quadrant.      Correlation vs Causation   Correlation - A and B data series are similar.  Causation - B data series depends on A data series and vice-versa.  Even if a correlation is genuine and meaningful, it does not imply a causal relationship.  More Spurious Correlations     Traditional Journalism vs Data Journalism     Traditional Journalism  Data Journalism      Data around Narrative  Narrative around Data    Data merely exists to Support the Narrative.  Narrative's purpose is to add context to the data.    Delivery: Mostly delivered in a static form/ or even in print/physical form sometimes.  Delivery: Delivered as an interactive visualization on the open web.       Misleading Visualizations   \"Not Starting y-axis on a bar graph with 0.\"  \"High Lie Factor\"  Fox News continues charting excellence (not really)  Fixing Bad Visualization Examples  Save the Pie for Dessert  Misleading With Statistics  - How journalists make arguments with distorted data.  Disinformation Visualization: How to lie with datavis     Types of Bias in Data Visualizations   Author Bias  As the designer/presenter of data visualizations, your design choices should establish trust between the reader and the graphic. Your design choices should facilitate communication. Otherwise as Cole mentioned, you risk the overall credibility of your message among readers.    Data Bias  Data bias arises from the process of collecting data. Systematic measurement errors or faulty devices can bias raw data values, and selection bias can lead to subgroups that are not representative of the population of interest for a given question.    Reader Bias  Reader bias encompasses any preconceived notions or assumptions that a reader brings to interpreting a visualization.       Types of Narrative Structures    Narrative Visualization: Telling Stories with Data     Author-driven Narratives  Viewer-driven Narratives      Typically have well-defined start and end-points  Well-defined start point but gives Viewers freedom to progress in multiple ways. Different viewers may end up in different end-points.    less exploratory elements  higher interactions and exploratory elements.    strong ordering, heavy messaging, need for clarity & speed.  Very loose ordering, more freedom to viewers to explore data, ask questions.    Example 1  Road to Whitehouse    The Facebook Offering  San Francisco Crime Spotting       Martini Glass Narrative:   First part is more like an author-driven narrative while after the mid point it ends like viewer-driven narrative.  Best of both, author-driven as well as viewer-driven narratives.  Gun Death in United States 2013  Drone Strikes  TODO: Analyse Narrative Structures:  https://classroom.udacity.com/courses/ud507/lessons/3069149263/concepts/30711389660923       Annotating Charts   Use clear units, informative labels.",
            "title": "Narrative Structures"
        },
        {
            "location": "/notes/datavis_notes/#d3-joins",
            "text": "Thinking with D3 Joins  Joins, (in db theory), union of two or more tables.  The three circles  .enter()  - rows of data.tsv, that are not bound to any SVG/HTML elements.  .update()  - rows of data.tsv, that are bound to SVG/HTML elements.  .exit()  - SVG/HTML elements, that are not bound to any rows of data.tsv.  Setting Scales Domains and Ranges in d3.js  D3.js Axes",
            "title": "D3 Joins"
        },
        {
            "location": "/notes/datavis_notes/#interactivity-in-data-visualizations",
            "text": "The Jobless Rate for People Like You    Add Interactivity & Animations to a static graph to move a author-driven narrative towards a martini glass narrative.    Creating a Map  -  Let's make a map   Acquire data: Shape files(for drawing regional boundaries etc), TopoJSON, GeoJSON  Shapefiles are encoded in binary, while GeoJSON is a valid JSON which is human readable and easily interpreted by JS/Browsers. GeoJSON is more verbose and bigger than a binary Shape file.  TopoJSON can encode Topology(adjacency and links between places), while both Shapefiles & GeoJSON can encode Topography.  Projection: Some object in 3-dimensions projected in a 2-dimension. Some loss in information is unavoidable in projections.  Mercator Projection: Stretch/Distort area near poles, Preserve  equatorial represation. (d3.geo.mercator() converts long,lat values into pixel values.)  Convert to GeoJSON, Convert from GeoJSON  How to convert Shapefiles to GeoJSON maps for use on GitHub (and why you should)  GeoJSON Editor  MapSchool.io  Mapschool by Tom Wright     Thematic Maps  - Maps with some data that represent some topic or theme. ex, dot maps, chloropleths, and cartograms. World cup map with attendance levels is part of Graduated Symbols maps.    d3.nest()  - used for grouping/aggregating data etc.   d3.nest().key - grouping.  d3.nest().rollup - aggregation. (Input to rollup is a group of data elements not a single element.)  D3 Nest Tutorial and examples     D3 Animations & Transitions   D3.js: animations and transitions  Learning D3 Part 3: Animation & Interaction  D3 and UI animations  D3.js Mouse Events  Adding tooltips to a d3.js graph  Try D3 Now     Maps   A simple d3.js map explained  Small multiple maps using d3  How to Make Choropleth Maps in D3  average-daily-surface-air-temperature-anomalies  The 1000 Most Populous Canadian Cities     Other Links :    False Visualizations: When Journalists Get Data Viz Wrong    This Bubble Chart is Killing Me    Understand JavaScript\u2019s \u201cthis\u201d With Clarity, and Master It    Some of 'this'    basemap Python Package    R 'maps' package    \u200b",
            "title": "Interactivity in Data Visualizations"
        },
        {
            "location": "/notes/datavis_notes/#learning-resources",
            "text": "Book: Interactive Data Visualization for the Web by Scott Murray  Book: Pocket Guide to Writing SVG  D3 API Reference(v3 version)  D3 Tutorials Page  Dimple.js  Tributary - experimental environment for rapidly prototyping visualization code  An SVG Primer for Today's Browsers  Dashing d3 Tutorial  Blog: Flowing Data  Blog: The Functional Art by Alberto Cairo  Site: Visualizing Data   Blog: Mike Bostocks  Blog: Story Telling with Data  Blog: Cartastrophe DataViz Blog  Book: Online Stats Book  Book: Data Journalism Handbook  Visual Encoding  Graphical perception \u2013 learn the fundamentals first  Paper: A Tour though Visualization Zoo  Chart Chooser in Color  Cole Nussbaumer on the Chart Chooser  Interactive Chart Chooser  Designing Effective Tables and Graphs by Stephen Few  Selecting the Right Graph for Your Message by Stephen Few  Three charts are all I need  When to use Grouped vs. Stacked Column Charts  How to Visualize and Compare Distributions  Array.prototype.sort()",
            "title": "Learning Resources"
        },
        {
            "location": "/notes/redux_notes/",
            "text": "Redux Basics\n\n\n\n\nLast Updated on 7th Jan 2017.\n\n\n\n\n\n\nWriting \ncreateStore\n function for redux.\n\n\n\n\nconst createStore = (reducer) => {\n  let state;\n  let listeners = [];\n\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener() );\n  };\n  const subscribe = (listener) => {\n    listeners.push(listener);\n\n    return () => {\n      listeners = listeners.filter((l) => l!== listener);\n    }\n  };\n\n  dispatch({});\n  return {getState, dispatch, subscribe};\n}\n\n\n\n\n\n\nCombining 2 or more reducers pattern.\n\n\n\n\n// Combine Reducers Pattern\nconst todoApp = (state = {}, action) => {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.todos, action)\n  };\n}\n\n\n\n\n\n\ncombineReducers\n implementation\n\n\n\n\nconst combineReducers = (reducers) => {\n  return (state = {}, action) => {\n    return Object.keys(reducers).reduce(\n      (nextState, key) => {\n        nextState[key] = reducers[key](state[key], action);\n        return nextState;\n      }\n    , {});\n  };\n};",
            "title": "Redux"
        },
        {
            "location": "/notes/redux_notes/#redux-basics",
            "text": "Last Updated on 7th Jan 2017.    Writing  createStore  function for redux.   const createStore = (reducer) => {\n  let state;\n  let listeners = [];\n\n  const getState = () => state;\n  const dispatch = (action) => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener() );\n  };\n  const subscribe = (listener) => {\n    listeners.push(listener);\n\n    return () => {\n      listeners = listeners.filter((l) => l!== listener);\n    }\n  };\n\n  dispatch({});\n  return {getState, dispatch, subscribe};\n}   Combining 2 or more reducers pattern.   // Combine Reducers Pattern\nconst todoApp = (state = {}, action) => {\n  return {\n    todos: todos(state.todos, action),\n    visibilityFilter: visibilityFilter(state.todos, action)\n  };\n}   combineReducers  implementation   const combineReducers = (reducers) => {\n  return (state = {}, action) => {\n    return Object.keys(reducers).reduce(\n      (nextState, key) => {\n        nextState[key] = reducers[key](state[key], action);\n        return nextState;\n      }\n    , {});\n  };\n};",
            "title": "Redux Basics"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/",
            "text": "Introductory Ruby Notes(P1)\n\n\n\n\nBased of CodeAcademy Ruby Course. Last Updated 31st Oct 2015.\n\n\n\n\nLoops\n\n\n\n\nThe 'Until' Loop\n - Complement to the while loop.\n\n\n\n\n\ncounter = 1\nuntil counter > 10\n  puts counter\n  counter += 1\n\nend\n\n\n\n\n\n\n\n\nInclusive\n vs \nExclusive Ranges\n in Ruby:\n\n\n\n\n..\n mean \nInclusive\n range since it includes the final number.\n\n\n...\n mean \nExclusive\n range since it excludes the end number.\n\n\n\n\n\n\n\n\nThe Loop Method\n\n\n\n\nAn \niterator\n is just a Ruby method that repeatedly invokes a block of code.\n\n\nThe simplest iterator is the \nloop\n method.\n\n\n\n\n\n\n\n\n\ni = 20\nloop do\n  i -= 1\n  print \"#{i}\"\n  break if i \n<\n= 0\nend\n\n\n\n\n\n\nThe \nnext\n Keyword: The \nnext\n keyword can be used to skip over certain steps in the loop.\n\n\n\n\n\ni = 20\nloop do\n  i -= 1\n  next if i%2== 1 # skips when i is odd.\n  print \"#{i}\"\n  break if i \n<\n= 0\nend\n\n\n\n\nHashes\n\n\n\n\nusing the \nsort_by\n:\n\n\n\n\n\ncolors = {\"blue\" => 3, \"green\" => 1, \"red\" => 2}\ncolors = colors.sort_by do |color, count|\n  count # sort by count\nend\n\n\n\n\nBlocks as parameter to a method:\n\n\n\n\nPassing a block to a method is a great way of \nabstracting\n certain tasks from the method and defining those tasks when we call the method.\n\n\n\n\ncombined comparison operator \n<=>\n\n\n\n\nused to compare two Ruby objects.\n\n\nIt returns 0 if the first operand (item to be compared) equals the second, 1 if first operand is greater than the second, and -1 if the first operand is less than the second.\n\n\nA block that is passed into the Array.\nsort\n method must return either 1, 0, -1\n\n\n\n\nNil.\n\n\n\n\nWhen we try to access the key that doesn't exist in hash, we get \nnil\n and no error is thrown.(Unlike Python's KeyError).\n\n\nAlong with \nfalse\n, \nnil\n is one of two non-true values in Ruby.\n\n\n\n\nSymbols in Ruby.\n\n\n\n\n READ \nUnderstanding Symbols In Ruby | Stack Overflow\n\n\nSymbols are Strings, just with an important difference, Symbols are \nimmutable\n.\n\n\nUnlike strings, symbols of the same name are initialized and exist in memory only once during a session of ruby. This save some memory\n\n\nString are mutable in Ruby. (Unlike python. In a way Ruby Symbols are like python strings.)\n\n\nSymbols always start with a colon \n:\n. hey must be valid Ruby variable names, so the first character after the colon has to be a letter or underscore ; after that, any combination of letters, numbers, and underscores is allowed.\n\n\nSymbol-as-keys are faster than strings-as-keys because of the immutability and singleton nature.\n\n\nSymbol.\nto_s\n converts a symbol to as string.\n\n\nString.\nto_sym\n & String.\nintern\n converts a string into a symbol.\n\n\nFrom Ruby 1.9+, we can use this type of Hash in Ruby as shown below.\n\n\n\n\n\nnew_hash = { one: 1,\n  two: 2,\n  three: 3\n}\n\n\n\n\n\n\nIn this, you put colon \n:\n at the end of the symbol and you don't need hash-rocket now.\n\n\n\n\nFiltering a hash\n\n\n\n\nHash.\nselect\n can be used to filter a hash for values that meet certain criteria.\n\n\n\n\n\ngrades = { alice: 100,\n  bob: 92,\n  chris: 95,\n  dave: 97\n}\n\ngrades.select {|name, grade| grade \n<\n 97}\n# ==> {:bob=>92, :chris=>95}\n\ngrades.select { |k, v| k == :alice }\n# ==> {:alice=>100}\n\n\n\n\n\n\nHash.\neach_key\n iterates over all keys and Hash.\neach_value\n iterates over all values.\n\n\n\n\n\nmy_hash = { one: 1, two: 2, three: 3 }\n\nmy_hash.each_key { |k| print k, \" \" }\n# ==> one two three\n\nmy_hash.each_value { |v| print v, \" \" }\n# ==> 1 2 3\n\n\n\n\nRuby \ncase\n statements.\n\n\n\n\nRuby provides a concise \ncase\n statement when we need to have multiple conditions\n\n\n\n\n\ncase language\nwhen \"JS\"\n  puts \"Websites!\"\nwhen \"Python\"\n  puts \"Science!\"\nwhen \"Ruby\"\n  puts \"Web apps!\"\nelse\n  puts \"I don't know!\"\nend\n\n\n\n\n\n\ncase\n statements can be made more concise and readable like following.\n\n\n\n\n\ncase language\n  when \"JS\" then puts \"Websites!\"\n  when \"Python\" then puts \"Science!\"\n  when \"Ruby\" then puts \"Web apps!\"\n  else puts \"I don't know!\"\nend\n\n\n\n\nConditional assignment operator \n||=\n\n\n\n\nAssigns a variable if it hasn't already been asssigned.\n\n\n\n\nDefault Return value from a ruby method\n\n\n\n\nRuby's methods will return the result of the last evaluated expression.\n\n\n\n\nRuby's short circuit Evaluation.\n\n\n\n\nRuby doesn't look at both expressions unless it has to; if it see \nfalse && true\n it stops reading as soon as it sees && because it knows \nfalse &&\n anything must be \nfalse\n.\n\n\n\n\n\ndef a\n  puts \"A was evaluated!\"\n  return true\nend\n\ndef b\n  puts \"B was also evaluated!\"\n  return true\nend\n\nputs a || b ## only a is evaluated and only \"A was evaluated!\" is printed.\nputs \"------\"\nputs a && b  ## both a and b are evaluated.\n\n\n\n\n.upto\n and \n.downto\n\n\n\n\nIf we know the range of numbers we'd like to include, we can use \n.upto\n and \n.downto\n. This is a much more Rubyist solution than trying to use a \nfor\n loop that stops when a counter variable hits a certain value.\n\n\n\n\n\n95.upto(100) { |num| print num, \" \" }\n# Prints 95 96 97 98 99 100\n\n\"L\".upto(\"P\") { |l| print l + \" \" }\n# Print L M N O P and works correctly with numbers.\n\n\n\n\nCall and Response\n\n\n\n\nRuby is less concerned about what kind of thing an object is and only really cares about what method calls it responds to.\n\n\n.respond_to?\n takes a symbol and returns true if an object can receive that method and false otherwise.\n\n\n\n\n\n[1, 2, 3].respond_to?(:push)   # true\n[1, 2, 3].respond_to?(:to_sym) # false\n22.respond_to?(:next)          # true\n\n\n\n\nconcatenation operator \n<<\n aka \"The shovel\"\n\n\n\n\nWorks like Array.\npush\n\n\n\n\n\n[1, 2, 3] \n<\n<\n 4\n# ==> [1, 2, 3, 4]\n\n\"Yukihiro \" \n<\n<\n \"Matsumoto\"\n# ==> \"Yukihiro Matsumoto\" Works on Strings too.\n\n\n\n\nstring interpolation with \n#{}\n\n\n\n\nused for interpolating a variable inside a string.\n\n\n\n\n\ndrink = \"espresso\"\nage = 26\n\n\"I love #{drink}.\"\n# ==> I love espresso.\n\"I am #{age} years old.\"\n# ==> I am 26 years old.\n\n\n\n\n\n\nRefactoring is just a fancy way of saying we're improving the structure or appearance of our code without changing what it actually does.\n\n\n\n\nArray.\ncollect\n\n\n\n\nThe \ncollect\n method takes a block and applies the expression in the block to every element in an array.\n\n\n.collect\n returns a copy of resultant array, but doesn't change (or mutate) the original array. use \ncollect!\n to mutate the original array.\n\n\n\n\n\nmy_nums = [1, 2, 3]\nmy_nums.collect { |num| num ** 2 }\n# ==> [1, 4, 9]\n\n\n\n\nLearning \nyield\n\n\nWhy do some methods accept a block and others don't?\n\n- It's because methods that accept blocks have a way of transferring control from the calling method to the block and back again.\n- Here we use \nyield\n to transfer control to the block and back again.\n\n\n\ndef block_test\n  puts \"We're in the method!\"\n  puts \"Yielding to the block...\"\n  yield\n  puts \"We're back in the method!\"\nend\n\nblock_test { puts \">>> We're in the block!\" }\n\n####################### Output ###################\n# We're in the method!\n# Yielding to the block...\n# >>> We're in the block!\n# We're back in the method!\n# nil\n\n\n\n\n\n\nwe can also pass parameters to \nyield\n.\n\n\n\n\n\ndef yield_name(name)\n  puts \"In the method! Let's yield.\"\n  yield(\"Kim\")\n  puts \"In between the yields!\"\n  yield(name)\n  puts \"Block complete! Back in the method.\"\nend\n\nyield_name(\"Eric\") { |n| puts \"My name is #{n}.\" }\n\n####################### Output ###################\n# In the method! Let's yield.\n# My name is Kim.\n# In between the yields!\n# My name is Eric.\n# Block complete! Back in the method.\n\n\n\n\nProcs in Ruby\n\n\n\n\nProcs, unlike Blocks, can be saved to variables and have powers & abilities of a real object.\n\n\nThink of a proc as a \"saved\" block. Just like you can give a bit of code a name and turn it into a method, you can name a block and turn it into a proc.\n\n\nProcs are easy to define! You just call \nProc.new\n and pass in the block you want to save.\n\n\n\n\n\ncube = Proc.new { |x| x ** 3 }\n\n\n\n\n\n\nWe can then pass the proc to a method that would otherwise take a block, and we don't have to rewrite the block over and over!\n\n\n\n\n\n[1, 2, 3].collect!(&cube)\n# ==> [1, 8, 27]\n[4, 5, 6].map!(&cube)\n# ==> [64, 125, 216]\n\n\n\n\n\n\nThe \n&\n is used to convert the cube proc into a block.\n\n\n\n\nWhy bother saving our blocks as procs? There are two main advantages:\n\n\n\n\nProcs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)\n\n\n\n\nUnlike blocks, procs can be called over and over without rewriting them. This prevents you from having to retype the contents of your block every time you need to execute a particular bit of code. (\nDRY Principle\n)\n\n\n\n\n\n\nProcs, unlike blocks can also be executed by calling \ncall\n on them.\n\n\n\n\nsymbols can be converted into Procs by \n&\n.\n\n\n\n\n\nstrings = [\"1\", \"2\", \"3\"]\nnums = strings.map(&:to_i)\n# ==> [1, 2, 3]\n\n\n\n\n\n\nIn above example, By mapping &:to_i over every element of strings, we turned each string into an integer.\n\n\n\n\nLambdas in Ruby.\n\n\n\n\nLike procs, \nlambdas\n are objects. They are pretty similar to procs, with litte difference in syntax, and few quirks.\n\n\nlambda syntax\n : \nlambda { |param| block }\n\n\nJust like with procs, we'll need to put \n&\n at the beginning of our lambda name when we pass it to the method.\n\n\nExample\n\n\n\n\n\nstrings = [\"leonardo\", \"donatello\", \"raphael\", \"michaelangelo\"]\nsymbolize = lambda { |string| string.to_sym } # the lambda\nsymbols = strings.collect(&symbolize)\n\n# [:leonardo, :donatello, :raphael, :michaelangelo]\n\n\n\n\nLambdas vs Procs\n\n\n\n\nA \nlambda\n checks the number of arguments passed to it, while a \nproc\n does not. so a \nlambda\n will throw an error if you pass wrong number of arguments.\n\n\nWhen a \nlambda\n returns, it passes control back to the calling method; when a \nproc\n returns, it does so immediately, without going back to the calling method.\n\n\n\n\n\ndef batman_ironman_proc\n  victor = Proc.new { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_proc # \"Batman will win!\" cause proc don't return control to the calling method.\n\ndef batman_ironman_lambda\n  victor = lambda { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_lambda # \"Iron Man will win!\" cause lambdas return control to the calling method.\n\n\n\n\nReview of Blocks, Procs and Lambdas in Ruby.\n\n\n\n\nA \nblock\n is just a bit of code between \ndo..end\n or \n{}\n. It's not an object on its own, but it can be passed to methods like \n.each\n or \n.select\n.\n\n\nA \nproc\n is a saved block we can use over and over.\n\n\nA \nlambda\n is just like a proc, only it cares about the number of arguments it gets and it returns to its calling method rather than returning immediately.\n\n\n\n\nNotes on classes.\n\n\n\n\nYou can think of \ninitialize\n as the function that \"boots up\" each object the class creates. It creates an objects and sets some instance attributes.\n\n\nIn Ruby, we use \n@\n before a variable to signify that it's an instance variable. This means that the variable is attached to the instance of the class.\n\n\nclass methods\n: A class method belongs to the class itself, and for that reason it's prefixed with the class name. Most of the methods we have seen were actually instance methods. Example of how to create \nclass methods\n.\n\n\n\n\n\n\nclass Machine\n  def Machine.hello # This is a class Method,since class name is prefixed.\n    puts \"Hello from the machine!\"\n  end\nend\n\n\n\n\n\nScope & classes\n\n\n\n\nThe \nscope\n of a variable is the context in which it's visible to the program.\n\n\n\n\nFour Types of Scoped variables in Ruby\n\n\n\n\nglobal variables\n: variables that are available everywhere. There are two ways to define them. First, just define the variable outside of any method or class. Second, If you want to make a variable global from inside a method or class, just start it with a \n$\n. \nNOTE\n: \nglobal variables\n can be changed from anywhere in your program, and they are generally not a very good idea.\n\n\nlocal variables\n: ones that are only in available certain methods.\n\n\nclass variables\n: variables that are members of a certain class. They are like instance varibles, but instead they belong to a class itself, and not its instances. \nclass variables\n always start with \n@@\n.\n\n\ninstance variables\n: variables that are only available to particular instances of a class(object). \ninstance variables\n belong to an instance of the class. and they always start with \n@\n[single @].\n\n\n\n\nInheritance in Ruby\n\n\n\n\nInheritance\n is the process by which one class takes on the attributes and methods of another, and it's used to express an \nis-a relationship\n. for example.\n\n\n\n\n\nclass ApplicationError\n  def display_error\n    puts \"Error! Error!\"\n  end\nend\n\nclass SuperBadError \n<\n ApplicationError # This is how to indicate Inheritance.\nend\n\nerr = SuperBadError.new\nerr.display_error # It would still work since SuperBadError inherits from ApplicationError.\n\n\n\n\n\n\nInheritance syntax\n: \nclass DerivedClass < BaseClass\n. \n<\n reads like 'inherits from'\n\n\nsuper\n keyword: When you call \nsuper\n from inside a method, that tells Ruby to look in the superclass of the current class and find a method with the same name as the one from which \nsuper\n is called. If it finds it, Ruby will use the superclass' version of the method.\n\n\nRuby disallows \nmultiple inheritance\n. That means, Any given Ruby class can have only one superclass.\n\n\nHowever, there are instances where you want to incorporate data or behavior from several classes into a single class, and Ruby allows this through the use of \nmixins\n.\n\n\n\n\nSemicolon \n;\n in ruby\n\n\n\n\nIf you want to end a Ruby statement without going to a new line, you can just type a semicolon.\n\n\n\n\n\nclass Monkey\nend\n\n# The above class definition is equivalent to\nclass Monkey; end\n\n\n\n\n\n\nThis is a time saver when you're writing something very short, like an empty class or method definition.\n\n\n\n\npublic\n and \nprivate\n methods in Ruby\n\n\n\n\nRuby allows you to explicitly make some methods \npublic\n and others \nprivate\n.\n\n\nPublic\n methods allow for an interface with the rest of the program.\n\n\nPrivate\n methods, on the other hand, are for your classes to do their own work undisturbed. Another way to say this is that the method cannot be called with an explicit receiver.\n\n\nMethods are \npublic by default\n in Ruby.\n\n\nIn order to access private information, we have to create public methods that know how to get it. This separates the \nprivate implementation from the public interface\n.\n\n\n\n\nattr_reader\n, \nattr_writer\n and \nattr_accessor\n in classes\n\n\n\n\nRuby needs methods in order to access attributes. That means we need to create getters and setters. Instead, We can use \nattr_reader\n to access a variable and \nattr_writer\n to change it. for Example.\n\n\n\n\n\nclass Person\n  attr_reader :name            # to read the name variable\n  attr_writer :name            # to write/modify the name variable.\n  def initialize(name)\n    @name = name\n  end\nend\n\n\n\n\n\n\nWe can use \nattr_accessor\n to make a variable readable and writeable in one fell swoop.\n\n\n\n\nModules\n\n\n\n\nYou can think of a \nmodule\n as a toolbox that contains a set methods and constants.\n\n\nModules\n are like classes, but they can't create Instances and have subclasses.\n\n\nStoring helpful constants in a Module is a great Idea,storing variables not so much. Ruby constants are written in ALL_CAPS and are separated with underscores if there's more than one word.\n\n\nOne of the main purposes of modules is to separate methods and constants into named spaces. These are called \nname-spaces\n. This is how ruby doesn't confuse between \nMath::PI\n and \nCircle::PI\n.\n\n\n::\n is called \nscope resolution operator\n. It tells Ruby where you're looking for a specific bit of code.\n\n\nrequire\n keyword imports a module into the interpreter.\n\n\nwith \ninclude\n, any class can include a module into itself, and use the module's methods. Also, Since everything has been pulled in, you can simply write \nPI\n instead of \nMath::PI\n.\n\n\nWhen a module is used to mix additional behavior and information into a class, it's called a \nmixin\n. for Eg.\n\n\n\n\n\nmodule Action\n  def jump\n    @distance = rand(4) + 2\n    puts \"I jumped forward #{@distance} feet!\"\n  end\nend\n\nclass Rabbit\n  include Action        # including the module Action, therefore creating a mixin here.\n  attr_reader :name\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Cricket\n  include Action       # including the module Action, therefore creating a mixin here.\n  attr_reader :name\n  def initialize(name)\n    @name = name\n  end\nend\n\npeter = Rabbit.new(\"Peter\")\njiminy = Cricket.new(\"Jiminy\")\n\npeter.jump\njiminy.jump\n\n\n\n\n\n\nWhereas \ninclude\n mixes a module's methods in at the instance level, the \nextend\n keyword mixes a module's methods at the class level.\n\n\n\n\n\n# ThePresent has a .now method that we'll extend to TheHereAnd\n\nmodule ThePresent\n  def now\n    puts \"It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT).\"\n  end\nend\n\nclass TheHereAnd\n  extend ThePresent\nend\n\nTheHereAnd.now\n\n\n\n\n\n\nNOTE: Ruby also allows underscores in number, to make reading them easier. like 1 million could be written as 1_000_000.",
            "title": "Ruby Notes P1 - CodeAcademy"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#introductory-ruby-notesp1",
            "text": "Based of CodeAcademy Ruby Course. Last Updated 31st Oct 2015.",
            "title": "Introductory Ruby Notes(P1)"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#loops",
            "text": "The 'Until' Loop  - Complement to the while loop.   \ncounter = 1\nuntil counter > 10\n  puts counter\n  counter += 1\n\nend    Inclusive  vs  Exclusive Ranges  in Ruby:   ..  mean  Inclusive  range since it includes the final number.  ...  mean  Exclusive  range since it excludes the end number.     The Loop Method   An  iterator  is just a Ruby method that repeatedly invokes a block of code.  The simplest iterator is the  loop  method.     \ni = 20\nloop do\n  i -= 1\n  print \"#{i}\"\n  break if i  < = 0\nend   The  next  Keyword: The  next  keyword can be used to skip over certain steps in the loop.   \ni = 20\nloop do\n  i -= 1\n  next if i%2== 1 # skips when i is odd.\n  print \"#{i}\"\n  break if i  < = 0\nend",
            "title": "Loops"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#hashes",
            "text": "using the  sort_by :   \ncolors = {\"blue\" => 3, \"green\" => 1, \"red\" => 2}\ncolors = colors.sort_by do |color, count|\n  count # sort by count\nend",
            "title": "Hashes"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#blocks-as-parameter-to-a-method",
            "text": "Passing a block to a method is a great way of  abstracting  certain tasks from the method and defining those tasks when we call the method.",
            "title": "Blocks as parameter to a method:"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#combined-comparison-operator",
            "text": "used to compare two Ruby objects.  It returns 0 if the first operand (item to be compared) equals the second, 1 if first operand is greater than the second, and -1 if the first operand is less than the second.  A block that is passed into the Array. sort  method must return either 1, 0, -1",
            "title": "combined comparison operator &lt;=&gt;"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#nil",
            "text": "When we try to access the key that doesn't exist in hash, we get  nil  and no error is thrown.(Unlike Python's KeyError).  Along with  false ,  nil  is one of two non-true values in Ruby.",
            "title": "Nil."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#symbols-in-ruby",
            "text": "READ  Understanding Symbols In Ruby | Stack Overflow  Symbols are Strings, just with an important difference, Symbols are  immutable .  Unlike strings, symbols of the same name are initialized and exist in memory only once during a session of ruby. This save some memory  String are mutable in Ruby. (Unlike python. In a way Ruby Symbols are like python strings.)  Symbols always start with a colon  : . hey must be valid Ruby variable names, so the first character after the colon has to be a letter or underscore ; after that, any combination of letters, numbers, and underscores is allowed.  Symbol-as-keys are faster than strings-as-keys because of the immutability and singleton nature.  Symbol. to_s  converts a symbol to as string.  String. to_sym  & String. intern  converts a string into a symbol.  From Ruby 1.9+, we can use this type of Hash in Ruby as shown below.   \nnew_hash = { one: 1,\n  two: 2,\n  three: 3\n}   In this, you put colon  :  at the end of the symbol and you don't need hash-rocket now.",
            "title": "Symbols in Ruby."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#filtering-a-hash",
            "text": "Hash. select  can be used to filter a hash for values that meet certain criteria.   \ngrades = { alice: 100,\n  bob: 92,\n  chris: 95,\n  dave: 97\n}\n\ngrades.select {|name, grade| grade  <  97}\n# ==> {:bob=>92, :chris=>95}\n\ngrades.select { |k, v| k == :alice }\n# ==> {:alice=>100}   Hash. each_key  iterates over all keys and Hash. each_value  iterates over all values.   \nmy_hash = { one: 1, two: 2, three: 3 }\n\nmy_hash.each_key { |k| print k, \" \" }\n# ==> one two three\n\nmy_hash.each_value { |v| print v, \" \" }\n# ==> 1 2 3",
            "title": "Filtering a hash"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#ruby-case-statements",
            "text": "Ruby provides a concise  case  statement when we need to have multiple conditions   \ncase language\nwhen \"JS\"\n  puts \"Websites!\"\nwhen \"Python\"\n  puts \"Science!\"\nwhen \"Ruby\"\n  puts \"Web apps!\"\nelse\n  puts \"I don't know!\"\nend   case  statements can be made more concise and readable like following.   \ncase language\n  when \"JS\" then puts \"Websites!\"\n  when \"Python\" then puts \"Science!\"\n  when \"Ruby\" then puts \"Web apps!\"\n  else puts \"I don't know!\"\nend",
            "title": "Ruby case statements."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#conditional-assignment-operator",
            "text": "Assigns a variable if it hasn't already been asssigned.",
            "title": "Conditional assignment operator ||="
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#default-return-value-from-a-ruby-method",
            "text": "Ruby's methods will return the result of the last evaluated expression.",
            "title": "Default Return value from a ruby method"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#rubys-short-circuit-evaluation",
            "text": "Ruby doesn't look at both expressions unless it has to; if it see  false && true  it stops reading as soon as it sees && because it knows  false &&  anything must be  false .   \ndef a\n  puts \"A was evaluated!\"\n  return true\nend\n\ndef b\n  puts \"B was also evaluated!\"\n  return true\nend\n\nputs a || b ## only a is evaluated and only \"A was evaluated!\" is printed.\nputs \"------\"\nputs a && b  ## both a and b are evaluated.",
            "title": "Ruby's short circuit Evaluation."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#upto-and-downto",
            "text": "If we know the range of numbers we'd like to include, we can use  .upto  and  .downto . This is a much more Rubyist solution than trying to use a  for  loop that stops when a counter variable hits a certain value.   \n95.upto(100) { |num| print num, \" \" }\n# Prints 95 96 97 98 99 100\n\n\"L\".upto(\"P\") { |l| print l + \" \" }\n# Print L M N O P and works correctly with numbers.",
            "title": ".upto and .downto"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#call-and-response",
            "text": "Ruby is less concerned about what kind of thing an object is and only really cares about what method calls it responds to.  .respond_to?  takes a symbol and returns true if an object can receive that method and false otherwise.   \n[1, 2, 3].respond_to?(:push)   # true\n[1, 2, 3].respond_to?(:to_sym) # false\n22.respond_to?(:next)          # true",
            "title": "Call and Response"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#concatenation-operator-aka-the-shovel",
            "text": "Works like Array. push   \n[1, 2, 3]  < <  4\n# ==> [1, 2, 3, 4]\n\n\"Yukihiro \"  < <  \"Matsumoto\"\n# ==> \"Yukihiro Matsumoto\" Works on Strings too.",
            "title": "concatenation operator &lt;&lt; aka \"The shovel\""
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#string-interpolation-with",
            "text": "used for interpolating a variable inside a string.   \ndrink = \"espresso\"\nage = 26\n\n\"I love #{drink}.\"\n# ==> I love espresso.\n\"I am #{age} years old.\"\n# ==> I am 26 years old.   Refactoring is just a fancy way of saying we're improving the structure or appearance of our code without changing what it actually does.",
            "title": "string interpolation with #{}"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#arraycollect",
            "text": "The  collect  method takes a block and applies the expression in the block to every element in an array.  .collect  returns a copy of resultant array, but doesn't change (or mutate) the original array. use  collect!  to mutate the original array.   \nmy_nums = [1, 2, 3]\nmy_nums.collect { |num| num ** 2 }\n# ==> [1, 4, 9]",
            "title": "Array.collect"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#learning-yield",
            "text": "Why do some methods accept a block and others don't? \n- It's because methods that accept blocks have a way of transferring control from the calling method to the block and back again.\n- Here we use  yield  to transfer control to the block and back again.  \ndef block_test\n  puts \"We're in the method!\"\n  puts \"Yielding to the block...\"\n  yield\n  puts \"We're back in the method!\"\nend\n\nblock_test { puts \">>> We're in the block!\" }\n\n####################### Output ###################\n# We're in the method!\n# Yielding to the block...\n# >>> We're in the block!\n# We're back in the method!\n# nil   we can also pass parameters to  yield .   \ndef yield_name(name)\n  puts \"In the method! Let's yield.\"\n  yield(\"Kim\")\n  puts \"In between the yields!\"\n  yield(name)\n  puts \"Block complete! Back in the method.\"\nend\n\nyield_name(\"Eric\") { |n| puts \"My name is #{n}.\" }\n\n####################### Output ###################\n# In the method! Let's yield.\n# My name is Kim.\n# In between the yields!\n# My name is Eric.\n# Block complete! Back in the method.",
            "title": "Learning yield"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#procs-in-ruby",
            "text": "Procs, unlike Blocks, can be saved to variables and have powers & abilities of a real object.  Think of a proc as a \"saved\" block. Just like you can give a bit of code a name and turn it into a method, you can name a block and turn it into a proc.  Procs are easy to define! You just call  Proc.new  and pass in the block you want to save.   \ncube = Proc.new { |x| x ** 3 }   We can then pass the proc to a method that would otherwise take a block, and we don't have to rewrite the block over and over!   \n[1, 2, 3].collect!(&cube)\n# ==> [1, 8, 27]\n[4, 5, 6].map!(&cube)\n# ==> [64, 125, 216]   The  &  is used to convert the cube proc into a block.   Why bother saving our blocks as procs? There are two main advantages:   Procs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)   Unlike blocks, procs can be called over and over without rewriting them. This prevents you from having to retype the contents of your block every time you need to execute a particular bit of code. ( DRY Principle )    Procs, unlike blocks can also be executed by calling  call  on them.   symbols can be converted into Procs by  & .   \nstrings = [\"1\", \"2\", \"3\"]\nnums = strings.map(&:to_i)\n# ==> [1, 2, 3]   In above example, By mapping &:to_i over every element of strings, we turned each string into an integer.",
            "title": "Procs in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#lambdas-in-ruby",
            "text": "Like procs,  lambdas  are objects. They are pretty similar to procs, with litte difference in syntax, and few quirks.  lambda syntax  :  lambda { |param| block }  Just like with procs, we'll need to put  &  at the beginning of our lambda name when we pass it to the method.  Example   \nstrings = [\"leonardo\", \"donatello\", \"raphael\", \"michaelangelo\"]\nsymbolize = lambda { |string| string.to_sym } # the lambda\nsymbols = strings.collect(&symbolize)\n\n# [:leonardo, :donatello, :raphael, :michaelangelo]  Lambdas vs Procs   A  lambda  checks the number of arguments passed to it, while a  proc  does not. so a  lambda  will throw an error if you pass wrong number of arguments.  When a  lambda  returns, it passes control back to the calling method; when a  proc  returns, it does so immediately, without going back to the calling method.   \ndef batman_ironman_proc\n  victor = Proc.new { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_proc # \"Batman will win!\" cause proc don't return control to the calling method.\n\ndef batman_ironman_lambda\n  victor = lambda { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_lambda # \"Iron Man will win!\" cause lambdas return control to the calling method.",
            "title": "Lambdas in Ruby."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#review-of-blocks-procs-and-lambdas-in-ruby",
            "text": "A  block  is just a bit of code between  do..end  or  {} . It's not an object on its own, but it can be passed to methods like  .each  or  .select .  A  proc  is a saved block we can use over and over.  A  lambda  is just like a proc, only it cares about the number of arguments it gets and it returns to its calling method rather than returning immediately.",
            "title": "Review of Blocks, Procs and Lambdas in Ruby."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#notes-on-classes",
            "text": "You can think of  initialize  as the function that \"boots up\" each object the class creates. It creates an objects and sets some instance attributes.  In Ruby, we use  @  before a variable to signify that it's an instance variable. This means that the variable is attached to the instance of the class.  class methods : A class method belongs to the class itself, and for that reason it's prefixed with the class name. Most of the methods we have seen were actually instance methods. Example of how to create  class methods .   \n\nclass Machine\n  def Machine.hello # This is a class Method,since class name is prefixed.\n    puts \"Hello from the machine!\"\n  end\nend",
            "title": "Notes on classes."
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#scope-classes",
            "text": "The  scope  of a variable is the context in which it's visible to the program.   Four Types of Scoped variables in Ruby   global variables : variables that are available everywhere. There are two ways to define them. First, just define the variable outside of any method or class. Second, If you want to make a variable global from inside a method or class, just start it with a  $ .  NOTE :  global variables  can be changed from anywhere in your program, and they are generally not a very good idea.  local variables : ones that are only in available certain methods.  class variables : variables that are members of a certain class. They are like instance varibles, but instead they belong to a class itself, and not its instances.  class variables  always start with  @@ .  instance variables : variables that are only available to particular instances of a class(object).  instance variables  belong to an instance of the class. and they always start with  @ [single @].",
            "title": "Scope &amp; classes"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#inheritance-in-ruby",
            "text": "Inheritance  is the process by which one class takes on the attributes and methods of another, and it's used to express an  is-a relationship . for example.   \nclass ApplicationError\n  def display_error\n    puts \"Error! Error!\"\n  end\nend\n\nclass SuperBadError  <  ApplicationError # This is how to indicate Inheritance.\nend\n\nerr = SuperBadError.new\nerr.display_error # It would still work since SuperBadError inherits from ApplicationError.   Inheritance syntax :  class DerivedClass < BaseClass .  <  reads like 'inherits from'  super  keyword: When you call  super  from inside a method, that tells Ruby to look in the superclass of the current class and find a method with the same name as the one from which  super  is called. If it finds it, Ruby will use the superclass' version of the method.  Ruby disallows  multiple inheritance . That means, Any given Ruby class can have only one superclass.  However, there are instances where you want to incorporate data or behavior from several classes into a single class, and Ruby allows this through the use of  mixins .",
            "title": "Inheritance in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#semicolon-in-ruby",
            "text": "If you want to end a Ruby statement without going to a new line, you can just type a semicolon.   \nclass Monkey\nend\n\n# The above class definition is equivalent to\nclass Monkey; end   This is a time saver when you're writing something very short, like an empty class or method definition.",
            "title": "Semicolon ; in ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#public-and-private-methods-in-ruby",
            "text": "Ruby allows you to explicitly make some methods  public  and others  private .  Public  methods allow for an interface with the rest of the program.  Private  methods, on the other hand, are for your classes to do their own work undisturbed. Another way to say this is that the method cannot be called with an explicit receiver.  Methods are  public by default  in Ruby.  In order to access private information, we have to create public methods that know how to get it. This separates the  private implementation from the public interface .",
            "title": "public and private methods in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#attr_reader-attr_writer-and-attr_accessor-in-classes",
            "text": "Ruby needs methods in order to access attributes. That means we need to create getters and setters. Instead, We can use  attr_reader  to access a variable and  attr_writer  to change it. for Example.   \nclass Person\n  attr_reader :name            # to read the name variable\n  attr_writer :name            # to write/modify the name variable.\n  def initialize(name)\n    @name = name\n  end\nend   We can use  attr_accessor  to make a variable readable and writeable in one fell swoop.",
            "title": "attr_reader, attr_writer and attr_accessor in classes"
        },
        {
            "location": "/notes/ruby/ruby_part_1_codeacademy/#modules",
            "text": "You can think of a  module  as a toolbox that contains a set methods and constants.  Modules  are like classes, but they can't create Instances and have subclasses.  Storing helpful constants in a Module is a great Idea,storing variables not so much. Ruby constants are written in ALL_CAPS and are separated with underscores if there's more than one word.  One of the main purposes of modules is to separate methods and constants into named spaces. These are called  name-spaces . This is how ruby doesn't confuse between  Math::PI  and  Circle::PI .  ::  is called  scope resolution operator . It tells Ruby where you're looking for a specific bit of code.  require  keyword imports a module into the interpreter.  with  include , any class can include a module into itself, and use the module's methods. Also, Since everything has been pulled in, you can simply write  PI  instead of  Math::PI .  When a module is used to mix additional behavior and information into a class, it's called a  mixin . for Eg.   \nmodule Action\n  def jump\n    @distance = rand(4) + 2\n    puts \"I jumped forward #{@distance} feet!\"\n  end\nend\n\nclass Rabbit\n  include Action        # including the module Action, therefore creating a mixin here.\n  attr_reader :name\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Cricket\n  include Action       # including the module Action, therefore creating a mixin here.\n  attr_reader :name\n  def initialize(name)\n    @name = name\n  end\nend\n\npeter = Rabbit.new(\"Peter\")\njiminy = Cricket.new(\"Jiminy\")\n\npeter.jump\njiminy.jump   Whereas  include  mixes a module's methods in at the instance level, the  extend  keyword mixes a module's methods at the class level.   \n# ThePresent has a .now method that we'll extend to TheHereAnd\n\nmodule ThePresent\n  def now\n    puts \"It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT).\"\n  end\nend\n\nclass TheHereAnd\n  extend ThePresent\nend\n\nTheHereAnd.now   NOTE: Ruby also allows underscores in number, to make reading them easier. like 1 million could be written as 1_000_000.",
            "title": "Modules"
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/",
            "text": "Some more Notes/Explantions on ruby.\n\n\n\n\nLast Updated on Oct 4th 2015.\n\n\n\n\n===\n operator\n\n\n\n\n\n\n READ \nWhat does the \u201c===\u201d operator do in Ruby? | StackOverflow\n\n\n\n\n\n\n READ \n=== vs. == in Ruby | Stack Overflow\n\n\n\n\n\n\nIts called \nsubsumption operator\n. So it its written \na === b\n, then \nsubsumption operator\n is a boolean operator which asks the question \"If I have a drawer labelled \na\n would it make sense to put \nb\n in that drawer?\"\n\n\n\n\na === b\n means \"If a described a set, would b be a member of that set?\"\n\n\n\n\n\n(1..5) === 3           # => true, since 3 belongs to the set of 1..5\n(1..5) === 6           # => false\n\nInteger === 42          # => true, since 42 is in set of all Integers\nInteger === 'fourtytwo' # => false\n\n /ell/ === 'Hello'     # => true, Hello matches somewhat with the /ell/ regex.\n /ell/ === 'Foobar'    # => false\n\n\n\n\n\n\n\nThe main usage for the === operator is in case expressions.\n\n\n\n\n\ncase foo\nwhen bar  # here actually a === is happening, so we can replace bar with a\n  baz     # set, and foo with any member of that set.\nwhen quux\n  flurb\nelse\n  blarf\nend\n\n\n\n\n\n\nNote that if you want to search for this operator, it is usually called the \ntriple equals operator\n or \nthreequals operator\n or \ncase equality operator\n. They are definitely misleading since \n===\n has nothing to do with equality.\n\n\nFor \n===\n there is no expectation of either symmetry or transitivity. In fact, it is very much by design not symmetric.\n\n\n\n\nReflection Methods in Objects.\n\n\n\n\nMethods like \nis_a?\n or \n.class\n, which tell you something about the object itself are called \nReflection Methods\n.\n\n\n\n\nBang Methods.\n\n\n\n\nBang Methods\n are finished with an exclamation point \n!\n like \n#sort!\n, and they actually modify the original object. The exclamation point lets you know you're in dangerous territory.\n\n\nChaining a bunch of methods together is called \nMethod Chaining\n.\n\n\n\n\nnil\n\n\n\n\nIt represents nothing... literally. Before you assign a value to something, it starts as nil. for ex.\n\n\n\n\n\nmy_arr = []\n#=> []\nmy_arr[3]\n#=> nil     \n\n\n\n\n\n\nSometimes you want to know if a value or variable is nil before doing something. Use the method \nnil?\n to ask whether a given object is nil or not.\n\n\n\n\n\nnil.nil?\n#=> true\n[].nil?\n#=> false        # Array is empty but not nil.\n\n\n\n\n\n\nIf you want to check whether an array or someother object is empty or not, use \nempty\n.\n\n\n\n\np\n vs \nputs\n\n\n\n\np\n will give you some more information because it runs the \n#inspect\n method on the object while \n#puts\n runs the \n#to_s\n method.\n\n\ninspect\n is supposed to impformative while \nto_s\n is supposed to be pretty.\n\n\n\n\nworking with dates and times.\n\n\n\n\nRuby uses the \nTime\n class to let you work with dates and times, giving you some handy methods to find out about specific parts.\n\n\nTime.now\n gives the current time. same for \nTime.new\n.\n\n\n\n\n\nmy_time = Time.now\n#=> 2015-09-10 03:33:15 +0530\nmy_time.year\n#=> 2015\nmy_time.month\n#=> 9\nmy_time.day\n#=> 10\nmy_time.wday\n#=> 4                # the day of the week, starting Sunday\nmy_time.hour\n#=> 3\nmy_time.min\n#=> 33\nmy_time.sec\n#=> 15\n\n\n\n\n\n\nTime\n also takes inputs if you want to create a specific time, from year to time zone:\n\n\n\n\n\nTime.new(2012,2,14)\n#=> 2012-02-14 00:00:00 -0800\n\n\n\n\n\n\nYou can add and subtract times just like they were numbers, since they are just seconds from Jan 1, 1970.\n\n\n\n\n\nvday = Time.new(2012,2,15)    # Valentine's Day!\n#=> 2012-02-14 00:00:00 -0800\nvday+3600                     # 1 hour's worth of seconds\n#=> 2012-02-14 01:00:00 -0800\nxmas = Time.new(2015,12,25)\n#=> 2013-12-25 00:00:00 -0700    # Xmas!\n(( xmas - Time.now )/60/60/24).to_i\n#=> 105                          # Until Xmas!\n\n\n\n\n\n\nFormating the Time String.\n\n\n\n\n\nnownow = Time.now\n#=> 2013-07-10 17:37:27 -0700\nnownow.ctime                  # a standard display type\n#=> \"Wed Jul 10 17:38:10 2013\"\nnownow.utc                    # Remove the time zone\n#=> 2013-07-11 00:38:10 UTC\nnownow.strftime(\"%Y-%m-%d %H:%M:%S\") # This function is important.\n#=> \"2013-07-11 00:38:10\"\n\n\n\n\nnil?\n vs \nblank?\n vs \nempty?\n [Stack Overflow]\n\n\n\n\n\n\n READ \nA concise explanation of nil v. empty v. blank in Ruby on Rails | Stack Overflow\n\n\n\n\n\n\n.nil?\n can be used on any object and is true if the object is nil.\n\n\n\n\n.empty?\n can be used on strings, arrays and hashes and returns true if:\n\n\nString length == 0\n\n\nArray length == 0\n\n\nHash length == 0\n\n\n\n\n\n\n.empty?\n on something that is nil will throw a \nNoMethodError\n\n\n.blank?\n(Rails Only) - will operate on any object as well as work like \n.empty?\n on strings, arrays and hashes. Won't throw error on nil objects.\n\n\n.blank?\n also evaluates true on strings which are non-empty but contain only whitespace.\n\n\n.present?\n(Rails Only) - is the opposite of the \n.blank?\n\n\nArray gotcha: \n.blank?\n will return false even if all elements of an array are blank. To determine blankness in this case, use \nall?\n with \nblank?\n.",
            "title": "Ruby Notes P2 - Explantions"
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#some-more-notesexplantions-on-ruby",
            "text": "Last Updated on Oct 4th 2015.",
            "title": "Some more Notes/Explantions on ruby."
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#operator",
            "text": "READ  What does the \u201c===\u201d operator do in Ruby? | StackOverflow     READ  === vs. == in Ruby | Stack Overflow    Its called  subsumption operator . So it its written  a === b , then  subsumption operator  is a boolean operator which asks the question \"If I have a drawer labelled  a  would it make sense to put  b  in that drawer?\"   a === b  means \"If a described a set, would b be a member of that set?\"   \n(1..5) === 3           # => true, since 3 belongs to the set of 1..5\n(1..5) === 6           # => false\n\nInteger === 42          # => true, since 42 is in set of all Integers\nInteger === 'fourtytwo' # => false\n\n /ell/ === 'Hello'     # => true, Hello matches somewhat with the /ell/ regex.\n /ell/ === 'Foobar'    # => false   The main usage for the === operator is in case expressions.   \ncase foo\nwhen bar  # here actually a === is happening, so we can replace bar with a\n  baz     # set, and foo with any member of that set.\nwhen quux\n  flurb\nelse\n  blarf\nend   Note that if you want to search for this operator, it is usually called the  triple equals operator  or  threequals operator  or  case equality operator . They are definitely misleading since  ===  has nothing to do with equality.  For  ===  there is no expectation of either symmetry or transitivity. In fact, it is very much by design not symmetric.",
            "title": "=== operator"
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#reflection-methods-in-objects",
            "text": "Methods like  is_a?  or  .class , which tell you something about the object itself are called  Reflection Methods .",
            "title": "Reflection Methods in Objects."
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#bang-methods",
            "text": "Bang Methods  are finished with an exclamation point  !  like  #sort! , and they actually modify the original object. The exclamation point lets you know you're in dangerous territory.  Chaining a bunch of methods together is called  Method Chaining .",
            "title": "Bang Methods."
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#nil",
            "text": "It represents nothing... literally. Before you assign a value to something, it starts as nil. for ex.   \nmy_arr = []\n#=> []\nmy_arr[3]\n#=> nil        Sometimes you want to know if a value or variable is nil before doing something. Use the method  nil?  to ask whether a given object is nil or not.   \nnil.nil?\n#=> true\n[].nil?\n#=> false        # Array is empty but not nil.   If you want to check whether an array or someother object is empty or not, use  empty .",
            "title": "nil"
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#p-vs-puts",
            "text": "p  will give you some more information because it runs the  #inspect  method on the object while  #puts  runs the  #to_s  method.  inspect  is supposed to impformative while  to_s  is supposed to be pretty.",
            "title": "p vs puts"
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#working-with-dates-and-times",
            "text": "Ruby uses the  Time  class to let you work with dates and times, giving you some handy methods to find out about specific parts.  Time.now  gives the current time. same for  Time.new .   \nmy_time = Time.now\n#=> 2015-09-10 03:33:15 +0530\nmy_time.year\n#=> 2015\nmy_time.month\n#=> 9\nmy_time.day\n#=> 10\nmy_time.wday\n#=> 4                # the day of the week, starting Sunday\nmy_time.hour\n#=> 3\nmy_time.min\n#=> 33\nmy_time.sec\n#=> 15   Time  also takes inputs if you want to create a specific time, from year to time zone:   \nTime.new(2012,2,14)\n#=> 2012-02-14 00:00:00 -0800   You can add and subtract times just like they were numbers, since they are just seconds from Jan 1, 1970.   \nvday = Time.new(2012,2,15)    # Valentine's Day!\n#=> 2012-02-14 00:00:00 -0800\nvday+3600                     # 1 hour's worth of seconds\n#=> 2012-02-14 01:00:00 -0800\nxmas = Time.new(2015,12,25)\n#=> 2013-12-25 00:00:00 -0700    # Xmas!\n(( xmas - Time.now )/60/60/24).to_i\n#=> 105                          # Until Xmas!   Formating the Time String.   \nnownow = Time.now\n#=> 2013-07-10 17:37:27 -0700\nnownow.ctime                  # a standard display type\n#=> \"Wed Jul 10 17:38:10 2013\"\nnownow.utc                    # Remove the time zone\n#=> 2013-07-11 00:38:10 UTC\nnownow.strftime(\"%Y-%m-%d %H:%M:%S\") # This function is important.\n#=> \"2013-07-11 00:38:10\"",
            "title": "working with dates and times."
        },
        {
            "location": "/notes/ruby/ruby_part_2_explanations/#nil-vs-blank-vs-empty-stack-overflow",
            "text": "READ  A concise explanation of nil v. empty v. blank in Ruby on Rails | Stack Overflow    .nil?  can be used on any object and is true if the object is nil.   .empty?  can be used on strings, arrays and hashes and returns true if:  String length == 0  Array length == 0  Hash length == 0    .empty?  on something that is nil will throw a  NoMethodError  .blank? (Rails Only) - will operate on any object as well as work like  .empty?  on strings, arrays and hashes. Won't throw error on nil objects.  .blank?  also evaluates true on strings which are non-empty but contain only whitespace.  .present? (Rails Only) - is the opposite of the  .blank?  Array gotcha:  .blank?  will return false even if all elements of an array are blank. To determine blankness in this case, use  all?  with  blank? .",
            "title": "nil? vs blank? vs empty? [Stack Overflow]"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/",
            "text": "Introductory Ruby Notes(P3) - From Ruby Monk\n\n\n\n\nLast Updated Nov 7th 2015.\n\n\n\n\n0.1 More Objects and Methods\n\n\n\n\nObject.\nmethods\n gives us an array of all the methods available on a given object.\n\n\nArray.\nsort\n sorts a given array.\n\n\nArray.\nindex(element)\n gives the index of element in Array.\n\n\nNumber.\nbetween?(sm, lg)\n returns true if Number is between sm and lg numbers.\n\n\n\n\n1.0 Introduction to Strings\n\n\n\n\n'September' and \"September\" are called literal strings.\n\n\nAny valid block of Ruby code you place inside #{} will be evaluated and inserted at that location.\n\n\nA String literal created with single quotes does not support interpolation.\n\n\nDouble quotes allow for escape sequences while single quotes do not.\n\n\nString.\ninclude? \"other_string\"'\n returns true if String contains other_string\n\n\nString.\nstart_with? \"prefix\"\n returns true if String starts with prefix\n\n\nString.\nend_with? \"suffix\"\n returns true if String ends with suffix.\n\n\nIt is conventional in Ruby to have '?' at the end of the method if that method returns only boolean values.\n\n\nString.\nindex \"substring\"\n returns the index of first occurence of \"substring\" in String.\n\n\nString.\ndowncase\n returns the lowercase version of String.\n\n\nString.\nupcase\n returns the uppercase version of String.\n\n\nString.\nswapcase\n returns the String with case swapped.\n\n\n\n\n1.2 Advanced String Operations\n\n\n\n\nString.\nsplit(pattern)\n splits the String depending on the pattern.\n\n\nconcatenating string with \n+\n, \n<<\n and \nString.concat\n.\n\n\n'Ruby' + 'Monk' # returns 'RubyMonk'\n\n\n'Ruby'.concat('Monk') # returns 'RubyMonk'\n\n\n'Ruby' << 'Monk' # appends 'Monk' to 'Ruby', giving 'RubyMonk'\n\n\n'<<' is just like '+', but in this case the String object 'Monk' will be appended to the object represented by 'Ruby' itself\n\n\nString.\nsub(pattern, replacement)\n replaces first appearance of pattern with replacement.\n\n\nString.\ngsub(pattern, replacement)\n replaces all occurrences of pattern.\n\n\nIn Ruby you specify a RegEx by putting it between a pair of forward slashes (/).\n\n\nString.\nmatch\nconverts a pattern to a RegEx, and then invokes its match method on the target String object.\n\n\n\n\n2.0 Boolean Expressions in Ruby\n\n\n\n\nEquality comparison, \n==\n\n\nothers are \n<=\n, \n>=\n, '<', \n>\n, \n!=\n with their usual meaning.\n\n\n&&\n stands for boolean 'and' and \n||\n stands for boolean 'or'.\n\n\n!\n stands for negation.\n\n\n\n\n2.1 The if..else construct\n\n\n\n\nRuby gives you the \nelsif\n keyword that helps you check for multiple possibilities inside an if..else construct, as shown in the example below.\n\n\n\n\n\ndef check_sign(number)\n  if number > 0\n    \"#{number} is positive\"\n  elsif number == 0\n    \"#{number} is zero\"\n  else\n    \"#{number} is negative\"\n  end        \nend\n\n\n\n\n\n\nunless\n keyword can used in places where you want to check for a negative condition. for ex.\n\n\n\n\n\nage = 10\nunless age >= 18\n  puts \"Sorry, you need to be at least eighteen to drive a car. Grow up fast!\"\nend\n\n\n\n\n\n\nTernary operator consists of \n?\n and \n:\n,  \n?\n and \n:\n can be used to mean \"then\" and \"else\" respectively. ex\n\n\n\n\n\ndef check_sign(number)\n  number > 0 ? \"#{number} is positive\" : \"#{number} is negative\"\nend\n\n\n\n\n\n\nthe objects \nfalse\n and \nnil\n equates to \nfalse\n, and therefore called \nfalsy\n.  Every other object like say \n1\n, \n0\n, \n\"\"\n are all evaluated to be true, and are called \ntruthy\n.\n\n\n\n\n2.2 Loops in Ruby\n\n\n\n\ndo\n loops. Below is an infinite do loop. It doesn't have a termination condition, therefore it never terminates.\n\n\nloop do\n  puts \"this line will be executed for an infinite amount of time\"\nend\n\n\n\nbreak\n is used to break out of loops.\n\n\nNumber.'times' runs a block of code Number times. ex.\n\n\n\n\n\n5.times do\n  # do the stuff that needs to be done\n  # This loop is run 5 times.\nend\n\n\n\n\n3.0 Introduction to Arrays\n\n\n\n\ncreating an array: \n[]\n or \nArray.new\n or \n[1,2, other_elements]\n\n\narray[n]\n returns the element at nth index.\n\n\nArray indexes can also start from the end of the array, starting from \n-1\n. this is called \nreverse index lookup\n.\n\n\n<<\n can be used to append elements to the Array. Also Array.\npush(el)\n does the same thing.\n\n\n\n\n3.1 Basic Array Operations\n\n\n\n\nArray.\nmap\n is used to perform a code block/method on each element of the Array. Array.\ncollect\n is the alias for this method. ex\n\n\n\n\n\n[1, 2, 3, 4, 5].map { |i| i + 1 } # returns [2, 3, 4, 5, 6]\n\n\n\n\n\n\nArray.\nselect\n filters elements of an array according to a boolean code block/method given as an argument.ex\n\n\n\n\n\nnames = ['rock', 'paper', 'scissors', 'lizard', 'spock']\nnames.select { |str| str.length > 5} # returns [\"scissors\", \"lizard\"]\n\n\n\n\n\n\nArray.\ndelete(obj)\n deletes all items from Array that are equal to obj.\n\n\nArray.\ndelete_if cond\n deletes all items from Array that satisfy the given cond in the argument. ex\n\n\n\n\n\n[1,2,3,4,5,6,7].delete_if{|i| i \n<\n 4 } # returns [4, 5, 6, 7]\n\n\n\n\n3.2 Iteration in Arrays.\n\n\n\n\nfor\n loops with Arrays. For loops are not used very much in Ruby. ex\n\n\narray = [1, 2, 3, 4, 5]\nfor i in array\n  puts i\nend\n\n\n\nArray.\neach block\n runs the argument block for each element of Array. Array.\neach\n are de-facto loop standards in Ruby. ex.\n\n\n\n\n\narray = [1, 2, 3, 4, 5]\narray.each do |i|\n  puts i\nend\n\n\n\n\n4.0 Introduction to Ruby Hashes\n\n\n\n\n\n\nA \nHash\n is a collection of key-value pairs. You retrieve or create a new entry in a Hash by referring to its key. Hashes are also called 'associative arrays', 'dictionary', 'HashMap' etc. in other languages\n\n\n\n\n\n\ncreating an hash: \n{}\n or \nHash.new\n or \n{1 => \"one\",2 => 12}\n\n\n\n\n[]\n is used for fetching values from a Hash. The brackets enclose the key.\n\n\nAdding key-value pairs: \nhash[\"key\"] = \"value\"\n\n\n\n\n4.1 Hashes, in and out.\n\n\n\n\nHash.\neach block\n is used to iterate over all elements of the hash. However unlike Array.\neach\n, it passes two values to the block: the key and the value of each element.\n\n\n[\nExtra\n] Number.\nto_f\n returns the float-version of the Number. By default, the division of int/int returns int.\n\n\nHash.\nkeys\n returns an array of all the keys in the Hash.\n\n\nHash.\nvalues\n returns an array of all the values in the Hash\n\n\nSpecifying a default in the Hash constructor will always return your custom default for any failed lookups on that hash instance. for ex, \nHash.new(\"default\")\n returns default for any failed lookups.\n\n\nThe two shortcuts with \nHash::[]\n.\n\n\nIn first one, Hash::[] takes a flat list of parameters, arranged in pairs, and then converts that into a Hash.\n\n\nThe second takes just one parameter: an array containing arrays which are themselves key-value pairs, and then converts that into a Hash.\n\n\n\n\n\nchuck_norris = Hash[:punch, 99, :kick, 98, :stops_bullets_with_hands, true] #first_way\nputs chuck_norris # returns {:punch=>99, :kick=>98, :stops_bullets_with_hands=>true}\n\ndef artax\n  a = [:punch, 0]\n  b = [:kick, 72]\n  c = [:stops_bullets_with_hands, false]\n  key_value_pairs = [a, b, c]\n  Hash[key_value_pairs] # second way.\nend\nputs artax # returns {:punch=>99, :kick=>98, :stops_bullets_with_hands=>true}\n\n\n\n\n\n5.0 Classes\n\n\n\n\nOne may look up the class of any object by simply calling the \nclass\n method on it.\n\n\nObject.\nis_a?(given_class)\n returns true if the Object is an instance of the given_class.\n\n\nclasses themselves are simply objects that belongs to the class \nClass\n.\n\n\n1.class.class\n returns \nClass\n.\n\n\ncalling the \nnew\n method on a class results in an instance being created.\n\n\n\n\n5.1 Building your own class\n\n\n\n\nCONVENTION\n: classes in Ruby have names beginning with a capital letter.\n\n\n\n\nFor a class to justify its existence, it needs to have two distinct features\n:\n\n\nState\n: A class must have some kind of state that defines the attributes of its instances. In the case of a simple rectangle, this could simply be its length and breadth.\n\n\nBehaviour\n: A class must also do something meaningful. This is achieved by the programmer adding methods to the class that interact with its state to give us meaningful results.\n\n\n\n\nCONVENTION\n:  instance variables of the class, are part of the \nstate\n and have \n@\n in front of them.\n\n\ninitialize\n method is the constructor of the class.\n\n\n\n\n6.1 Being Methodical\n\n\n\n\nData an object contains is \nwhat it is\n and its methods are \nwhat it can do\n.\n\n\nMethods aren't exempt from Ruby's \"everything is an object\" rule. methods exposed by any object are themselves objects.\n\n\nAll objects in Ruby expose a method \nmethod\n that can be used to get hold of any of its methods as an object.\n\n\nYou can still call the method using the eponymous \ncall\n method and it responds like a normal invocation of that method.\n\n\nEven a method that does nothing at all and has no return produces an object - the \nnil\n.\n\n\nThe \nreturn\n exits the method; the \nputs\n statement that comes right after is never run.\n\n\n\n\n\nputs 1.method(\"next\") # returns the method object - #\n\nputs 1.method(\"next\").call # calls the method object producing - 2\n\ndef do_nothing\nend\n\nputs do_nothing.class # an empty method returns nil object.\n\n\n\n\n6.2 Calling a method\n\n\n\n\n\n\nmethod arguments with default values.\n\n\ndef add(a_number, another_number = 0) # another_number has default value of 0.\n  a_number + another_number\nend\n\n\n\n\n\n\n\nsplat operator (*)\n: The splat operator is used to handle methods which have a variable parameter list. The parameter list passed to an object is available as a list with splat operator. The splat operator works both ways - you can use it to convert arrays to parameter lists as easily as we just converted a parameter list to an array.\n\n\n\n\n\n\n\ndef add(a_number, another_number, yet_another_number)\n  a_number + another_number + yet_another_number\nend\n\nnumbers_to_add = [1, 2, 3] # Without a splat, this is just one parameter\nputs add(\\*numbers_to_add)  # without the splat operator numbers to add wont be changed into a parameter list.\n\n\n\n\n\n\nYou can even mix parameter lists and splatting.\n\n\ndef add(*numbers)\n  numbers.inject(0) { |sum, number| sum + number }\nend\n\n\n\n\ndef add_with_message(message, *numbers)\n  \"#{message} : #{add(*numbers)}\"\nend\n\n\nputs add_with_message(\"The Sum is\", 1, 2, 3)\n\n\n\n\n\nArray.\njoin(delimiter)\n creates a string delimited by the delimiter.\n\n\nRuby allows the last parameter in the parameter list to skip using curly braces if it's a hash, making for a much prettier method invocation.\n\n\n\n\n\ndef add(a_number, another_number, options = {}) # putting the last parameter as {} allows it to be  a  \n  sum = a_number + another_number\n  sum = sum.abs if options[:absolute]\n  sum = sum.round(options[:precision]) if options[:round]\n  sum\nend\n\nputs add(1.0134, -5.568)\nputs add(1.0134, -5.568, absolute: true)\nputs add(1.0134, -5.568, absolute: true, round: true, precision: 2)\n\n\n\n\n\n\nAnother example.\n\n\n\n\n\n\ndef add(\\*numbers)\n  numbers.inject(0) { |sum, number| sum + number }  \nend\n\ndef subtract(\\*numbers)\n  current_result = numbers.shift\n  numbers.inject(current_result) { |current_result, number| current_result - number }  \nend\n\ndef calculate(\\*arguments)\n  # if the last argument is a Hash, extract it\n  # otherwise create an empty Hash\n  options = arguments[-1].is_a?(Hash) ? arguments.pop : {}\n  options[:add] = true if options.empty?\n  return add(\\*arguments) if options[:add]\n  return subtract(\\*arguments) if options[:subtract]\nend\n\n\n\n\n\n7.1 Lambdas In Ruby\n\n\n\n\na lambda is just a function, without a name. They're anonymous, little functional spies sneaking into the rest of your code.\n\n\nLambdas in Ruby are also objects, just like everything else! The last expression of a lambda is its return value, just like regular functions.\n\n\nLambdas take parameters by surrounding them with pipes.\n\n\nCONVENTION\n: Use {} for single line lambdas and do..end for lambdas that are longer than a single line.\n\n\n\n\n\nincrement = lambda {|x| x + 1 }\nincrement.call(2) # returns 3\n\n\n\n\n7.2 Blocks in Ruby\n\n\nLambdas vs Blocks\n\nA \nlambda\n is a piece of code that you can store in a variable, and is an object. The simplest explanation for a \nblock\n is that it is a piece of code that can't be stored in a variable and isn't an object. It is, as a consequence, significantly faster than a \nlambda\n, but not as versatile and also one of the rare instances where Ruby's \"everything is an object\" rule is broken.\n\n\n\n\n'yield item' passes the item to the block associated with the method it resides in. \nyield\n keyword can call a single lambda that has been implicitly passed to a method without using the parameter list\n\n\n\n\n8.1 Getting Modular\n\n\n\n\nModules\n only hold behaviour, unlike classes, which hold both behaviour and state.\n\n\nSince a module cannot be instantiated, there is no way for its methods to be called directly. Instead, it should be included in another class, which makes its methods available for use in instances of that class.\n\n\nIn order to include a module into a class, we use the method \ninclude\n which takes one parameter - the name of a Module. example.\n\n\n\n\n\nmodule WarmUp\n  def push_ups\n    \"Phew, I need a break!\"\n  end\nend\n\nclass Gym\n  include WarmUp\n\n  def preacher_curls\n    \"I'm building my biceps.\"\n  end\nend\n\nputs Gym.new.push_ups # returns Phew, I need a break!\n\n\n\n\n\n\n\nall modules in Ruby are instances of \nModule\n. \nModule\n is the superclass of \nClass\n, so this means that all classes are also modules, and can be used as such.\n\n\n\n\n8.2 Modules as Namespaces\n\n\n\n\nModules can also hold classes.\n\n\n\n\n\nmodule Perimeter\n  class Array\n    def initialize\n      @size = 400\n    end\n  end\nend\n\n\n\n\n\n\nWe have these two classes alongside each other. This is possible because we've namespaced our version of the Array class under the Perimeter module.\n\n\nThe real problem that namespacing solves is when you're loading libraries.\n\n\nWhen you're creating libraries with Ruby, it is a good practice to namespace your code under the name of your library or project.\n\n\n::\n is a \nconstant lookup operator\n that looks up the Array constant only in the Perimeter module.\n\n\nyou can scope any constant using \nconstant lookup operator\n(\n::\n) operator, not just classes.\n\n\nWe can nest constant lookups as deep as we want. And, we aren't restricted to just classes and modules.\n\n\nIf you prepend a constant with :: without a parent, the scoping happens on the topmost level.\n\n\n\n\n9.1 Streams\n\n\n\n\nAn \ninput/output\n stream is a sequence of data bytes that are accessed sequentially or randomly.\n\n\nStreams are like an abstract, high level concept.\n\n\nI/O streams are used to work with almost everything about your computer that you can touch, see, or hear.\n\n\npure\n code is code without side-effects: code which simply performs calculations.\n\n\n\n\nA \npure\n program isn't very useful if it can't even print its results to the screen! This is where I/O streams come in.\n\n\n\n\n\n\nIO.\nsysopen(Filename, mode)\n gives a file descriptor which can be used, with IO.\nnew\n to create new IO objects as shown below:\n\n\n\n\n\n\n\n# open the file \"new-fd\" and create a file descriptor:\nfd = IO.sysopen(\"neee\", \"w\")\n\n# create a new I/O stream using the file descriptor for \"new-fd\":\np IO.new(fd)\n\n\n\n\n\n\n\nThe notion of creating a \"file descriptor\" is inherited from UNIX, where everything is a file.\n\n\nThere are a bunch of I/O streams that Ruby initializes when the interpreter gets loaded. This is how to see them.\n\n\n\n\n\nio_streams = Array.new\nObjectSpace.each_object(IO) { |x| io_streams \n<\n<\n x }\n\np io_streams\n\n\n\n\n\n\n\nRuby defines constants \nSTDOUT\n, \nSTDIN\n and \nSTDERR\n that are IO objects pointing to your program's input, output and error streams that you can use through your terminal, without opening any new files.\n\n\nYou can see them with \nSTDOUT.class\n, showing the class name and \nSTDOUT.fileno\n showing the fileno.\n\n\nWhenever you call \nputs\n, the output is sent to the IO object that \nSTDOUT\n points to. Same with \ngets\n to \nSTDIN\n.\n\n\nThe Kernel module provides us with global variables \n$stdout\n, \n$stdin\n and \n$stderr\n as well, which point to the same IO objects that the constants \nSTDOUT\n, \nSTDIN\n and \nSTDERR\n point to.\n\n\nThe purpose of these global variables is \ntemporary redirection\n: you can assign these global variables to another IO object and pick up an IO stream other than the one that it is linked to by default.\n\n\nWe can use the StringIO class to easily fake out the IO objects. here is how to capture STDERR so that calls to warn  are redirected to our costum stringIO object.\n\n\n\n\n\ncapture = StringIO.new\n$stderr = capture\n\n\n\n\n9.2 Using the \nFile\n Class\n\n\n\n\nOpening, reading, and inspect a file with \nFile\n class.\n\n\n\n\n\nmode = \"r+\"\nfile = File.open(\"friend-list.txt\", mode)\nputs file.inspect\nputs file.read\nfile.close\n\n\n\n\n\n\nmode\n is a string that specifies the way you would like your file to be opened, it can be 'r+' for read-write, 'w' for write-only, 'r' for read-only. other modes are listed \nhere\n.\n\n\nFile.\nopen\n also takes an optional block which will auto-close the file you opened once you are done with it.\n\n\n\n\n\nwhat_am_i = File.open(\"clean-slate.txt\", \"w\") do |file|\n  file.puts \"Call me Ishmael.\"\nend\n\np what_am_i # Call me Ishmael.\n\nFile.open(\"clean-slate.txt\", \"r\") {|file| puts file.read }\n\n\n\n\n\n\nThe File.\nread\n method accepts two optional arguments:\nlength\n, the number of bytes upto which the stream will be read, and \nbuffer\n, where you can provide a String buffer which will be filled with the file data.\n\n\nFile.\nrewind\n rewinds the read file to the starting location so that it can be read again.\n\n\nFile.\nseek\n lets you \"seek\" to a particular byte in the file to tell Ruby where you want to start reading from.\n\n\nFile.\nreadlines\n returns an array of all the lines of the opened IO stream.\n\n\nwriting to a file with File.\nwrite\n\n\n\n\n\nFile.open(\"disguise\", \"w\") do |f|\n  f.write(\"Bar\")\nend",
            "title": "Ruby Notes P3 - Ruby Monk"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#introductory-ruby-notesp3-from-ruby-monk",
            "text": "Last Updated Nov 7th 2015.",
            "title": "Introductory Ruby Notes(P3) - From Ruby Monk"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#01-more-objects-and-methods",
            "text": "Object. methods  gives us an array of all the methods available on a given object.  Array. sort  sorts a given array.  Array. index(element)  gives the index of element in Array.  Number. between?(sm, lg)  returns true if Number is between sm and lg numbers.",
            "title": "0.1 More Objects and Methods"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#10-introduction-to-strings",
            "text": "'September' and \"September\" are called literal strings.  Any valid block of Ruby code you place inside #{} will be evaluated and inserted at that location.  A String literal created with single quotes does not support interpolation.  Double quotes allow for escape sequences while single quotes do not.  String. include? \"other_string\"'  returns true if String contains other_string  String. start_with? \"prefix\"  returns true if String starts with prefix  String. end_with? \"suffix\"  returns true if String ends with suffix.  It is conventional in Ruby to have '?' at the end of the method if that method returns only boolean values.  String. index \"substring\"  returns the index of first occurence of \"substring\" in String.  String. downcase  returns the lowercase version of String.  String. upcase  returns the uppercase version of String.  String. swapcase  returns the String with case swapped.",
            "title": "1.0 Introduction to Strings"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#12-advanced-string-operations",
            "text": "String. split(pattern)  splits the String depending on the pattern.  concatenating string with  + ,  <<  and  String.concat .  'Ruby' + 'Monk' # returns 'RubyMonk'  'Ruby'.concat('Monk') # returns 'RubyMonk'  'Ruby' << 'Monk' # appends 'Monk' to 'Ruby', giving 'RubyMonk'  '<<' is just like '+', but in this case the String object 'Monk' will be appended to the object represented by 'Ruby' itself  String. sub(pattern, replacement)  replaces first appearance of pattern with replacement.  String. gsub(pattern, replacement)  replaces all occurrences of pattern.  In Ruby you specify a RegEx by putting it between a pair of forward slashes (/).  String. match converts a pattern to a RegEx, and then invokes its match method on the target String object.",
            "title": "1.2 Advanced String Operations"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#20-boolean-expressions-in-ruby",
            "text": "Equality comparison,  ==  others are  <= ,  >= , '<',  > ,  !=  with their usual meaning.  &&  stands for boolean 'and' and  ||  stands for boolean 'or'.  !  stands for negation.",
            "title": "2.0 Boolean Expressions in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#21-the-ifelse-construct",
            "text": "Ruby gives you the  elsif  keyword that helps you check for multiple possibilities inside an if..else construct, as shown in the example below.   \ndef check_sign(number)\n  if number > 0\n    \"#{number} is positive\"\n  elsif number == 0\n    \"#{number} is zero\"\n  else\n    \"#{number} is negative\"\n  end        \nend   unless  keyword can used in places where you want to check for a negative condition. for ex.   \nage = 10\nunless age >= 18\n  puts \"Sorry, you need to be at least eighteen to drive a car. Grow up fast!\"\nend   Ternary operator consists of  ?  and  : ,   ?  and  :  can be used to mean \"then\" and \"else\" respectively. ex   \ndef check_sign(number)\n  number > 0 ? \"#{number} is positive\" : \"#{number} is negative\"\nend   the objects  false  and  nil  equates to  false , and therefore called  falsy .  Every other object like say  1 ,  0 ,  \"\"  are all evaluated to be true, and are called  truthy .",
            "title": "2.1 The if..else construct"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#22-loops-in-ruby",
            "text": "do  loops. Below is an infinite do loop. It doesn't have a termination condition, therefore it never terminates. \nloop do\n  puts \"this line will be executed for an infinite amount of time\"\nend  break  is used to break out of loops.  Number.'times' runs a block of code Number times. ex.   \n5.times do\n  # do the stuff that needs to be done\n  # This loop is run 5 times.\nend",
            "title": "2.2 Loops in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#30-introduction-to-arrays",
            "text": "creating an array:  []  or  Array.new  or  [1,2, other_elements]  array[n]  returns the element at nth index.  Array indexes can also start from the end of the array, starting from  -1 . this is called  reverse index lookup .  <<  can be used to append elements to the Array. Also Array. push(el)  does the same thing.",
            "title": "3.0 Introduction to Arrays"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#31-basic-array-operations",
            "text": "Array. map  is used to perform a code block/method on each element of the Array. Array. collect  is the alias for this method. ex   \n[1, 2, 3, 4, 5].map { |i| i + 1 } # returns [2, 3, 4, 5, 6]   Array. select  filters elements of an array according to a boolean code block/method given as an argument.ex   \nnames = ['rock', 'paper', 'scissors', 'lizard', 'spock']\nnames.select { |str| str.length > 5} # returns [\"scissors\", \"lizard\"]   Array. delete(obj)  deletes all items from Array that are equal to obj.  Array. delete_if cond  deletes all items from Array that satisfy the given cond in the argument. ex   \n[1,2,3,4,5,6,7].delete_if{|i| i  <  4 } # returns [4, 5, 6, 7]",
            "title": "3.1 Basic Array Operations"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#32-iteration-in-arrays",
            "text": "for  loops with Arrays. For loops are not used very much in Ruby. ex \narray = [1, 2, 3, 4, 5]\nfor i in array\n  puts i\nend  Array. each block  runs the argument block for each element of Array. Array. each  are de-facto loop standards in Ruby. ex.   \narray = [1, 2, 3, 4, 5]\narray.each do |i|\n  puts i\nend",
            "title": "3.2 Iteration in Arrays."
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#40-introduction-to-ruby-hashes",
            "text": "A  Hash  is a collection of key-value pairs. You retrieve or create a new entry in a Hash by referring to its key. Hashes are also called 'associative arrays', 'dictionary', 'HashMap' etc. in other languages    creating an hash:  {}  or  Hash.new  or  {1 => \"one\",2 => 12}   []  is used for fetching values from a Hash. The brackets enclose the key.  Adding key-value pairs:  hash[\"key\"] = \"value\"",
            "title": "4.0 Introduction to Ruby Hashes"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#41-hashes-in-and-out",
            "text": "Hash. each block  is used to iterate over all elements of the hash. However unlike Array. each , it passes two values to the block: the key and the value of each element.  [ Extra ] Number. to_f  returns the float-version of the Number. By default, the division of int/int returns int.  Hash. keys  returns an array of all the keys in the Hash.  Hash. values  returns an array of all the values in the Hash  Specifying a default in the Hash constructor will always return your custom default for any failed lookups on that hash instance. for ex,  Hash.new(\"default\")  returns default for any failed lookups.  The two shortcuts with  Hash::[] .  In first one, Hash::[] takes a flat list of parameters, arranged in pairs, and then converts that into a Hash.  The second takes just one parameter: an array containing arrays which are themselves key-value pairs, and then converts that into a Hash.   \nchuck_norris = Hash[:punch, 99, :kick, 98, :stops_bullets_with_hands, true] #first_way\nputs chuck_norris # returns {:punch=>99, :kick=>98, :stops_bullets_with_hands=>true}\n\ndef artax\n  a = [:punch, 0]\n  b = [:kick, 72]\n  c = [:stops_bullets_with_hands, false]\n  key_value_pairs = [a, b, c]\n  Hash[key_value_pairs] # second way.\nend\nputs artax # returns {:punch=>99, :kick=>98, :stops_bullets_with_hands=>true}",
            "title": "4.1 Hashes, in and out."
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#50-classes",
            "text": "One may look up the class of any object by simply calling the  class  method on it.  Object. is_a?(given_class)  returns true if the Object is an instance of the given_class.  classes themselves are simply objects that belongs to the class  Class .  1.class.class  returns  Class .  calling the  new  method on a class results in an instance being created.",
            "title": "5.0 Classes"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#51-building-your-own-class",
            "text": "CONVENTION : classes in Ruby have names beginning with a capital letter.   For a class to justify its existence, it needs to have two distinct features :  State : A class must have some kind of state that defines the attributes of its instances. In the case of a simple rectangle, this could simply be its length and breadth.  Behaviour : A class must also do something meaningful. This is achieved by the programmer adding methods to the class that interact with its state to give us meaningful results.   CONVENTION :  instance variables of the class, are part of the  state  and have  @  in front of them.  initialize  method is the constructor of the class.",
            "title": "5.1 Building your own class"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#61-being-methodical",
            "text": "Data an object contains is  what it is  and its methods are  what it can do .  Methods aren't exempt from Ruby's \"everything is an object\" rule. methods exposed by any object are themselves objects.  All objects in Ruby expose a method  method  that can be used to get hold of any of its methods as an object.  You can still call the method using the eponymous  call  method and it responds like a normal invocation of that method.  Even a method that does nothing at all and has no return produces an object - the  nil .  The  return  exits the method; the  puts  statement that comes right after is never run.   \nputs 1.method(\"next\") # returns the method object - # \nputs 1.method(\"next\").call # calls the method object producing - 2\n\ndef do_nothing\nend\n\nputs do_nothing.class # an empty method returns nil object.",
            "title": "6.1 Being Methodical"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#62-calling-a-method",
            "text": "method arguments with default values. \ndef add(a_number, another_number = 0) # another_number has default value of 0.\n  a_number + another_number\nend    splat operator (*) : The splat operator is used to handle methods which have a variable parameter list. The parameter list passed to an object is available as a list with splat operator. The splat operator works both ways - you can use it to convert arrays to parameter lists as easily as we just converted a parameter list to an array.    \ndef add(a_number, another_number, yet_another_number)\n  a_number + another_number + yet_another_number\nend\n\nnumbers_to_add = [1, 2, 3] # Without a splat, this is just one parameter\nputs add(\\*numbers_to_add)  # without the splat operator numbers to add wont be changed into a parameter list.   You can even mix parameter lists and splatting. \ndef add(*numbers)\n  numbers.inject(0) { |sum, number| sum + number }\nend   def add_with_message(message, *numbers)\n  \"#{message} : #{add(*numbers)}\"\nend  puts add_with_message(\"The Sum is\", 1, 2, 3)   Array. join(delimiter)  creates a string delimited by the delimiter.  Ruby allows the last parameter in the parameter list to skip using curly braces if it's a hash, making for a much prettier method invocation.   \ndef add(a_number, another_number, options = {}) # putting the last parameter as {} allows it to be  a  \n  sum = a_number + another_number\n  sum = sum.abs if options[:absolute]\n  sum = sum.round(options[:precision]) if options[:round]\n  sum\nend\n\nputs add(1.0134, -5.568)\nputs add(1.0134, -5.568, absolute: true)\nputs add(1.0134, -5.568, absolute: true, round: true, precision: 2)   Another example.   \n\ndef add(\\*numbers)\n  numbers.inject(0) { |sum, number| sum + number }  \nend\n\ndef subtract(\\*numbers)\n  current_result = numbers.shift\n  numbers.inject(current_result) { |current_result, number| current_result - number }  \nend\n\ndef calculate(\\*arguments)\n  # if the last argument is a Hash, extract it\n  # otherwise create an empty Hash\n  options = arguments[-1].is_a?(Hash) ? arguments.pop : {}\n  options[:add] = true if options.empty?\n  return add(\\*arguments) if options[:add]\n  return subtract(\\*arguments) if options[:subtract]\nend",
            "title": "6.2 Calling a method"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#71-lambdas-in-ruby",
            "text": "a lambda is just a function, without a name. They're anonymous, little functional spies sneaking into the rest of your code.  Lambdas in Ruby are also objects, just like everything else! The last expression of a lambda is its return value, just like regular functions.  Lambdas take parameters by surrounding them with pipes.  CONVENTION : Use {} for single line lambdas and do..end for lambdas that are longer than a single line.   \nincrement = lambda {|x| x + 1 }\nincrement.call(2) # returns 3",
            "title": "7.1 Lambdas In Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#72-blocks-in-ruby",
            "text": "Lambdas vs Blocks \nA  lambda  is a piece of code that you can store in a variable, and is an object. The simplest explanation for a  block  is that it is a piece of code that can't be stored in a variable and isn't an object. It is, as a consequence, significantly faster than a  lambda , but not as versatile and also one of the rare instances where Ruby's \"everything is an object\" rule is broken.   'yield item' passes the item to the block associated with the method it resides in.  yield  keyword can call a single lambda that has been implicitly passed to a method without using the parameter list",
            "title": "7.2 Blocks in Ruby"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#81-getting-modular",
            "text": "Modules  only hold behaviour, unlike classes, which hold both behaviour and state.  Since a module cannot be instantiated, there is no way for its methods to be called directly. Instead, it should be included in another class, which makes its methods available for use in instances of that class.  In order to include a module into a class, we use the method  include  which takes one parameter - the name of a Module. example.   \nmodule WarmUp\n  def push_ups\n    \"Phew, I need a break!\"\n  end\nend\n\nclass Gym\n  include WarmUp\n\n  def preacher_curls\n    \"I'm building my biceps.\"\n  end\nend\n\nputs Gym.new.push_ups # returns Phew, I need a break!   all modules in Ruby are instances of  Module .  Module  is the superclass of  Class , so this means that all classes are also modules, and can be used as such.",
            "title": "8.1 Getting Modular"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#82-modules-as-namespaces",
            "text": "Modules can also hold classes.   \nmodule Perimeter\n  class Array\n    def initialize\n      @size = 400\n    end\n  end\nend   We have these two classes alongside each other. This is possible because we've namespaced our version of the Array class under the Perimeter module.  The real problem that namespacing solves is when you're loading libraries.  When you're creating libraries with Ruby, it is a good practice to namespace your code under the name of your library or project.  ::  is a  constant lookup operator  that looks up the Array constant only in the Perimeter module.  you can scope any constant using  constant lookup operator ( :: ) operator, not just classes.  We can nest constant lookups as deep as we want. And, we aren't restricted to just classes and modules.  If you prepend a constant with :: without a parent, the scoping happens on the topmost level.",
            "title": "8.2 Modules as Namespaces"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#91-streams",
            "text": "An  input/output  stream is a sequence of data bytes that are accessed sequentially or randomly.  Streams are like an abstract, high level concept.  I/O streams are used to work with almost everything about your computer that you can touch, see, or hear.  pure  code is code without side-effects: code which simply performs calculations.   A  pure  program isn't very useful if it can't even print its results to the screen! This is where I/O streams come in.    IO. sysopen(Filename, mode)  gives a file descriptor which can be used, with IO. new  to create new IO objects as shown below:    \n# open the file \"new-fd\" and create a file descriptor:\nfd = IO.sysopen(\"neee\", \"w\")\n\n# create a new I/O stream using the file descriptor for \"new-fd\":\np IO.new(fd)   The notion of creating a \"file descriptor\" is inherited from UNIX, where everything is a file.  There are a bunch of I/O streams that Ruby initializes when the interpreter gets loaded. This is how to see them.   \nio_streams = Array.new\nObjectSpace.each_object(IO) { |x| io_streams  < <  x }\n\np io_streams   Ruby defines constants  STDOUT ,  STDIN  and  STDERR  that are IO objects pointing to your program's input, output and error streams that you can use through your terminal, without opening any new files.  You can see them with  STDOUT.class , showing the class name and  STDOUT.fileno  showing the fileno.  Whenever you call  puts , the output is sent to the IO object that  STDOUT  points to. Same with  gets  to  STDIN .  The Kernel module provides us with global variables  $stdout ,  $stdin  and  $stderr  as well, which point to the same IO objects that the constants  STDOUT ,  STDIN  and  STDERR  point to.  The purpose of these global variables is  temporary redirection : you can assign these global variables to another IO object and pick up an IO stream other than the one that it is linked to by default.  We can use the StringIO class to easily fake out the IO objects. here is how to capture STDERR so that calls to warn  are redirected to our costum stringIO object.   \ncapture = StringIO.new\n$stderr = capture",
            "title": "9.1 Streams"
        },
        {
            "location": "/notes/ruby/ruby_part_3_ruby_monk_intro/#92-using-the-file-class",
            "text": "Opening, reading, and inspect a file with  File  class.   \nmode = \"r+\"\nfile = File.open(\"friend-list.txt\", mode)\nputs file.inspect\nputs file.read\nfile.close   mode  is a string that specifies the way you would like your file to be opened, it can be 'r+' for read-write, 'w' for write-only, 'r' for read-only. other modes are listed  here .  File. open  also takes an optional block which will auto-close the file you opened once you are done with it.   \nwhat_am_i = File.open(\"clean-slate.txt\", \"w\") do |file|\n  file.puts \"Call me Ishmael.\"\nend\n\np what_am_i # Call me Ishmael.\n\nFile.open(\"clean-slate.txt\", \"r\") {|file| puts file.read }   The File. read  method accepts two optional arguments: length , the number of bytes upto which the stream will be read, and  buffer , where you can provide a String buffer which will be filled with the file data.  File. rewind  rewinds the read file to the starting location so that it can be read again.  File. seek  lets you \"seek\" to a particular byte in the file to tell Ruby where you want to start reading from.  File. readlines  returns an array of all the lines of the opened IO stream.  writing to a file with File. write   \nFile.open(\"disguise\", \"w\") do |f|\n  f.write(\"Bar\")\nend",
            "title": "9.2 Using the File Class"
        },
        {
            "location": "/notes/ruby/ruby_part_4/",
            "text": "Ruby Monk Notes on Ruby Primer - Ascent\n\n\n\n\nLast Updated on Nov 14th 2015.\n\n\n\n\n0.1 Blocks\n\n\n\n\nOfficial definition of blocks - \"A section of code which is grouped together\".\n\n\nor \"A block is code that you can store in a variable like any other object and run on demand.\"\n\n\nThe \nlambda\n keyword is what is most commonly used to create a block in Ruby.\n\n\nSo, A block is like a method, but one that isn\u2019t associated with any object.\n\n\nlambda\n blocks are objects of \nProc\n class.\n\n\ncall\n method is used to execute a lambda.\n\n\n\n\nConverting an method into a block with \nto_proc\n method.\n\n\n\nclass Calculator\n  def add(a, b)\n    return a + b\n  end\nend\n\naddition_method = Calculator.new.method(\"add\")\naddition =  addition_method.to_proc\n\nputs addition.call(5, 6)\n\n\n\n\nyield\n\n\n\n\nwithout using \nyield\n\n\n\n\n\ndef calculation(a, b, operation)\n  operation.call(a, b)\nend\n\nputs calculation(5, 6, lambda { |a, b| a + b }) # addition\nputs calculation(5, 6, lambda { |a, b| a - b }) # subtraction\n\n\n\n\n\n\nAs you can see, the calculation method accepts two numbers and a block that can perform a mathematical operation.\n\n\nwith \nyield\n\n\n\n\n\ndef calculation(a, b)\n  yield(a, b)\nend\n\nputs calculation(5, 6) { |a, b| a + b } # addition\nputs calculation(5, 6) { |a, b| a - b } # subtraction\n\n\n\n\n\n\nHow \nyield\n is different from the first example.\n\n\nThe block is now no longer a parameter to the method. The block has been implicitly passed to the method - note how it's outside the parentheses.\n\n\nYield makes executing the block feel like a method invocation within the method invocation rather than a block that's being explicitly called using Proc#call.\n\n\n\n\nYou have no handle to the block object anymore - yield \"magically\" invokes it without any object references being involved.\n\n\n\n\n\n\nYield is not a method, even though it looks like one.\n\n\n\n\nDoing a yield when there's no block can have unfortunate consequences - an exception (a LocalJumpError) with the message \"no block given\" is raised\n\n\nTo defend against this outcome, Ruby offers the \nblock_given?\n method that tells you if a block has been passed to a method implicitly.\n\n\n\n\n0.2 Implicit and Explicit Blocks\n\n\n\n\nSometimes, the performance benefits of implicit block invocation are outweighed by the need to have the block accessible as a concrete object.\n\n\nConverting from implicit to Explicit.\n\n\n\n\n\ndef calculation(a, b, &block) # &block is an explicit (named) parameter\n block.call(a, b)\nend\n\nputs calculation(5, 5) { |a, b| a + b } # this is an implicit block\n                                        # -- it is nameless and is not\n                                        # passed as an explicit parameter.  \n\n\n\n\n\n\nConverting from Explicit to Implicit.\n\n\n\n\n\ndef calculation(a, b)\n  yield(a, b) # yield calls an implicit (unnamed) block\nend\n\naddition = lambda {|x, y| x + y}\nputs calculation(5, 5, &addition) # like our last example, &addition is\n                                  # an explicit (named) block\n                                  # -- but `yield` can still call it!\n\n\n\n\n\n\nSimple set of syntactic rules to convert blocks from one form to the other:\n\n\nThe block should be the last parameter passed to a method.\n\n\nPlacing an ampersand (&) before the name of the last variable triggers the conversion.\n\n\nThe convention is to use curly braces for blocks with just a single line of code, and do-end when more than one line is involved.\n\n\n\n\n0.4 Blocks, Procs, and Lambdas\n\n\n\n\nA block created with \nlambda\n behaves like a method when you use return and simply exits the block, handing control back to the calling method.\n\n\nA block created with \nProc.new\n behaves like it\u2019s a part of the calling method when return is used within it, and returns from both the block itself as well as the calling method.\n\n\nAs a consequence, Proc.new is something that\u2019s hardly ever used to explicitly create blocks because of these surprising return semantics. It is recommended that you avoid using this form unless absolutely necessary.\n\n\n\n\n\nputs lambda {}\nputs Proc.new {}\n\n\n\n\n\n\nThe \n->\n literal form is a shorter version of Kernel#lambda. The following two lines produce identical results.\n\n\n\n\n\nshort = ->(a, b) { a + b }\nputs short.call(2, 3)\n\nlong = lambda { |a, b| a + b }\nputs long.call(2, 3)\n\n\n\n\n\n\nKernel#proc\n factory method is identical to Proc.new. Note that proc is a method and not a literal form like -> nor a keyword like yield.\n\n\n\n\n\n\nshort = proc { |a, b| a + b }\nputs short.call(2, 3)\n\nlong = Proc.new { |a, b| a + b }\nputs long.call(2, 3)\n\n\n\n\n1.0 Classification\n\n\n\n\nRuby gives us a method \nis_a\n that lets us ask which class does the object belongs to.\n\n\nAs you've probably guessed, Object.\nis_a?\n accepts a single parameter - a class. Object#is_a? has an alias, Object#kind_of?.\n\n\nWhen classifying objects, it's fairly common to start out with general classes and then delve in to create sub-classes that are more specialized.\n\n\nThis kind of parent-child relationship between classes is often referred to as inheritance, where the specialized class inherits the abilities of its more generic parent.\n\n\nThe \nClass#superclass\n method tells you which class any given class was inherited from.\n\n\n\n\n\nputs Float.superclass    # Numeric\nputs Numeric.superclass  # Object\nputs Object.superclass   # BasicObject\n\n\n\n\n\n\nAll Inheritance Chains in ruby end in \nBasicObject\n. Calling BasicObject's superclass method returns \nnil\n.\n\n\n\n\n1.2 Inheriting Class\n\n\n\n\n<\n syntax is used to indicate inheritance of one class to another\n\n\n\n\n\nclass Rectangle\n  def initialize(length, breadth)\n    @length = length\n    @breadth = breadth\n  end\n\n  def perimeter\n    2 * (@length + @breadth)\n  end\nend\n\n# Create a class Square here\nclass Square \n<\n Rectangle\n  def initialize(side)\n    @length = @breadth = side\n  end\nend\n\n\n\n\n\n\nSquare inherits from the Rectangle class and get perimeter method for free.\n\n\n\n\n1.3 Redefining, overriding, and \nsuper\n\n\n\n\nRedefining\n a method involves simply replacing one method with another. The original method is simply... lost.\n\n\nSince almost every method in Ruby can be redefined, great care must be taken especially with core Ruby classes like Object, Array and so on. A thoughtless method redefinition can break the language entirely\n\n\nOverriding\n in the context of classes involves defining a method in a subclass that is already defined in the superclass. This results in the method being overridden in the subclass, but doesn't in any way affect the method in the superclass.\n\n\nMost object oriented languages offer a mechanism by which an overridden method can be called by the overriding method. Ruby uses the \nsuper\n keyword to make this happen.\n\n\nA common use of inheritance is to have overridden methods in a subclass do something in addition to what the superclass method did, rather than something entirely different, and thats where \nsuper\n keyword comes into play.\n\n\n\n\n2.0 Instance Variables and Accessors\n\n\n\n\nInstance Variables\n are bound to an instance of a class and together forms what we call the state of an object. Every instance of a class has a different set of instance variables.\n\n\nRuby Rules: if your variable does not start with a \n@\n, it is considered to be a local variable, and not an \nInstance Variable\n. A local variable is available only inside the method it is defined. It is not shared across the entire object.\n\n\n\n\nThe instance variable is bound to the specific instance of the class. By binding itself to the entire object, an instance variable makes itself available to every method of the object.\n\n\n\n\n\n\nOnly the object's own methods can access its instance variables. So, you can have methods known as \ngetter\n methods whose sole purpose is to return the value of a particular instance variable.\n\n\n\n\n\n\nHaving to explicitly define \ngetter\n methods ensures that the object is always in control of how your state is exposed to the public.\n\n\n\n\n\n\nTo execute the statement item.color = 'red', Ruby invokes the the method Item#color= and passes the value 'red' to it. This means that all \nsetter\n methods end with the = sign in their names.\n\n\n\n\n\n\nAn Example for showing \ngetters\n and \nsetters\n in action.\n\n\nclass Item\n  def initialize(item_name, quantity)\n    @item_name = item_name\n    @quantity = quantity\n  end\n\n\n\n\n\n\ndef quantity=(new_quantity)\n    @quantity = new_quantity\n  end\n\n\ndef quantity\n    @quantity\n  end\n\nend\n\n\nitem = Item.new(\"a\",1)\nitem.quantity = 3\np item.quantity\n\n\n\nattr_accessors\n\n\n\n\nRuby provides a couple of methods to make life easy when declaring getters and setters for your object.\n\n\nThe \nattr_reader\n method defines the reader method for you. This is a convenient shortcut that you can use when your getter simply returns the value of the variable of the same name.\n\n\nThe \nattr_writer\n method defines a setter method that sets the value of the instance variable of the same name as the setter.\n\n\n\n\nIn some cases you might want to expose both the getter and setter for an instance variable. then, you can use another method, the \nattr_accessor\n, which will define both the getter and setter.\n\n\n\n\n\n\nRuby restricting access to instance variables except through getters and setters is not a limitation of the language, but a deliberate constraint.\n\n\n\n\n\n\n2.1 Class Variables and Methods\n\n\n\n\nAny method definition without the self qualifier is by default an instance method.\n\n\nDefining Class Methods example\n\n\n\n\n\nclass Item\n  def self.show\n    puts \"Class method show invoked\"\n  end  \nend\n\nItem.show\n\n\n\n\n\n\nIn \ndef self.show\n, the keyword \nself\n denotes that the method show is being defined in the context of the Class itself, not its instances.\n\n\nThere is one more way of declaring class methods.\n\n\n\n\n\nclass Item\n  class \n<\n<\n self\n    def show\n      puts \"Class method show invoked\"\n    end\n  end\n\nend\n\nItem.show\n\n\n\n\n\n\n\n\nNOTE\n: Class methods do not have access to instance methods or instance variables. However instance methods can access both class methods and class variables.\n\n\n\n\n\n\nClass variables\n are prefixed with \n@@\n.\n\n\n\n\nOne of the places where class variables do find proper use is to store application configuration - things like application name, version, database and other settings.\n\n\n\n\n\nclass ApplicationConfiguration\n  @@config = Hash.new\n  def self.set(property_name, value)\n    @@config[property_name] = value\n  end\n\n  def self.get(property_name)\n    @@config[property_name]\n  end  \nend\n\nApplicationConfiguration.set(\"name\", \"Demo Application\")\nApplicationConfiguration.set(\"version\", \"0.1\")\n\np ApplicationConfiguration.get(\"version\")\n\n\n\n\n\n\n\nClass Inheritance Variables\n example.\n\n\n\n\n\nclass ApplicationConfiguration\n  @configuration = {}\n\n  def self.set(property, value)\n    @configuration[property] = value\n  end\n\n  def self.get(property)\n    @configuration[property]\n  end\nend\n\nclass ERPApplicationConfiguration \n<\n ApplicationConfiguration\n  @configuration = {}\nend\n\nclass WebApplicationConfiguration \n<\n ApplicationConfiguration\n  @configuration = {}\nend\n\nERPApplicationConfiguration.set(\"name\", \"ERP Application\")\nWebApplicationConfiguration.set(\"name\", \"Web Application\")\n\np ERPApplicationConfiguration.get(\"name\")\np WebApplicationConfiguration.get(\"name\")\n\np ApplicationConfiguration.get(\"name\")\n\n\n\n\n\n\n\n\nPrefer \nclass instance variables\n over \nclass variables\n when you do really need store data at a class level. Class instance variables use the same notation as that of an instance variable. But unlike instance variables, you declare them inside the class definition directly.\n\n\n\n\n\n\nIt is almost always a bad idea to use a \nclass variable\n to store state. There are only a very few valid use cases where class variables are the right choice.\n\n\n\n\n\n\nInstance\n variables are available only for instances of a class. They look like @name. Class variables are available to both class methods and instance methods. They look like @@name\n\n\n\n\n\n\n2.2 Equality of Objects\n\n\n\n\nChecking for equality of two objects.\n\n\n\n\n\nclass Item\n    def initialize(item_name, qty)\n        @item_name = item_name\n        @qty = qty\n    end\nend\n\np Item.new(\"abcd\",1)  == Item.new(\"abcd\",1) #=> false\n\n\n\n\n\n\n\n\nThat is the wrong answer! Both objects have exactly the same state and behaviour (since they belong to the same class) and should have been treated as identical objects.\n\n\n\n\n\n\nIn Ruby, all binary operators (those which have two operands) including == are actually methods that gets invoked on the parameter on the left-hand side of the operator.\n\n\n\n\n\n\nFixing the equality operator example.\n\n\n\n\n\n\n\nclass Item\n    attr_reader :item_name, :qty\n\n    def initialize(item_name, qty)\n        @item_name = item_name\n        @qty = qty\n    end\n    def to_s\n        \"Item (#{@item_name}, #{@qty})\"\n    end\n    def ==(other_item)\n      @item_name == other_item.item_name && @qty == other_item.qty\n    end\nend\n\np Item.new(\"abcd\",1)  == Item.new(\"abcd\",1)\np Item.new(\"abcd\",2)  == Item.new(\"abcd\",1)\n\n\n\n\n\n\n\n\nEven though overriding \n==\n worked for simple equality comparisons, there are some cases where that isn't just enough. There are a lot of operations in Ruby that need to check the equality of two objects. While \n==\n serves the purpose well, it is not really fast.\n\n\n\n\n\n\nRuby provides a \nhash\n method with every object. It returns a numeric value which is usually unique to every object.\n\n\n\n\n\n\nSo instead of comparing two objects using \n==\n, which could be expensive when the objects are large, Ruby uses the \nhash\n of the object when possible.\n\n\n\n\n\n\nThe hash method returns the result of XORing all the instance variables that determine the state of the object",
            "title": "Ruby Notes P4 - Ruby Monk Primer Ascent"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#ruby-monk-notes-on-ruby-primer-ascent",
            "text": "Last Updated on Nov 14th 2015.",
            "title": "Ruby Monk Notes on Ruby Primer - Ascent"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#01-blocks",
            "text": "Official definition of blocks - \"A section of code which is grouped together\".  or \"A block is code that you can store in a variable like any other object and run on demand.\"  The  lambda  keyword is what is most commonly used to create a block in Ruby.  So, A block is like a method, but one that isn\u2019t associated with any object.  lambda  blocks are objects of  Proc  class.  call  method is used to execute a lambda.   Converting an method into a block with  to_proc  method.  \nclass Calculator\n  def add(a, b)\n    return a + b\n  end\nend\n\naddition_method = Calculator.new.method(\"add\")\naddition =  addition_method.to_proc\n\nputs addition.call(5, 6)",
            "title": "0.1 Blocks"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#yield",
            "text": "without using  yield   \ndef calculation(a, b, operation)\n  operation.call(a, b)\nend\n\nputs calculation(5, 6, lambda { |a, b| a + b }) # addition\nputs calculation(5, 6, lambda { |a, b| a - b }) # subtraction   As you can see, the calculation method accepts two numbers and a block that can perform a mathematical operation.  with  yield   \ndef calculation(a, b)\n  yield(a, b)\nend\n\nputs calculation(5, 6) { |a, b| a + b } # addition\nputs calculation(5, 6) { |a, b| a - b } # subtraction   How  yield  is different from the first example.  The block is now no longer a parameter to the method. The block has been implicitly passed to the method - note how it's outside the parentheses.  Yield makes executing the block feel like a method invocation within the method invocation rather than a block that's being explicitly called using Proc#call.   You have no handle to the block object anymore - yield \"magically\" invokes it without any object references being involved.    Yield is not a method, even though it looks like one.   Doing a yield when there's no block can have unfortunate consequences - an exception (a LocalJumpError) with the message \"no block given\" is raised  To defend against this outcome, Ruby offers the  block_given?  method that tells you if a block has been passed to a method implicitly.",
            "title": "yield"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#02-implicit-and-explicit-blocks",
            "text": "Sometimes, the performance benefits of implicit block invocation are outweighed by the need to have the block accessible as a concrete object.  Converting from implicit to Explicit.   \ndef calculation(a, b, &block) # &block is an explicit (named) parameter\n block.call(a, b)\nend\n\nputs calculation(5, 5) { |a, b| a + b } # this is an implicit block\n                                        # -- it is nameless and is not\n                                        # passed as an explicit parameter.     Converting from Explicit to Implicit.   \ndef calculation(a, b)\n  yield(a, b) # yield calls an implicit (unnamed) block\nend\n\naddition = lambda {|x, y| x + y}\nputs calculation(5, 5, &addition) # like our last example, &addition is\n                                  # an explicit (named) block\n                                  # -- but `yield` can still call it!   Simple set of syntactic rules to convert blocks from one form to the other:  The block should be the last parameter passed to a method.  Placing an ampersand (&) before the name of the last variable triggers the conversion.  The convention is to use curly braces for blocks with just a single line of code, and do-end when more than one line is involved.",
            "title": "0.2 Implicit and Explicit Blocks"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#04-blocks-procs-and-lambdas",
            "text": "A block created with  lambda  behaves like a method when you use return and simply exits the block, handing control back to the calling method.  A block created with  Proc.new  behaves like it\u2019s a part of the calling method when return is used within it, and returns from both the block itself as well as the calling method.  As a consequence, Proc.new is something that\u2019s hardly ever used to explicitly create blocks because of these surprising return semantics. It is recommended that you avoid using this form unless absolutely necessary.   \nputs lambda {}\nputs Proc.new {}   The  ->  literal form is a shorter version of Kernel#lambda. The following two lines produce identical results.   \nshort = ->(a, b) { a + b }\nputs short.call(2, 3)\n\nlong = lambda { |a, b| a + b }\nputs long.call(2, 3)   Kernel#proc  factory method is identical to Proc.new. Note that proc is a method and not a literal form like -> nor a keyword like yield.   \n\nshort = proc { |a, b| a + b }\nputs short.call(2, 3)\n\nlong = Proc.new { |a, b| a + b }\nputs long.call(2, 3)",
            "title": "0.4 Blocks, Procs, and Lambdas"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#10-classification",
            "text": "Ruby gives us a method  is_a  that lets us ask which class does the object belongs to.  As you've probably guessed, Object. is_a?  accepts a single parameter - a class. Object#is_a? has an alias, Object#kind_of?.  When classifying objects, it's fairly common to start out with general classes and then delve in to create sub-classes that are more specialized.  This kind of parent-child relationship between classes is often referred to as inheritance, where the specialized class inherits the abilities of its more generic parent.  The  Class#superclass  method tells you which class any given class was inherited from.   \nputs Float.superclass    # Numeric\nputs Numeric.superclass  # Object\nputs Object.superclass   # BasicObject   All Inheritance Chains in ruby end in  BasicObject . Calling BasicObject's superclass method returns  nil .",
            "title": "1.0 Classification"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#12-inheriting-class",
            "text": "<  syntax is used to indicate inheritance of one class to another   \nclass Rectangle\n  def initialize(length, breadth)\n    @length = length\n    @breadth = breadth\n  end\n\n  def perimeter\n    2 * (@length + @breadth)\n  end\nend\n\n# Create a class Square here\nclass Square  <  Rectangle\n  def initialize(side)\n    @length = @breadth = side\n  end\nend   Square inherits from the Rectangle class and get perimeter method for free.",
            "title": "1.2 Inheriting Class"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#13-redefining-overriding-and-super",
            "text": "Redefining  a method involves simply replacing one method with another. The original method is simply... lost.  Since almost every method in Ruby can be redefined, great care must be taken especially with core Ruby classes like Object, Array and so on. A thoughtless method redefinition can break the language entirely  Overriding  in the context of classes involves defining a method in a subclass that is already defined in the superclass. This results in the method being overridden in the subclass, but doesn't in any way affect the method in the superclass.  Most object oriented languages offer a mechanism by which an overridden method can be called by the overriding method. Ruby uses the  super  keyword to make this happen.  A common use of inheritance is to have overridden methods in a subclass do something in addition to what the superclass method did, rather than something entirely different, and thats where  super  keyword comes into play.",
            "title": "1.3 Redefining, overriding, and super"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#20-instance-variables-and-accessors",
            "text": "Instance Variables  are bound to an instance of a class and together forms what we call the state of an object. Every instance of a class has a different set of instance variables.  Ruby Rules: if your variable does not start with a  @ , it is considered to be a local variable, and not an  Instance Variable . A local variable is available only inside the method it is defined. It is not shared across the entire object.   The instance variable is bound to the specific instance of the class. By binding itself to the entire object, an instance variable makes itself available to every method of the object.    Only the object's own methods can access its instance variables. So, you can have methods known as  getter  methods whose sole purpose is to return the value of a particular instance variable.    Having to explicitly define  getter  methods ensures that the object is always in control of how your state is exposed to the public.    To execute the statement item.color = 'red', Ruby invokes the the method Item#color= and passes the value 'red' to it. This means that all  setter  methods end with the = sign in their names.    An Example for showing  getters  and  setters  in action. \nclass Item\n  def initialize(item_name, quantity)\n    @item_name = item_name\n    @quantity = quantity\n  end    def quantity=(new_quantity)\n    @quantity = new_quantity\n  end  def quantity\n    @quantity\n  end \nend  item = Item.new(\"a\",1)\nitem.quantity = 3\np item.quantity",
            "title": "2.0 Instance Variables and Accessors"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#attr_accessors",
            "text": "Ruby provides a couple of methods to make life easy when declaring getters and setters for your object.  The  attr_reader  method defines the reader method for you. This is a convenient shortcut that you can use when your getter simply returns the value of the variable of the same name.  The  attr_writer  method defines a setter method that sets the value of the instance variable of the same name as the setter.   In some cases you might want to expose both the getter and setter for an instance variable. then, you can use another method, the  attr_accessor , which will define both the getter and setter.    Ruby restricting access to instance variables except through getters and setters is not a limitation of the language, but a deliberate constraint.",
            "title": "attr_accessors"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#21-class-variables-and-methods",
            "text": "Any method definition without the self qualifier is by default an instance method.  Defining Class Methods example   \nclass Item\n  def self.show\n    puts \"Class method show invoked\"\n  end  \nend\n\nItem.show   In  def self.show , the keyword  self  denotes that the method show is being defined in the context of the Class itself, not its instances.  There is one more way of declaring class methods.   \nclass Item\n  class  < <  self\n    def show\n      puts \"Class method show invoked\"\n    end\n  end\n\nend\n\nItem.show    NOTE : Class methods do not have access to instance methods or instance variables. However instance methods can access both class methods and class variables.    Class variables  are prefixed with  @@ .   One of the places where class variables do find proper use is to store application configuration - things like application name, version, database and other settings.   \nclass ApplicationConfiguration\n  @@config = Hash.new\n  def self.set(property_name, value)\n    @@config[property_name] = value\n  end\n\n  def self.get(property_name)\n    @@config[property_name]\n  end  \nend\n\nApplicationConfiguration.set(\"name\", \"Demo Application\")\nApplicationConfiguration.set(\"version\", \"0.1\")\n\np ApplicationConfiguration.get(\"version\")   Class Inheritance Variables  example.   \nclass ApplicationConfiguration\n  @configuration = {}\n\n  def self.set(property, value)\n    @configuration[property] = value\n  end\n\n  def self.get(property)\n    @configuration[property]\n  end\nend\n\nclass ERPApplicationConfiguration  <  ApplicationConfiguration\n  @configuration = {}\nend\n\nclass WebApplicationConfiguration  <  ApplicationConfiguration\n  @configuration = {}\nend\n\nERPApplicationConfiguration.set(\"name\", \"ERP Application\")\nWebApplicationConfiguration.set(\"name\", \"Web Application\")\n\np ERPApplicationConfiguration.get(\"name\")\np WebApplicationConfiguration.get(\"name\")\n\np ApplicationConfiguration.get(\"name\")    Prefer  class instance variables  over  class variables  when you do really need store data at a class level. Class instance variables use the same notation as that of an instance variable. But unlike instance variables, you declare them inside the class definition directly.    It is almost always a bad idea to use a  class variable  to store state. There are only a very few valid use cases where class variables are the right choice.    Instance  variables are available only for instances of a class. They look like @name. Class variables are available to both class methods and instance methods. They look like @@name",
            "title": "2.1 Class Variables and Methods"
        },
        {
            "location": "/notes/ruby/ruby_part_4/#22-equality-of-objects",
            "text": "Checking for equality of two objects.   \nclass Item\n    def initialize(item_name, qty)\n        @item_name = item_name\n        @qty = qty\n    end\nend\n\np Item.new(\"abcd\",1)  == Item.new(\"abcd\",1) #=> false    That is the wrong answer! Both objects have exactly the same state and behaviour (since they belong to the same class) and should have been treated as identical objects.    In Ruby, all binary operators (those which have two operands) including == are actually methods that gets invoked on the parameter on the left-hand side of the operator.    Fixing the equality operator example.    \nclass Item\n    attr_reader :item_name, :qty\n\n    def initialize(item_name, qty)\n        @item_name = item_name\n        @qty = qty\n    end\n    def to_s\n        \"Item (#{@item_name}, #{@qty})\"\n    end\n    def ==(other_item)\n      @item_name == other_item.item_name && @qty == other_item.qty\n    end\nend\n\np Item.new(\"abcd\",1)  == Item.new(\"abcd\",1)\np Item.new(\"abcd\",2)  == Item.new(\"abcd\",1)    Even though overriding  ==  worked for simple equality comparisons, there are some cases where that isn't just enough. There are a lot of operations in Ruby that need to check the equality of two objects. While  ==  serves the purpose well, it is not really fast.    Ruby provides a  hash  method with every object. It returns a numeric value which is usually unique to every object.    So instead of comparing two objects using  == , which could be expensive when the objects are large, Ruby uses the  hash  of the object when possible.    The hash method returns the result of XORing all the instance variables that determine the state of the object",
            "title": "2.2 Equality of Objects"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/",
            "text": "Lesson 1: Data Analysis Process\n\n\n\n\nBased Udacity's UD170 Introduction to Data Analysis. Last Updated 7th Feb 2017.\n\n\n\n\nData Analysis Process\n\n\nPhases\n\n\nQuestion Phase -> Wrangling Phase -> Data Exploration Phase -> Drawing Conclusions Phase -> Communication Phase.\n\n\n\n\nNot a straight path. Sometimes you need to move back and forth in this process.\n\n\n\n\nData\n: Data for this lesson was a Udacity Student Data, such as enrollments, daily engagement and project submissions.\n\n\n\n\nEnrollments Data\n\n\nDaily Engagement Data\n - Shorter Version\n\n\nProject Submissions Data\n\n\n\n\nDetails about the data can be found \nhere\n.\n\n\n\n\n\n\nQuestion Phase\n:\n\n\n\n\nAsking Question about the Data.\n\n\neg. What are the Characterstics of students who pass the projects?\n\n\neg. How to best stock yout store to maximize profits?\n\n\neg. How much sleep I am getting daily?\n\n\n\n\n\n\n\n\nData Wrangling Phase\n:\n\n\n\n\nData Acquistion - Getting/Storing the Data.\n\n\nData Cleaning - Cleaning the data for inconsistencies or missing pieces such that it doesn't have any negative effect on the entire data analysis process.\n\n\n\n\n\n\n\n\nData Exploration Phase\n:\n\n\n\n\nBuild some Intuitions about the data. May be by looking at the raw plots of data.\n\n\nFind Patterns\n\n\n\n\n\n\n\n\nDrawing Conclusions Phase\n(Or \nMaking Predictions Phase\n):\n\n\n\n\nConclude/Predict based on the Exploration Phase.\n\n\nThis part usually requires some Statistics and Machine Learning.\n\n\nTry to find answers to your questions from the Questions Page.\n\n\n\n\n\n\n\n\nCommunications Phase\n:\n\n\n\n\nThis is where you communicate your findings from Conclusions/Predictions Phase.\n\n\nIt could be in form of a Blog post, Paper, Email, Powerpoint or even a simple conversation.\n\n\nData Visualization is almost always useful in communicate your findings.\n\n\n\n\n\n\n\n\nData Analysis and other related terms\n\n\n\n\n\n\nData Science\n: Very Similar to Data Analysis. Mostly refers to making recommendations or predictions based on the data, while Data Analysis refers to study data to learn some features of data. May require more experience.\n\n\n\n\n\n\nData Engineering\n: More Focussed on Data Wrangling part of Data Analysis. Involves data processing and storage.\n\n\n\n\n\n\nBig Data\n: Fuzzy term to describe \"a lot of\" data that today's companies collect, store, process and analyze.\n\n\n\n\n\n\nData Analysis Process Walkthrough w/ Example Data.\n\n\n# Reading data from a CSV file\n\nimport unicodecsv\n\ndef read_csv(filename):\n    with open(filename, 'rb') as f:\n        return list(unicodecsv.DictReader(f))\n\n\nenrollments = read_csv('data_files/enrollments.csv')\n\ndaily_engagement = read_csv('data_files/daily_engagement.csv')\n\nproject_submissions = read_csv('data_files/project_submissions.csv')\n\n\n\n\nenrollments[0]\n\n\n\n\nOUTPUT\n\n\n{u'account_key': u'448',\n u'cancel_date': u'2015-01-14',\n u'days_to_cancel': u'65',\n u'is_canceled': u'True',\n u'is_udacity': u'True',\n u'join_date': u'2014-11-10',\n u'status': u'canceled'}\n\n\n\ndaily_engagement[0]\n\n\n\n\nOUTPUT\n\n\n{u'acct': u'0',\n u'lessons_completed': u'0.0',\n u'num_courses_visited': u'1.0',\n u'projects_completed': u'0.0',\n u'total_minutes_visited': u'11.6793745',\n u'utc_date': u'2015-01-09'}\n\n\n\nproject_submissions[0]\n\n\n\n\nOUTPUT\n\n\n{u'account_key': u'256',\n u'assigned_rating': u'UNGRADED',\n u'completion_date': u'2015-01-16',\n u'creation_date': u'2015-01-14',\n u'lesson_key': u'3176718735',\n u'processing_state': u'EVALUATED'}\n\n\n\n# Cleaning / Fixing Data Types\n\nfrom datetime import datetime as dt\n\ndef parse_date(date_str):\n    return dt.strptime(date_str, \"%Y-%m-%d\") if date_str != '' else None\n\ndef parse_maybe_int(int_str):\n    return int(int_str) if int_str != '' else None\n\n\n\n\n# Clean up the data types in the enrollments table\nfor enrollment in enrollments:\n    enrollment['cancel_date'] = parse_date(enrollment['cancel_date'])\n    enrollment['days_to_cancel'] = parse_maybe_int(enrollment['days_to_cancel'])\n    enrollment['is_canceled'] = enrollment['is_canceled'] == 'True'\n    enrollment['is_udacity'] = enrollment['is_udacity'] == 'True'\n    enrollment['join_date'] = parse_date(enrollment['join_date'])\n\nenrollments[0]\n\n\n\n\nOUTPUT\n\n\n{u'account_key': u'448',\n u'cancel_date': datetime.datetime(2015, 1, 14, 0, 0),\n u'days_to_cancel': 65,\n u'is_canceled': True,\n u'is_udacity': True,\n u'join_date': datetime.datetime(2014, 11, 10, 0, 0),\n u'status': u'canceled'}\n\n\n\n# Clean up the data types in the engagement table\nfor engagement_record in daily_engagement:\n    engagement_record['lessons_completed'] = int(float(engagement_record['lessons_completed']))\n    engagement_record['num_courses_visited'] = int(float(engagement_record['num_courses_visited']))\n    engagement_record['projects_completed'] = int(float(engagement_record['projects_completed']))\n    engagement_record['total_minutes_visited'] = float(engagement_record['total_minutes_visited'])\n    engagement_record['utc_date'] = parse_date(engagement_record['utc_date'])\n\n\n\n\n\ndaily_engagement[0]\n\n\n\n\nOUTPUT\n\n\n{u'acct': u'0',\n u'lessons_completed': 0,\n u'num_courses_visited': 1,\n u'projects_completed': 0,\n u'total_minutes_visited': 11.6793745,\n u'utc_date': datetime.datetime(2015, 1, 9, 0, 0)}\n\n\n\n# Clean up the data types in the submissions table\nfor submission in project_submissions:\n    submission['completion_date'] = parse_date(submission['completion_date'])\n    submission['creation_date'] = parse_date(submission['creation_date'])\n\nproject_submissions[0]\n\n\n\n\nOUTPUT\n\n\n{u'account_key': u'256',\n u'assigned_rating': u'UNGRADED',\n u'completion_date': datetime.datetime(2015, 1, 16, 0, 0),\n u'creation_date': datetime.datetime(2015, 1, 14, 0, 0),\n u'lesson_key': u'3176718735',\n u'processing_state': u'EVALUATED'}\n\n\n\nSome Questions you could answer with this data? - Questions Phase\n\n\n\n\nHow long did it take for students to submit the projects?\n\n\nHow many students cancelled the course?\n\n\nHow many students submitted the project?\n\n\nHow many students passed the project?\n\n\nCorrelation between daily engagement and project submissions?\n\n\nEnrollments by time?\n\n\n\n\nMore from the forums\n\n\nfor engagement in daily_engagement:\n    engagement['account_key'] = engagement['acct']\n    engagement.pop('acct', None)\n\ndaily_engagement[0]\n\n\n\n\nOUTPUT\n\n\n{'account_key': u'0',\n u'lessons_completed': 0,\n u'num_courses_visited': 1,\n u'projects_completed': 0,\n u'total_minutes_visited': 11.6793745,\n u'utc_date': datetime.datetime(2015, 1, 9, 0, 0)}\n\n\n\ndaily_engagement[0]['account_key']\n\n\n\n\nOUTPUT\n\n\nu'0'\n\n\n\n# Finding No of unique student keys & no of csv rows.\n\ndef get_no_of_uniques(dataset, unique_key='account_key'):\n    unique = set()\n\n    for data in dataset:\n        unique.add(data[unique_key])\n\n    return len(unique), unique\n\n\n\n\nenrollment_num_rows = len(enrollments)\nenrollment_num_unique_students, enrollment_set_unique_students  = get_no_of_uniques(enrollments)\n\nengagement_num_rows = len(daily_engagement)\nengagement_num_unique_students, engagement_set_unique_students = get_no_of_uniques(daily_engagement)\n\nsubmission_num_rows = len(project_submissions)\nsubmission_num_unique_students, submission_set_unique_students = get_no_of_uniques(project_submissions)\n\nprint(\"enrollment_num_rows: %d\" % enrollment_num_rows)\nprint(\"enrollment_num_unique_students: %d\" % enrollment_num_unique_students)\n\nprint(\"engagement_num_rows: %d\" % engagement_num_rows)\nprint(\"engagement_num_unique_students: %d\" % engagement_num_unique_students)\n\nprint(\"submission_num_rows: %d\" % submission_num_rows)\nprint(\"submission_num_unique_students: %d\" % submission_num_unique_students)\n\n\n\nOUTPUT\n\n\nenrollment_num_rows: 1640\nenrollment_num_unique_students: 1302\nengagement_num_rows: 136240\nengagement_num_unique_students: 1237\nsubmission_num_rows: 3642\nsubmission_num_unique_students: 743\n\n\n\nProblems with the Data:\n\n\n\n\n\n\nThere are more unique students in the enrollments table than in the engagements table. [Engagement table is supposed to have 1 row per enrolled student per day]\n\n\n\n\n\n\nThe unique account key is named \naccount_key\n in 2 tables while its called \nacct\n in the engagements table. This is not a big issue, but an convenience. I'll fix this below. [\"I have moved this code above\"]\n\n\n\n\n\n\nInvestigating this missing data\n:\n\n\n\n\nIdentify surprising data points -> Enrollment records with no engagement records.\n\n\nPrint out one/more of the surprising data points.\n\n\nFix any problems you find with the data\n\n\nMore Investigation may be needed.\n\n\nOr there might not be a problem. Missing data may be natural.\n\n\n\n\n\n\n\n\n# Investigating surprising data:\n\nfor enrollment in enrollments:\n    if enrollment['account_key'] not in engagement_set_unique_students and enrollment['days_to_cancel'] > 0:\n        print(\"enrollment not in engagement %s\" % enrollment)\n\n\n\n\n\n\nOUTPUT\n\n\nenrollment not in engagement {u'status': u'canceled', u'is_udacity': True, u'is_canceled': True, u'join_date': datetime.datetime(2015, 1, 10, 0, 0), u'account_key': u'1304', u'cancel_date': datetime.datetime(2015, 3, 10, 0, 0), u'days_to_cancel': 59}\nenrollment not in engagement {u'status': u'canceled', u'is_udacity': True, u'is_canceled': True, u'join_date': datetime.datetime(2015, 3, 10, 0, 0), u'account_key': u'1304', u'cancel_date': datetime.datetime(2015, 6, 17, 0, 0), u'days_to_cancel': 99}\n\n\n\n# Removing all the udacity test accounts from my data.\n\nudacity_test_accounts = set()\n\nfor enrollment in enrollments:\n    if enrollment['is_udacity']:\n        udacity_test_accounts.add(enrollment['account_key'])\n\nlen(udacity_test_accounts)\n\ndef remove_udacity_accounts(dataset):\n    return filter(lambda x: x['account_key'] not in udacity_test_accounts, dataset)\n\n\nnon_udacity_enrollments = remove_udacity_accounts(enrollments)\nnon_udacity_engagements = remove_udacity_accounts(daily_engagement)\nnon_udacity_submissions = remove_udacity_accounts(project_submissions)\n\nlen(non_udacity_enrollments), len(non_udacity_engagements), len(non_udacity_submissions)\n\n\n\n\nOUTPUT\n\n\n(1622, 135656, 3634)\n\n\n\nQuestion Phase\n\n\nQuestion\n: (to Explore) How do numbers in daily Engagement differ for students who pass the first project?\n\n\nProblems with this question\n\n\n\n\nThis will include data from after the project.\n\n\nThis compares data from different lengths of time\n\n\nIncludes Engagement in courses not related to the first project\n\n\n\n\nRevision: Only look at engagement from the first week and exclude students who cancelled within a week(trial students).\n\n\n# Create a dictionary of students who either\n# - haven't cancelled yet\n# - stayed enrolled for more than 7 days.\n\n# key - 'account_key', value - `date of enrollment`\n# Name the dictionary paid_students\n\npaid_students = {}\n\nfor enrollment in non_udacity_enrollments:\n    if enrollment['days_to_cancel'] is None or enrollment['days_to_cancel'] > 7:\n        account_key = enrollment['account_key']\n        join_date = enrollment['join_date']\n\n        if account_key not in paid_students or \\\n            enrollment['join_date'] > paid_students[account_key]:\n            paid_students[account_key] = enrollment['join_date']\n\nlen(paid_students)\n\n\n\n\nOUTPUT\n\n\n995\n\n\n\nGetting Data from First Week\n\n\n# Takes a student's join date and the date of a specific engagement record,\n# and returns True if that engagement record happened within one week\n# of the student joining.\ndef within_one_week(join_date, engagement_date):\n    time_delta = engagement_date - join_date\n    return time_delta.days < 7 and time_delta.days >= 0\n\n\n\n\n## Remove Free Trial Records:\n\ndef remove_free_trial_cancels(dataset):\n    return filter(lambda x: x['account_key'] in paid_students, dataset)\n\npaid_enrollments = remove_free_trial_cancels(non_udacity_enrollments)\npaid_engagements = remove_free_trial_cancels(non_udacity_engagements)\npaid_submissions = remove_free_trial_cancels(non_udacity_submissions)\n\n\n\nlen(paid_enrollments), len(paid_engagements), len(paid_submissions)\n\n\n\n\nOUTPUT\n\n\n(1293, 134549, 3618)\n\n\n\nfor engagement in paid_engagements :\n    engagement['has_visited'] = 1 if engagement['num_courses_visited'] > 0 else 0\n\n\n\n\n## Create a list of rows from the engagement table including only rows where\n## the student is one of the paid students you just found, and the date is within\n## one week of the student's join date.\n\n\npaid_engagement_in_first_week = filter(lambda x: within_one_week(paid_students[x['account_key']], x['utc_date']),\n                                       paid_engagements)\n\nlen(paid_engagement_in_first_week)\n\n\n\n\nOUTPUT\n\n\n6919\n\n\n\nNext Task\n: Finding Average minutes spent in the classroom?\n\n\n\n\nGroup \npaid_engagement_in_the_first_week\n by account_key.\n\n\nAverage each group.\n\n\nAverage all the group averages.\n\n\n\n\nfrom collections import defaultdict\n\n\ndef group_data(dataset, group_by_key):\n    grouped_data = defaultdict(list)\n\n    for row in dataset:\n        grouped_data[row[group_by_key]].append(row)\n\n    return grouped_data\n\nengagement_by_account = group_data(paid_engagement_in_first_week, 'account_key')\n\n\nlen(engagement_by_account)\n\n\n\nOUTPUT\n\n\n995\n\n\n\ndef sum_grouped_items(grouped_data, field_name):\n    summed_data = defaultdict(int)\n\n    for key, rows in grouped_data.items():\n        for row in rows:\n            summed_data[key] += row[field_name]\n\n    return summed_data\n\ntotal_minutes_by_account = sum_grouped_items(engagement_by_account, 'total_minutes_visited')\n\ntotal_minutes_by_account.items()[7]\n\n\n\n\nOUTPUT\n\n\n(u'347', 713.3479524992999)\n\n\n\nimport numpy as np\n\n\ndef describe_data(data, title=None):\n    if title is not None:\n        print(\"====%s====\" % title)\n    print(\"Mean : %s\" % np.mean(data))\n    print(\"Standard Deviation : %s\" % np.std(data))\n    print(\"Min : %s\" % np.min(data))\n    print(\"Max : %s\" % np.max(data))\n\ntotal_minutes = total_minutes_by_account.values()\n\ndescribe_data(total_minutes)\n\n\n\nOUTPUT\n\n\nMean : 306.708326753\nStandard Deviation : 412.996933409\nMin : 0.0\nMax : 3564.7332645\n\n\n\n# Tracking down the student with maximum no of minutes\nstudent_with_max_minutes = None\nmax_minutes = 0\n\nfor student, total_minutes in total_minutes_by_account.items():\n    if total_minutes > max_minutes:\n        max_minutes = total_minutes\n        student_with_max_minutes = student\n\nstudent_with_max_minutes, max_minutes\n\n\n\n\nOUTPUT\n\n\n(u'163', 3564.7332644989997)\n\n\n\n# Engagements records for a given student: with max_minutes\n\nengagement_reocords_for_student_with_max_minutes = filter(lambda x: x['account_key'] == student_with_max_minutes,\n                                                          paid_engagement_in_first_week)\nengagement_reocords_for_student_with_max_minutes\n\n\n\n\nOUTPUT\n\n\n[{'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 4,\n  u'num_courses_visited': 4,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 850.519339666,\n  u'utc_date': datetime.datetime(2015, 7, 9, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 6,\n  u'num_courses_visited': 6,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 872.633923334,\n  u'utc_date': datetime.datetime(2015, 7, 10, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 6,\n  u'num_courses_visited': 2,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 777.018903666,\n  u'utc_date': datetime.datetime(2015, 7, 11, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 2,\n  u'num_courses_visited': 1,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 294.568774,\n  u'utc_date': datetime.datetime(2015, 7, 12, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 1,\n  u'num_courses_visited': 3,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 471.2139785,\n  u'utc_date': datetime.datetime(2015, 7, 13, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 1,\n  u'num_courses_visited': 2,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 298.778345333,\n  u'utc_date': datetime.datetime(2015, 7, 14, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 0,\n  u'lessons_completed': 0,\n  u'num_courses_visited': 0,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 0.0,\n  u'utc_date': datetime.datetime(2015, 7, 15, 0, 0)}]\n\n\n\nNext Task\n: Finding Average lessons completed in the classroom?\n- \nGroup paid_engagement_in_the_first_week by account_key.\n\n- Calculate sum for each group.\n- Average all the group sums.\n\n\ntotal_lessons_completed_by_account = sum_grouped_items(engagement_by_account, 'lessons_completed')\n\ntotal_lessons_completed = total_lessons_completed_by_account.values()\n\ndescribe_data(total_lessons_completed)\n\n\n\n\nOUTPUT\n\n\nMean : 1.63618090452\nStandard Deviation : 3.00256129983\nMin : 0\nMax : 36\n\n\n\nstudent_visits_by_account = sum_grouped_items(engagement_by_account, 'has_visited')\nstudent_visits = student_visits_by_account.values()\ndescribe_data(student_visits)\n\n\n\nOUTPUT\n\n\nMean : 2.86733668342\nStandard Deviation : 2.25519800292\nMin : 0\nMax : 7\n\n\n\n## Create two lists of engagement data for paid students in the first week.\n## The first list should contain data for students who eventually pass the\n## subway project, and the second list should contain data for students\n## who do not.\n\npass_subway_project = set()\n\nsubway_project_lesson_keys = ['746169184', '3176718735']\n\nfor submission in paid_submissions:\n    if submission['assigned_rating'] in ['PASSED', 'DISTINCTION'] and\\\n    submission['lesson_key'] in subway_project_lesson_keys:\n        pass_subway_project.add(submission['account_key'])\n\n\npassing_engagement = filter(lambda x: x['account_key'] in pass_subway_project,\n                            paid_engagement_in_first_week)\nnon_passing_engagement = filter(lambda x: x['account_key'] not in pass_subway_project,\n                                paid_engagement_in_first_week)\n\nlen(pass_subway_project), len(passing_engagement), len(non_passing_engagement), len(paid_engagement_in_first_week)\n\n\n\n\nOUTPUT\n\n\n(647, 4527, 2392, 6919)\n\n\n\n## Compute some metrics you're interested in and see how they differ for\n## students who pass the subway project vs. students who don't. A good\n## starting point would be the metrics we looked at earlier (minutes spent\n## in the classroom, lessons completed, and days visited).\n\npassing_engagements_by_account = group_data(passing_engagement, 'account_key')\nnon_passing_engagements_by_account = group_data(non_passing_engagement, 'account_key')\n\n\n\n\n\n\n# ====Lessons completed by passing students====\ntotal_lessons_completed_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'lessons_completed')\ntotal_lessons_completed_by_passing_students = total_lessons_completed_by_passing_students_by_account.values()\n\ndescribe_data(total_lessons_completed_by_passing_students, \"Lessons completed by passing students in the first week\")\n\n# ====Lessons completed by non passing students====\ntotal_lessons_completed_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'lessons_completed')\ntotal_lessons_completed_by_non_passing_students = total_lessons_completed_by_non_passing_students_by_account.values()\n\ndescribe_data(total_lessons_completed_by_non_passing_students, \"Lessons completed by non passing students in the first week\")\n\n\n\n\n\nOUTPUT\n\n\n====Lessons completed by passing students in the first week====\nMean : 2.05255023184\nStandard Deviation : 3.14222705558\nMin : 0\nMax : 36\n====Lessons completed by non passing students in the first week====\nMean : 0.862068965517\nStandard Deviation : 2.54915994183\nMin : 0\nMax : 27\n\n\n\n# ====Minutes spent by passing students====\ntotal_minutes_spent_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'total_minutes_visited')\ntotal_minutes_spent_by_passing_students = total_minutes_spent_by_passing_students_by_account.values()\n\ndescribe_data(total_minutes_spent_by_passing_students, \"Minutes spent by passing students in the first week\")\n\n# ====Minutes spent by non passing students====\ntotal_minutes_spent_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'total_minutes_visited')\ntotal_minutes_spent_by_non_passing_students = total_minutes_spent_by_non_passing_students_by_account.values()\n\ndescribe_data(total_minutes_spent_by_non_passing_students, \"Minutes spent by non passing students in the first week\")\n\n\n\n\n\nOUTPUT\n\n\n====Minutes spent by passing students in the first week====\nMean : 394.586046484\nStandard Deviation : 448.499519327\nMin : 0.0\nMax : 3564.7332645\n====Minutes spent by non passing students in the first week====\nMean : 143.326474267\nStandard Deviation : 269.538619011\nMin : 0.0\nMax : 1768.52274933\n\n\n\n# ====Days Visited by passing students====\ntotal_days_visited_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'has_visited')\ntotal_days_visited_by_passing_students = total_days_visited_by_passing_students_by_account.values()\n\ndescribe_data(total_days_visited_by_passing_students, \"Days Visited by passing students in the first week\")\n\n# ====Days Visited by non passing students====\ntotal_days_visited_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'has_visited')\ntotal_days_visited_by_non_passing_students = total_days_visited_by_non_passing_students_by_account.values()\n\ndescribe_data(total_days_visited_by_non_passing_students, \"Days Visited by non passing students in the first week\")\n\n\n\n\nOUTPUT\n\n\n====Days Visited by passing students in the first week====\nMean : 3.38485316847\nStandard Deviation : 2.25882147092\nMin : 0\nMax : 7\n====Days Visited by non passing students in the first week====\nMean : 1.90517241379\nStandard Deviation : 1.90573144136\nMin : 0\nMax : 7\n\n\n\nMaking Histograms to visualize data\n\n\n# A basic histogram\n# To make graphs look nicer, importing seaborn\n\nimport seaborn as sns\n\ndata = [1, 2, 1, 3, 3, 1, 4, 2]\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.hist(data)\n\n\n\n\nOUTPUT\n\n\n(array([ 3.,  0.,  0.,  2.,  0.,  0.,  2.,  0.,  0.,  1.]),\n array([ 1. ,  1.3,  1.6,  1.9,  2.2,  2.5,  2.8,  3.1,  3.4,  3.7,  4. ]),\n <a list of 10 Patch objects>)\n\n\n\n\n\n\n\n## Make histograms of the three metrics we looked at earlier for both\n## students who passed the subway project and students who didn't. You\n## might also want to make histograms of any other metrics you examined.\n\ndef plot_data(data, title=None):\n    if title is not None:\n        print(\"====%s====\" % title)\n    plt.hist(data)\n\ndef plot_data_improved(x, title=None, x_label=None, y_label=None, **kwargs):\n    plt.title(title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.hist(x, **kwargs)\n\n\n\n\nplot_data(total_lessons_completed_by_passing_students, \"Lessons completed by passing students in the first week\")\nplot_data(total_lessons_completed_by_non_passing_students, \"Lessons completed by non passing students in the first week\")\n\n\n\n\nOUTPUT\n\n\n====Lessons completed by passing students in the first week====\n====Lessons completed by non passing students in the first week====\n\n\n\n\n\nplot_data(total_minutes_spent_by_passing_students, \"Minutes spent by passing students in the first week\")\nplot_data(total_minutes_spent_by_non_passing_students, \"Minutes spent by non passing students in the first week\")\n\n\n\n\nOUTPUT\n\n\n====Minutes spent by passing students in the first week====\n====Minutes spent by non passing students in the first week====\n\n\n\n\n\nplot_data_improved(total_days_visited_by_passing_students, \"Days Visited by passing students in the first week\", \"No of days visited\", None, bins=8)\n\n\n\n\nOUTPUT\n\n\n\n\nplot_data_improved(total_days_visited_by_non_passing_students, \"Days Visited by non passing students in the first week\",  \"No of days visited\", None, bins=5)\n\n\n\nOUTPUT\n\n\n\n\nSome conclusions:\n\n\nThe shape of histograms for 'Minutes spent' and 'lessons learnt' are almost same for \npassing\n and \nnon passing students\n.\n\n\nThe shape of histogram for 'days visited' is quite different for \npassing\n vs \nnon passing students\n. For \npassing\n students, students are divided almost uniformly from 1 visits to 7 visits. While \nnon passing students\n, the number of students decrease as the no of visits increases.\n\n\nDrawing Conclusions Phase\n\n\nTentative Conclusion\n: Students who passed subway project spend more minutes in the classroom during the first week.\n\n\nIs this a true difference or due to noise in the data?\n\n\nCorrelation does not imply Causation\n\n\nCorrelation\n: Students who pass the first project are more likely to visit the classroom multiple times in the first week.\n\n\nCausation\n: Does visiting the classroom multiple times \ncauses\n the students to pass thier projects?\n\n\nPer Capita cheese consumption correlates with Number of people who died by becoming tangle in their bedsheets\n\n\n\n\nThird factors that could cause visiting the classroom and passing the project\n\n\n\n\n(Higher) Level of interest\n\n\n(Lack Of) Background Knowledge causing students to visited the classroom less frequently and failing the project.\n\n\n\n\nOr\n, This correlation could be because of causation.\n\n\nMaking Predictions.\n\n\nQ\n: Which students are \nlikely to pass\n thier first project?\n\n\nCould take a first pass using heuristics, but getting a really good predicition could be really difficult!\n- Lots of different pieces of information to look at.\n- Different features of the information set can interact with each other making it harder to predict by heuristics\n- \nMachine Learning\n can make predicitions automatically.\n\n\nCommunications Phase\n\n\n\n\n\n\n\n\nWhat findings are most important?\n\n\nHow will you present them?\n\n\n\n\n\n\n\n\n\n\nDifference in total minutes for passing vs non-passing students\n\n\nReport Average minutes spent\n\n\n\n\n\n\nDifference in days visited\n\n\nShow histograms (Polish your visualizations first!!)\n\n\n\n\n\n\n\n\nMaking graphs and visualization a little better\n\n\n\n\nAdd labels and titles\n: to add axis labels use \nplt.xlabel(\"Label for x axis\")\n and \nplt.ylabel(\"Label for y axis\")\n\n\nto set the graph title, use \nplt.title(\"Title of plot\")\n\n\nimport \nseaborn\n to make graphs look nicer.\n\n\nfine-tune your graphs to make them look better\n\n\n\n\nMade the above changes in my graphs.\n\n\n-- \nPyplot API Docs",
            "title": "L1: Data Analysis Process"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#lesson-1-data-analysis-process",
            "text": "Based Udacity's UD170 Introduction to Data Analysis. Last Updated 7th Feb 2017.",
            "title": "Lesson 1: Data Analysis Process"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#data-analysis-process",
            "text": "Phases  Question Phase -> Wrangling Phase -> Data Exploration Phase -> Drawing Conclusions Phase -> Communication Phase.   Not a straight path. Sometimes you need to move back and forth in this process.   Data : Data for this lesson was a Udacity Student Data, such as enrollments, daily engagement and project submissions.   Enrollments Data  Daily Engagement Data  - Shorter Version  Project Submissions Data   Details about the data can be found  here .    Question Phase :   Asking Question about the Data.  eg. What are the Characterstics of students who pass the projects?  eg. How to best stock yout store to maximize profits?  eg. How much sleep I am getting daily?     Data Wrangling Phase :   Data Acquistion - Getting/Storing the Data.  Data Cleaning - Cleaning the data for inconsistencies or missing pieces such that it doesn't have any negative effect on the entire data analysis process.     Data Exploration Phase :   Build some Intuitions about the data. May be by looking at the raw plots of data.  Find Patterns     Drawing Conclusions Phase (Or  Making Predictions Phase ):   Conclude/Predict based on the Exploration Phase.  This part usually requires some Statistics and Machine Learning.  Try to find answers to your questions from the Questions Page.     Communications Phase :   This is where you communicate your findings from Conclusions/Predictions Phase.  It could be in form of a Blog post, Paper, Email, Powerpoint or even a simple conversation.  Data Visualization is almost always useful in communicate your findings.",
            "title": "Data Analysis Process"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#data-analysis-and-other-related-terms",
            "text": "Data Science : Very Similar to Data Analysis. Mostly refers to making recommendations or predictions based on the data, while Data Analysis refers to study data to learn some features of data. May require more experience.    Data Engineering : More Focussed on Data Wrangling part of Data Analysis. Involves data processing and storage.    Big Data : Fuzzy term to describe \"a lot of\" data that today's companies collect, store, process and analyze.",
            "title": "Data Analysis and other related terms"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#data-analysis-process-walkthrough-w-example-data",
            "text": "# Reading data from a CSV file\n\nimport unicodecsv\n\ndef read_csv(filename):\n    with open(filename, 'rb') as f:\n        return list(unicodecsv.DictReader(f))\n\n\nenrollments = read_csv('data_files/enrollments.csv')\n\ndaily_engagement = read_csv('data_files/daily_engagement.csv')\n\nproject_submissions = read_csv('data_files/project_submissions.csv')  enrollments[0]  OUTPUT  {u'account_key': u'448',\n u'cancel_date': u'2015-01-14',\n u'days_to_cancel': u'65',\n u'is_canceled': u'True',\n u'is_udacity': u'True',\n u'join_date': u'2014-11-10',\n u'status': u'canceled'}  daily_engagement[0]  OUTPUT  {u'acct': u'0',\n u'lessons_completed': u'0.0',\n u'num_courses_visited': u'1.0',\n u'projects_completed': u'0.0',\n u'total_minutes_visited': u'11.6793745',\n u'utc_date': u'2015-01-09'}  project_submissions[0]  OUTPUT  {u'account_key': u'256',\n u'assigned_rating': u'UNGRADED',\n u'completion_date': u'2015-01-16',\n u'creation_date': u'2015-01-14',\n u'lesson_key': u'3176718735',\n u'processing_state': u'EVALUATED'}  # Cleaning / Fixing Data Types\n\nfrom datetime import datetime as dt\n\ndef parse_date(date_str):\n    return dt.strptime(date_str, \"%Y-%m-%d\") if date_str != '' else None\n\ndef parse_maybe_int(int_str):\n    return int(int_str) if int_str != '' else None  # Clean up the data types in the enrollments table\nfor enrollment in enrollments:\n    enrollment['cancel_date'] = parse_date(enrollment['cancel_date'])\n    enrollment['days_to_cancel'] = parse_maybe_int(enrollment['days_to_cancel'])\n    enrollment['is_canceled'] = enrollment['is_canceled'] == 'True'\n    enrollment['is_udacity'] = enrollment['is_udacity'] == 'True'\n    enrollment['join_date'] = parse_date(enrollment['join_date'])\n\nenrollments[0]  OUTPUT  {u'account_key': u'448',\n u'cancel_date': datetime.datetime(2015, 1, 14, 0, 0),\n u'days_to_cancel': 65,\n u'is_canceled': True,\n u'is_udacity': True,\n u'join_date': datetime.datetime(2014, 11, 10, 0, 0),\n u'status': u'canceled'}  # Clean up the data types in the engagement table\nfor engagement_record in daily_engagement:\n    engagement_record['lessons_completed'] = int(float(engagement_record['lessons_completed']))\n    engagement_record['num_courses_visited'] = int(float(engagement_record['num_courses_visited']))\n    engagement_record['projects_completed'] = int(float(engagement_record['projects_completed']))\n    engagement_record['total_minutes_visited'] = float(engagement_record['total_minutes_visited'])\n    engagement_record['utc_date'] = parse_date(engagement_record['utc_date'])  daily_engagement[0]  OUTPUT  {u'acct': u'0',\n u'lessons_completed': 0,\n u'num_courses_visited': 1,\n u'projects_completed': 0,\n u'total_minutes_visited': 11.6793745,\n u'utc_date': datetime.datetime(2015, 1, 9, 0, 0)}  # Clean up the data types in the submissions table\nfor submission in project_submissions:\n    submission['completion_date'] = parse_date(submission['completion_date'])\n    submission['creation_date'] = parse_date(submission['creation_date'])\n\nproject_submissions[0]  OUTPUT  {u'account_key': u'256',\n u'assigned_rating': u'UNGRADED',\n u'completion_date': datetime.datetime(2015, 1, 16, 0, 0),\n u'creation_date': datetime.datetime(2015, 1, 14, 0, 0),\n u'lesson_key': u'3176718735',\n u'processing_state': u'EVALUATED'}",
            "title": "Data Analysis Process Walkthrough w/ Example Data."
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#some-questions-you-could-answer-with-this-data-questions-phase",
            "text": "How long did it take for students to submit the projects?  How many students cancelled the course?  How many students submitted the project?  How many students passed the project?  Correlation between daily engagement and project submissions?  Enrollments by time?   More from the forums  for engagement in daily_engagement:\n    engagement['account_key'] = engagement['acct']\n    engagement.pop('acct', None)\n\ndaily_engagement[0]  OUTPUT  {'account_key': u'0',\n u'lessons_completed': 0,\n u'num_courses_visited': 1,\n u'projects_completed': 0,\n u'total_minutes_visited': 11.6793745,\n u'utc_date': datetime.datetime(2015, 1, 9, 0, 0)}  daily_engagement[0]['account_key']  OUTPUT  u'0'  # Finding No of unique student keys & no of csv rows.\n\ndef get_no_of_uniques(dataset, unique_key='account_key'):\n    unique = set()\n\n    for data in dataset:\n        unique.add(data[unique_key])\n\n    return len(unique), unique\n\n\n\n\nenrollment_num_rows = len(enrollments)\nenrollment_num_unique_students, enrollment_set_unique_students  = get_no_of_uniques(enrollments)\n\nengagement_num_rows = len(daily_engagement)\nengagement_num_unique_students, engagement_set_unique_students = get_no_of_uniques(daily_engagement)\n\nsubmission_num_rows = len(project_submissions)\nsubmission_num_unique_students, submission_set_unique_students = get_no_of_uniques(project_submissions)\n\nprint(\"enrollment_num_rows: %d\" % enrollment_num_rows)\nprint(\"enrollment_num_unique_students: %d\" % enrollment_num_unique_students)\n\nprint(\"engagement_num_rows: %d\" % engagement_num_rows)\nprint(\"engagement_num_unique_students: %d\" % engagement_num_unique_students)\n\nprint(\"submission_num_rows: %d\" % submission_num_rows)\nprint(\"submission_num_unique_students: %d\" % submission_num_unique_students)  OUTPUT  enrollment_num_rows: 1640\nenrollment_num_unique_students: 1302\nengagement_num_rows: 136240\nengagement_num_unique_students: 1237\nsubmission_num_rows: 3642\nsubmission_num_unique_students: 743",
            "title": "Some Questions you could answer with this data? - Questions Phase"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#problems-with-the-data",
            "text": "There are more unique students in the enrollments table than in the engagements table. [Engagement table is supposed to have 1 row per enrolled student per day]    The unique account key is named  account_key  in 2 tables while its called  acct  in the engagements table. This is not a big issue, but an convenience. I'll fix this below. [\"I have moved this code above\"]",
            "title": "Problems with the Data:"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#investigating-this-missing-data",
            "text": "Identify surprising data points -> Enrollment records with no engagement records.  Print out one/more of the surprising data points.  Fix any problems you find with the data  More Investigation may be needed.  Or there might not be a problem. Missing data may be natural.     # Investigating surprising data:\n\nfor enrollment in enrollments:\n    if enrollment['account_key'] not in engagement_set_unique_students and enrollment['days_to_cancel'] > 0:\n        print(\"enrollment not in engagement %s\" % enrollment)  OUTPUT  enrollment not in engagement {u'status': u'canceled', u'is_udacity': True, u'is_canceled': True, u'join_date': datetime.datetime(2015, 1, 10, 0, 0), u'account_key': u'1304', u'cancel_date': datetime.datetime(2015, 3, 10, 0, 0), u'days_to_cancel': 59}\nenrollment not in engagement {u'status': u'canceled', u'is_udacity': True, u'is_canceled': True, u'join_date': datetime.datetime(2015, 3, 10, 0, 0), u'account_key': u'1304', u'cancel_date': datetime.datetime(2015, 6, 17, 0, 0), u'days_to_cancel': 99}  # Removing all the udacity test accounts from my data.\n\nudacity_test_accounts = set()\n\nfor enrollment in enrollments:\n    if enrollment['is_udacity']:\n        udacity_test_accounts.add(enrollment['account_key'])\n\nlen(udacity_test_accounts)\n\ndef remove_udacity_accounts(dataset):\n    return filter(lambda x: x['account_key'] not in udacity_test_accounts, dataset)\n\n\nnon_udacity_enrollments = remove_udacity_accounts(enrollments)\nnon_udacity_engagements = remove_udacity_accounts(daily_engagement)\nnon_udacity_submissions = remove_udacity_accounts(project_submissions)\n\nlen(non_udacity_enrollments), len(non_udacity_engagements), len(non_udacity_submissions)  OUTPUT  (1622, 135656, 3634)",
            "title": "Investigating this missing data:"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#question-phase",
            "text": "Question : (to Explore) How do numbers in daily Engagement differ for students who pass the first project?",
            "title": "Question Phase"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#problems-with-this-question",
            "text": "This will include data from after the project.  This compares data from different lengths of time  Includes Engagement in courses not related to the first project   Revision: Only look at engagement from the first week and exclude students who cancelled within a week(trial students).  # Create a dictionary of students who either\n# - haven't cancelled yet\n# - stayed enrolled for more than 7 days.\n\n# key - 'account_key', value - `date of enrollment`\n# Name the dictionary paid_students\n\npaid_students = {}\n\nfor enrollment in non_udacity_enrollments:\n    if enrollment['days_to_cancel'] is None or enrollment['days_to_cancel'] > 7:\n        account_key = enrollment['account_key']\n        join_date = enrollment['join_date']\n\n        if account_key not in paid_students or \\\n            enrollment['join_date'] > paid_students[account_key]:\n            paid_students[account_key] = enrollment['join_date']\n\nlen(paid_students)  OUTPUT  995",
            "title": "Problems with this question"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#getting-data-from-first-week",
            "text": "# Takes a student's join date and the date of a specific engagement record,\n# and returns True if that engagement record happened within one week\n# of the student joining.\ndef within_one_week(join_date, engagement_date):\n    time_delta = engagement_date - join_date\n    return time_delta.days < 7 and time_delta.days >= 0  ## Remove Free Trial Records:\n\ndef remove_free_trial_cancels(dataset):\n    return filter(lambda x: x['account_key'] in paid_students, dataset)\n\npaid_enrollments = remove_free_trial_cancels(non_udacity_enrollments)\npaid_engagements = remove_free_trial_cancels(non_udacity_engagements)\npaid_submissions = remove_free_trial_cancels(non_udacity_submissions)\n\n\n\nlen(paid_enrollments), len(paid_engagements), len(paid_submissions)  OUTPUT  (1293, 134549, 3618)  for engagement in paid_engagements :\n    engagement['has_visited'] = 1 if engagement['num_courses_visited'] > 0 else 0  ## Create a list of rows from the engagement table including only rows where\n## the student is one of the paid students you just found, and the date is within\n## one week of the student's join date.\n\n\npaid_engagement_in_first_week = filter(lambda x: within_one_week(paid_students[x['account_key']], x['utc_date']),\n                                       paid_engagements)\n\nlen(paid_engagement_in_first_week)  OUTPUT  6919  Next Task : Finding Average minutes spent in the classroom?   Group  paid_engagement_in_the_first_week  by account_key.  Average each group.  Average all the group averages.   from collections import defaultdict\n\n\ndef group_data(dataset, group_by_key):\n    grouped_data = defaultdict(list)\n\n    for row in dataset:\n        grouped_data[row[group_by_key]].append(row)\n\n    return grouped_data\n\nengagement_by_account = group_data(paid_engagement_in_first_week, 'account_key')\n\n\nlen(engagement_by_account)  OUTPUT  995  def sum_grouped_items(grouped_data, field_name):\n    summed_data = defaultdict(int)\n\n    for key, rows in grouped_data.items():\n        for row in rows:\n            summed_data[key] += row[field_name]\n\n    return summed_data\n\ntotal_minutes_by_account = sum_grouped_items(engagement_by_account, 'total_minutes_visited')\n\ntotal_minutes_by_account.items()[7]  OUTPUT  (u'347', 713.3479524992999)  import numpy as np\n\n\ndef describe_data(data, title=None):\n    if title is not None:\n        print(\"====%s====\" % title)\n    print(\"Mean : %s\" % np.mean(data))\n    print(\"Standard Deviation : %s\" % np.std(data))\n    print(\"Min : %s\" % np.min(data))\n    print(\"Max : %s\" % np.max(data))\n\ntotal_minutes = total_minutes_by_account.values()\n\ndescribe_data(total_minutes)  OUTPUT  Mean : 306.708326753\nStandard Deviation : 412.996933409\nMin : 0.0\nMax : 3564.7332645  # Tracking down the student with maximum no of minutes\nstudent_with_max_minutes = None\nmax_minutes = 0\n\nfor student, total_minutes in total_minutes_by_account.items():\n    if total_minutes > max_minutes:\n        max_minutes = total_minutes\n        student_with_max_minutes = student\n\nstudent_with_max_minutes, max_minutes  OUTPUT  (u'163', 3564.7332644989997)  # Engagements records for a given student: with max_minutes\n\nengagement_reocords_for_student_with_max_minutes = filter(lambda x: x['account_key'] == student_with_max_minutes,\n                                                          paid_engagement_in_first_week)\nengagement_reocords_for_student_with_max_minutes  OUTPUT  [{'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 4,\n  u'num_courses_visited': 4,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 850.519339666,\n  u'utc_date': datetime.datetime(2015, 7, 9, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 6,\n  u'num_courses_visited': 6,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 872.633923334,\n  u'utc_date': datetime.datetime(2015, 7, 10, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 6,\n  u'num_courses_visited': 2,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 777.018903666,\n  u'utc_date': datetime.datetime(2015, 7, 11, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 2,\n  u'num_courses_visited': 1,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 294.568774,\n  u'utc_date': datetime.datetime(2015, 7, 12, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 1,\n  u'num_courses_visited': 3,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 471.2139785,\n  u'utc_date': datetime.datetime(2015, 7, 13, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 1,\n  u'lessons_completed': 1,\n  u'num_courses_visited': 2,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 298.778345333,\n  u'utc_date': datetime.datetime(2015, 7, 14, 0, 0)},\n {'account_key': u'163',\n  'has_visited': 0,\n  u'lessons_completed': 0,\n  u'num_courses_visited': 0,\n  u'projects_completed': 0,\n  u'total_minutes_visited': 0.0,\n  u'utc_date': datetime.datetime(2015, 7, 15, 0, 0)}]  Next Task : Finding Average lessons completed in the classroom?\n-  Group paid_engagement_in_the_first_week by account_key. \n- Calculate sum for each group.\n- Average all the group sums.  total_lessons_completed_by_account = sum_grouped_items(engagement_by_account, 'lessons_completed')\n\ntotal_lessons_completed = total_lessons_completed_by_account.values()\n\ndescribe_data(total_lessons_completed)  OUTPUT  Mean : 1.63618090452\nStandard Deviation : 3.00256129983\nMin : 0\nMax : 36  student_visits_by_account = sum_grouped_items(engagement_by_account, 'has_visited')\nstudent_visits = student_visits_by_account.values()\ndescribe_data(student_visits)  OUTPUT  Mean : 2.86733668342\nStandard Deviation : 2.25519800292\nMin : 0\nMax : 7  ## Create two lists of engagement data for paid students in the first week.\n## The first list should contain data for students who eventually pass the\n## subway project, and the second list should contain data for students\n## who do not.\n\npass_subway_project = set()\n\nsubway_project_lesson_keys = ['746169184', '3176718735']\n\nfor submission in paid_submissions:\n    if submission['assigned_rating'] in ['PASSED', 'DISTINCTION'] and\\\n    submission['lesson_key'] in subway_project_lesson_keys:\n        pass_subway_project.add(submission['account_key'])\n\n\npassing_engagement = filter(lambda x: x['account_key'] in pass_subway_project,\n                            paid_engagement_in_first_week)\nnon_passing_engagement = filter(lambda x: x['account_key'] not in pass_subway_project,\n                                paid_engagement_in_first_week)\n\nlen(pass_subway_project), len(passing_engagement), len(non_passing_engagement), len(paid_engagement_in_first_week)  OUTPUT  (647, 4527, 2392, 6919)  ## Compute some metrics you're interested in and see how they differ for\n## students who pass the subway project vs. students who don't. A good\n## starting point would be the metrics we looked at earlier (minutes spent\n## in the classroom, lessons completed, and days visited).\n\npassing_engagements_by_account = group_data(passing_engagement, 'account_key')\nnon_passing_engagements_by_account = group_data(non_passing_engagement, 'account_key')  # ====Lessons completed by passing students====\ntotal_lessons_completed_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'lessons_completed')\ntotal_lessons_completed_by_passing_students = total_lessons_completed_by_passing_students_by_account.values()\n\ndescribe_data(total_lessons_completed_by_passing_students, \"Lessons completed by passing students in the first week\")\n\n# ====Lessons completed by non passing students====\ntotal_lessons_completed_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'lessons_completed')\ntotal_lessons_completed_by_non_passing_students = total_lessons_completed_by_non_passing_students_by_account.values()\n\ndescribe_data(total_lessons_completed_by_non_passing_students, \"Lessons completed by non passing students in the first week\")  OUTPUT  ====Lessons completed by passing students in the first week====\nMean : 2.05255023184\nStandard Deviation : 3.14222705558\nMin : 0\nMax : 36\n====Lessons completed by non passing students in the first week====\nMean : 0.862068965517\nStandard Deviation : 2.54915994183\nMin : 0\nMax : 27  # ====Minutes spent by passing students====\ntotal_minutes_spent_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'total_minutes_visited')\ntotal_minutes_spent_by_passing_students = total_minutes_spent_by_passing_students_by_account.values()\n\ndescribe_data(total_minutes_spent_by_passing_students, \"Minutes spent by passing students in the first week\")\n\n# ====Minutes spent by non passing students====\ntotal_minutes_spent_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'total_minutes_visited')\ntotal_minutes_spent_by_non_passing_students = total_minutes_spent_by_non_passing_students_by_account.values()\n\ndescribe_data(total_minutes_spent_by_non_passing_students, \"Minutes spent by non passing students in the first week\")  OUTPUT  ====Minutes spent by passing students in the first week====\nMean : 394.586046484\nStandard Deviation : 448.499519327\nMin : 0.0\nMax : 3564.7332645\n====Minutes spent by non passing students in the first week====\nMean : 143.326474267\nStandard Deviation : 269.538619011\nMin : 0.0\nMax : 1768.52274933  # ====Days Visited by passing students====\ntotal_days_visited_by_passing_students_by_account = sum_grouped_items(passing_engagements_by_account,\n                                                                           'has_visited')\ntotal_days_visited_by_passing_students = total_days_visited_by_passing_students_by_account.values()\n\ndescribe_data(total_days_visited_by_passing_students, \"Days Visited by passing students in the first week\")\n\n# ====Days Visited by non passing students====\ntotal_days_visited_by_non_passing_students_by_account = sum_grouped_items(non_passing_engagements_by_account,\n                                                                           'has_visited')\ntotal_days_visited_by_non_passing_students = total_days_visited_by_non_passing_students_by_account.values()\n\ndescribe_data(total_days_visited_by_non_passing_students, \"Days Visited by non passing students in the first week\")  OUTPUT  ====Days Visited by passing students in the first week====\nMean : 3.38485316847\nStandard Deviation : 2.25882147092\nMin : 0\nMax : 7\n====Days Visited by non passing students in the first week====\nMean : 1.90517241379\nStandard Deviation : 1.90573144136\nMin : 0\nMax : 7",
            "title": "Getting Data from First Week"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#making-histograms-to-visualize-data",
            "text": "# A basic histogram\n# To make graphs look nicer, importing seaborn\n\nimport seaborn as sns\n\ndata = [1, 2, 1, 3, 3, 1, 4, 2]\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.hist(data)  OUTPUT  (array([ 3.,  0.,  0.,  2.,  0.,  0.,  2.,  0.,  0.,  1.]),\n array([ 1. ,  1.3,  1.6,  1.9,  2.2,  2.5,  2.8,  3.1,  3.4,  3.7,  4. ]),\n <a list of 10 Patch objects>)   \n\n## Make histograms of the three metrics we looked at earlier for both\n## students who passed the subway project and students who didn't. You\n## might also want to make histograms of any other metrics you examined.\n\ndef plot_data(data, title=None):\n    if title is not None:\n        print(\"====%s====\" % title)\n    plt.hist(data)\n\ndef plot_data_improved(x, title=None, x_label=None, y_label=None, **kwargs):\n    plt.title(title)\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.hist(x, **kwargs)\n\n\n\n\nplot_data(total_lessons_completed_by_passing_students, \"Lessons completed by passing students in the first week\")\nplot_data(total_lessons_completed_by_non_passing_students, \"Lessons completed by non passing students in the first week\")  OUTPUT  ====Lessons completed by passing students in the first week====\n====Lessons completed by non passing students in the first week====   plot_data(total_minutes_spent_by_passing_students, \"Minutes spent by passing students in the first week\")\nplot_data(total_minutes_spent_by_non_passing_students, \"Minutes spent by non passing students in the first week\")  OUTPUT  ====Minutes spent by passing students in the first week====\n====Minutes spent by non passing students in the first week====   plot_data_improved(total_days_visited_by_passing_students, \"Days Visited by passing students in the first week\", \"No of days visited\", None, bins=8)  OUTPUT   plot_data_improved(total_days_visited_by_non_passing_students, \"Days Visited by non passing students in the first week\",  \"No of days visited\", None, bins=5)  OUTPUT",
            "title": "Making Histograms to visualize data"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#some-conclusions",
            "text": "The shape of histograms for 'Minutes spent' and 'lessons learnt' are almost same for  passing  and  non passing students .  The shape of histogram for 'days visited' is quite different for  passing  vs  non passing students . For  passing  students, students are divided almost uniformly from 1 visits to 7 visits. While  non passing students , the number of students decrease as the no of visits increases.",
            "title": "Some conclusions:"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#drawing-conclusions-phase",
            "text": "Tentative Conclusion : Students who passed subway project spend more minutes in the classroom during the first week.  Is this a true difference or due to noise in the data?",
            "title": "Drawing Conclusions Phase"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#correlation-does-not-imply-causation",
            "text": "Correlation : Students who pass the first project are more likely to visit the classroom multiple times in the first week.  Causation : Does visiting the classroom multiple times  causes  the students to pass thier projects?  Per Capita cheese consumption correlates with Number of people who died by becoming tangle in their bedsheets   Third factors that could cause visiting the classroom and passing the project   (Higher) Level of interest  (Lack Of) Background Knowledge causing students to visited the classroom less frequently and failing the project.   Or , This correlation could be because of causation.",
            "title": "Correlation does not imply Causation"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#making-predictions",
            "text": "Q : Which students are  likely to pass  thier first project?  Could take a first pass using heuristics, but getting a really good predicition could be really difficult!\n- Lots of different pieces of information to look at.\n- Different features of the information set can interact with each other making it harder to predict by heuristics\n-  Machine Learning  can make predicitions automatically.",
            "title": "Making Predictions."
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#communications-phase",
            "text": "What findings are most important?  How will you present them?      Difference in total minutes for passing vs non-passing students  Report Average minutes spent    Difference in days visited  Show histograms (Polish your visualizations first!!)",
            "title": "Communications Phase"
        },
        {
            "location": "/notes/data-analysis/l1-data-analysis-process/#making-graphs-and-visualization-a-little-better",
            "text": "Add labels and titles : to add axis labels use  plt.xlabel(\"Label for x axis\")  and  plt.ylabel(\"Label for y axis\")  to set the graph title, use  plt.title(\"Title of plot\")  import  seaborn  to make graphs look nicer.  fine-tune your graphs to make them look better   Made the above changes in my graphs.  --  Pyplot API Docs",
            "title": "Making graphs and visualization a little better"
        },
        {
            "location": "/resources/learning_ruby/",
            "text": "Learning Ruby\n\n\n\n\nA never complete list on How to Learn Ruby. Last Update 8th Dec 2015.\n\n\n\n\nInteractive Tutorials.\n\n\n\n\nTry Ruby\n\n\nRuby Monk\n\n\nCodeAcademy Ruby Track\n\n\nCodeSchool Ruby Path\n\n\nPragmatic Studio Ruby Course\n\n\nBloc Ruby Warrior\n \nCaution\n includes Sound.\n\n\nRubular- Learn Regex in Ruby\n\n\n\n\nDocs & Guides.\n\n\n\n\nRuby Docs\n\n\nRubyDoc.info\n - Contains Documentation for many open-source libraries.\n\n\nRuby on Rails Guides\n\n\nAPI Dock (Rails)\n\n\nRuby Basics Guide\n\n\nLearn Ruby on Rails Web Development with Odin Project\n\n\n\n\nFull Courses.\n\n\n\n\nUniv of Texas Rails course\n\n\nRuby Koans\n\n\nThinkful Ruby on Rails Tutorial\n\n\nRails for Zombies from CodeSchool\n\n\nRuby in 100 minutes\n\n\nrubyonrailstutor on github\n\n\nThinkful's Learn Ruby on Rails as you modify a Craiglist clone\n\n\nMichael Hartl's Ruby on Rails Tutorial\n- charges $\n\n\nUdemy's Ruby on Rails for Beginners\n - may charge $\n\n\n\n\nScreencasts\n\n\n\n\nRailsCasts\n\n\nPeepcode\n\n\nGo Rails\n\n\n\n\nBlogs & Podcasts\n\n\n\n\nPlanet Ruby on Rails\n - Robots collecting Ruby Blogs.\n\n\nRuby Inside Blog\n\n\nRuby Corner - Directory of Blogs\n\n\nRuby Rogues Podcast\n\n\n5by5 podcasts\n\n\nRuby Weekly Newsletter\n\n\n\n\nBooks\n\n\n\n\nWhy's (Poignant) Guide to Ruby\n\n\nLearn Ruby the Hard Way\n\n\nProgramming Ruby\n\n\nRails 4 in Action\n - charges $\n\n\nAgile Web Development with Rails 4\n - charges $\n\n\nEveryDay Rspec\n - charges $\n\n\nRSpec Book\n - charges $\n\n\nBeginning Ruby\n - charges $\n\n\n\n\nGithub Awesome lists\n\n\n\n\nRuby-on-Rails-Learning-Resources\n\n\nAwesome-ruby\n\n\nAwesome-rubies collection by Planetruby\n\n\nAwesome-ruby-events collection by Planetruby\n\n\nAwesome-web-frameworks collection by PlanetRuby\n\n\nAwesome-web-servers collection by PlanetRuby\n\n\nAwesome Blogs collection by PlanetRuby\n\n\nAwesome Static Generators collection by PlanetRuby\n\n\nAwesome-Rails\n\n\nGuide How to Learn Ruby on Rails\n\n\n\n\nPractising your craft\n\n\n\n\nPracticing Ruby\n\n\nCodeWars\n\n\nCode Katas Collection\n\n\n\n\nRuby Important Questions on StackOverflow.\n\n\n\n\nCheck if a value exists in an array in Ruby\n\n\nHow do I pass command line arguments to a rake task?\n\n\nA concise explanation of nil v. empty v. blank in Ruby on Rails\n\n\n\n\nCommunity\n\n\n\n\nReddit Rails\n\n\nReddit Ruby\n\n\nStackoverflow Ruby\n\n\nStackoverflow Rails\n\n\nRubydevelopers on Slack\n\n\nQuora Ruby\n\n\nQuora Rails\n\n\nRuby on livecoding.tv\n\n\nConfreaks Conf Videos on Youtube\n\n\n\n\nUncategorized Resources\n\n\n\n\nRails Beginner Cheat Sheet\n\n\nRails Interview Questions\n\n\nRuby ToolBox\n\n\n\n\nOther Pages with Learning Resources.\n\n\n\n\nrailsapps.github.io - Recommended Rails tutorials\n\n\nNairuby - Learn Ruby on Rails\n\n\nQuora - Best Ruby on Rails Resources for Beginners\n\n\nHacker Hours Directory",
            "title": "Learning Ruby"
        },
        {
            "location": "/resources/learning_ruby/#learning-ruby",
            "text": "A never complete list on How to Learn Ruby. Last Update 8th Dec 2015.",
            "title": "Learning Ruby"
        },
        {
            "location": "/resources/learning_ruby/#interactive-tutorials",
            "text": "Try Ruby  Ruby Monk  CodeAcademy Ruby Track  CodeSchool Ruby Path  Pragmatic Studio Ruby Course  Bloc Ruby Warrior   Caution  includes Sound.  Rubular- Learn Regex in Ruby",
            "title": "Interactive Tutorials."
        },
        {
            "location": "/resources/learning_ruby/#docs-guides",
            "text": "Ruby Docs  RubyDoc.info  - Contains Documentation for many open-source libraries.  Ruby on Rails Guides  API Dock (Rails)  Ruby Basics Guide  Learn Ruby on Rails Web Development with Odin Project",
            "title": "Docs &amp; Guides."
        },
        {
            "location": "/resources/learning_ruby/#full-courses",
            "text": "Univ of Texas Rails course  Ruby Koans  Thinkful Ruby on Rails Tutorial  Rails for Zombies from CodeSchool  Ruby in 100 minutes  rubyonrailstutor on github  Thinkful's Learn Ruby on Rails as you modify a Craiglist clone  Michael Hartl's Ruby on Rails Tutorial - charges $  Udemy's Ruby on Rails for Beginners  - may charge $",
            "title": "Full Courses."
        },
        {
            "location": "/resources/learning_ruby/#screencasts",
            "text": "RailsCasts  Peepcode  Go Rails",
            "title": "Screencasts"
        },
        {
            "location": "/resources/learning_ruby/#blogs-podcasts",
            "text": "Planet Ruby on Rails  - Robots collecting Ruby Blogs.  Ruby Inside Blog  Ruby Corner - Directory of Blogs  Ruby Rogues Podcast  5by5 podcasts  Ruby Weekly Newsletter",
            "title": "Blogs &amp; Podcasts"
        },
        {
            "location": "/resources/learning_ruby/#books",
            "text": "Why's (Poignant) Guide to Ruby  Learn Ruby the Hard Way  Programming Ruby  Rails 4 in Action  - charges $  Agile Web Development with Rails 4  - charges $  EveryDay Rspec  - charges $  RSpec Book  - charges $  Beginning Ruby  - charges $",
            "title": "Books"
        },
        {
            "location": "/resources/learning_ruby/#github-awesome-lists",
            "text": "Ruby-on-Rails-Learning-Resources  Awesome-ruby  Awesome-rubies collection by Planetruby  Awesome-ruby-events collection by Planetruby  Awesome-web-frameworks collection by PlanetRuby  Awesome-web-servers collection by PlanetRuby  Awesome Blogs collection by PlanetRuby  Awesome Static Generators collection by PlanetRuby  Awesome-Rails  Guide How to Learn Ruby on Rails",
            "title": "Github Awesome lists"
        },
        {
            "location": "/resources/learning_ruby/#practising-your-craft",
            "text": "Practicing Ruby  CodeWars  Code Katas Collection",
            "title": "Practising your craft"
        },
        {
            "location": "/resources/learning_ruby/#ruby-important-questions-on-stackoverflow",
            "text": "Check if a value exists in an array in Ruby  How do I pass command line arguments to a rake task?  A concise explanation of nil v. empty v. blank in Ruby on Rails",
            "title": "Ruby Important Questions on StackOverflow."
        },
        {
            "location": "/resources/learning_ruby/#community",
            "text": "Reddit Rails  Reddit Ruby  Stackoverflow Ruby  Stackoverflow Rails  Rubydevelopers on Slack  Quora Ruby  Quora Rails  Ruby on livecoding.tv  Confreaks Conf Videos on Youtube",
            "title": "Community"
        },
        {
            "location": "/resources/learning_ruby/#uncategorized-resources",
            "text": "Rails Beginner Cheat Sheet  Rails Interview Questions  Ruby ToolBox",
            "title": "Uncategorized Resources"
        },
        {
            "location": "/resources/learning_ruby/#other-pages-with-learning-resources",
            "text": "railsapps.github.io - Recommended Rails tutorials  Nairuby - Learn Ruby on Rails  Quora - Best Ruby on Rails Resources for Beginners  Hacker Hours Directory",
            "title": "Other Pages with Learning Resources."
        },
        {
            "location": "/resources/general_dev_resources/",
            "text": "General Developer Resources\n\n\n\n\nA never complete list of Developer Resources. Last Updated on Jan 8th 2016.\n\n\n\n\nAwesome Lists for Everything.\n\n\n\n\nAwesome All lists combined\n\n\nAwesome Remote Jobs list\n\n\n\n\nOnline Coding Camps\n\n\n\n\nFree Code Camp - Javascript-stack-oriented\n\n\nBento- Python-stack oriented\n\n\nOdin Project- Ruby on Rails Oriented\n\n\nExercism\n\n\n\n\nProgramming Practice / Contests\n\n\n\n\nTop Coder\n\n\nGoogle Code Jam\n\n\nDevpost\n\n\nHackerearth\n\n\nHackerrank\n\n\nCS Unplugged\n\n\nCodility\n\n\nProject Euler\n\n\nCode Eval\n\n\nCode Forces\n\n\nLeet Code\n\n\nReddit /r/programmingchallenges\n\n\nReddit /r/dailyprogrammer\n\n\n\n\nLearning\n\n\n\n\nUdacity\n - free to learn.\n\n\nCoursera\n - free to learn.\n\n\nEdx\n - free to learn.\n\n\nCodeAcademy\n\n\nTutsplus\n - charges $ for video tutorials.\n\n\nPluralsight\n - charges  $\n\n\nLynda\n -  charges $.\n\n\nCodeSchool\n - charges $\n\n\nSkill Share\n - charges $\n\n\nTree house\n - charges $\n\n\nLevel Up Tuts\n\n\nEgghead.io\n - charges $\n\n\nThinkSter tutorials\n\n\nCareercup for Interviews\n\n\nInterview Cake\n - Learn how to beat the coding interview\n\n\nAlgorithmist\n\n\n\n\nCommunity\n\n\n\n\ncodebuddies\n - Peer-to-peer organized Google Hangouts for studying together, silent project co-working, and pair programming.\n\n\nslacklist | Slack channels listings\n\n\nchitchats | Slack listings\n\n\nOOZled\n - Curated resources for everything creative\n\n\n\n\nFinding Work (OS)\n\n\n\n\nBountysource\n - Bounties for Open source work.\n\n\nCodeMontage\n\n\nCodeTriage\n\n\nContrihub\n\n\nSearch Github for 'help wanted' issues\n\n\nOpenDesign\n\n\nLooking for Pull Requests\n\n\ncode4startup | Learn Code by cloning a startup\n\n\nCode Cloud Learn by creating projects",
            "title": "General Dev Resources"
        },
        {
            "location": "/resources/general_dev_resources/#general-developer-resources",
            "text": "A never complete list of Developer Resources. Last Updated on Jan 8th 2016.",
            "title": "General Developer Resources"
        },
        {
            "location": "/resources/general_dev_resources/#awesome-lists-for-everything",
            "text": "Awesome All lists combined  Awesome Remote Jobs list",
            "title": "Awesome Lists for Everything."
        },
        {
            "location": "/resources/general_dev_resources/#online-coding-camps",
            "text": "Free Code Camp - Javascript-stack-oriented  Bento- Python-stack oriented  Odin Project- Ruby on Rails Oriented  Exercism",
            "title": "Online Coding Camps"
        },
        {
            "location": "/resources/general_dev_resources/#programming-practice-contests",
            "text": "Top Coder  Google Code Jam  Devpost  Hackerearth  Hackerrank  CS Unplugged  Codility  Project Euler  Code Eval  Code Forces  Leet Code  Reddit /r/programmingchallenges  Reddit /r/dailyprogrammer",
            "title": "Programming Practice / Contests"
        },
        {
            "location": "/resources/general_dev_resources/#learning",
            "text": "Udacity  - free to learn.  Coursera  - free to learn.  Edx  - free to learn.  CodeAcademy  Tutsplus  - charges $ for video tutorials.  Pluralsight  - charges  $  Lynda  -  charges $.  CodeSchool  - charges $  Skill Share  - charges $  Tree house  - charges $  Level Up Tuts  Egghead.io  - charges $  ThinkSter tutorials  Careercup for Interviews  Interview Cake  - Learn how to beat the coding interview  Algorithmist",
            "title": "Learning"
        },
        {
            "location": "/resources/general_dev_resources/#community",
            "text": "codebuddies  - Peer-to-peer organized Google Hangouts for studying together, silent project co-working, and pair programming.  slacklist | Slack channels listings  chitchats | Slack listings  OOZled  - Curated resources for everything creative",
            "title": "Community"
        },
        {
            "location": "/resources/general_dev_resources/#finding-work-os",
            "text": "Bountysource  - Bounties for Open source work.  CodeMontage  CodeTriage  Contrihub  Search Github for 'help wanted' issues  OpenDesign  Looking for Pull Requests  code4startup | Learn Code by cloning a startup  Code Cloud Learn by creating projects",
            "title": "Finding Work (OS)"
        },
        {
            "location": "/notes/ruby/",
            "text": "Introductory Ruby Notes.\n\n\nIndex   \n\n\nNotes\n\n\n\n\n\n\n\n\nTopic\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nRuby Part 1 CodeAcademy\n\n\nSee\n\n\n\n\n\n\nRuby Part 2 Some Explantions\n\n\nSee\n\n\n\n\n\n\nRuby Part 3 Ruby Monk Notes\n\n\nSee\n\n\n\n\n\n\nRuby Part 4 Primer Ascent\n\n\nSee",
            "title": "__ruby_notes_index"
        },
        {
            "location": "/notes/ruby/#introductory-ruby-notes",
            "text": "",
            "title": "Introductory Ruby Notes."
        },
        {
            "location": "/notes/ruby/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/notes/ruby/#notes",
            "text": "Topic  Link      Ruby Part 1 CodeAcademy  See    Ruby Part 2 Some Explantions  See    Ruby Part 3 Ruby Monk Notes  See    Ruby Part 4 Primer Ascent  See",
            "title": "Notes"
        },
        {
            "location": "/notes/data-analysis/",
            "text": "Introduction to Data Analysis Notes. (Jan - Feb 2017)\n\n\nIndex   \n\n\nNotes\n\n\n\n\n\n\n\n\nTopic\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nL1: Data Analysis Process\n\n\nSee",
            "title": "__data_analysis_notes_index"
        },
        {
            "location": "/notes/data-analysis/#introduction-to-data-analysis-notes-jan-feb-2017",
            "text": "",
            "title": "Introduction to Data Analysis Notes. (Jan - Feb 2017)"
        },
        {
            "location": "/notes/data-analysis/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/notes/data-analysis/#notes",
            "text": "Topic  Link      L1: Data Analysis Process  See",
            "title": "Notes"
        },
        {
            "location": "/internal/",
            "text": "Internal API",
            "title": "__Internal"
        },
        {
            "location": "/internal/#internal-api",
            "text": "",
            "title": "Internal API"
        }
    ]
}